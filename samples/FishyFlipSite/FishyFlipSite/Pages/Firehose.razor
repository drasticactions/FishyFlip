@page "/firehose"
@using Drastic.Tools;
@using FishyFlip;
@using FishyFlip.Events;
@using FishyFlip.Models;
@using Microsoft.Extensions.Logging.Debug;
@using System.Collections.ObjectModel;
@using FishyFlip.Lexicon.App.Bsky.Actor
@using FishyFlip.Lexicon.App.Bsky.Feed
@using FishyFlip.Lexicon.App.Bsky.Graph


<h3>Firehose</h3>

<div>
    <label for="inputBox">Instance:</label>
    <input type="text" @bind="instance" name="inputBox">
</div>

<div>
    <button @onclick="Connect">Connect</button>
    <button @onclick="Disconnect">Disconnect</button>
</div>

@if (isSubscribed)
{
    <p style="color: green">Connected</p>
}
else
{
    <p style="color: red">Disconnected</p>
}

<div style="border-style: dotted; border-color: red; border-width: 10px; width: 400px; height: 400px; overflow-y:auto;">
    @foreach (var item in Posts)
    {
        <div class="post">
            <sub class="postTextSub">@item.Type</sub>
            <p class="postText">@item.Detail</p>
            <sub class="postTextSub">@item.CreatedAt</sub>
        </div>
    }
</div>

@code {
    private string instance = "bsky.network";
    private ATWebSocketProtocol? protocol;
    private ILogger? logger;
    private bool isSubscribed = false;
    ObservableCollection<FirehoseItem> Posts = new ObservableCollection<FirehoseItem>();

    private async Task Connect()
    {
        await Disconnect();

        var host = instance ?? "bsky.network";

        if (!Uri.TryCreate(host, UriKind.Absolute, out Uri? uri))
        {
            uri = new Uri($"https://{host}");
        }

        if (uri is null)
        {
            return;
        }

        try
        {
            var atProtocolBuilder = new ATWebSocketProtocolBuilder()
                .WithInstanceUrl(uri)
                .WithLogger(logger);
            protocol = atProtocolBuilder.Build();
            protocol.OnSubscribedRepoMessage += OnSubscribedRepoMessage;
            await protocol.StartSubscribeReposAsync();
            this.isSubscribed = true;
        }
        catch (Exception ex)
        {
            this.logger?.LogError(ex, ex.Message);
            await this.Disconnect();
        }
    }

    private async Task Disconnect()
    {
        if (protocol is not null)
        {
            protocol.OnSubscribedRepoMessage -= OnSubscribedRepoMessage;
            await protocol.StopSubscriptionAsync();
            // Dispose the existing protocol.
            protocol?.Dispose();
            protocol = null;
        }

        this.isSubscribed = false;
    }

    private void OnSubscribedRepoMessage(object? sender, SubscribedRepoEventArgs args)
    {
        Task.Run(() => HandleMessageAsync(args.Message)).FireAndForgetSafeAsync();
    }

    async Task HandleMessageAsync(SubscribeRepoMessage message)
    {
        FirehoseItem? item = null;
        if (message.Commit is null)
        {
            return;
        }

        var orgId = message.Commit.Repo;

        if (orgId is null)
        {
            return;
        }

        if (message.Record is not null)
        {
#if DEBUG
    Console.WriteLine($"Record: {message.Record.Type}");
#endif

            if (message.Record is Post post)
            {
                item = new FirehoseItem(post.Type, post.Text, post.CreatedAt);
            }
            else if (message.Record is Like like)
            {
                item = new FirehoseItem(like.Type, $"Uri: {like.Subject?.Uri} {Environment.NewLine} Cid: {like.Subject?.Cid}", like.CreatedAt);
            }
            else if (message.Record is Generator generator)
            {
                item = new FirehoseItem(generator.Type, $"{generator.DisplayName} {Environment.NewLine} {generator.Description}", generator.CreatedAt);
            }
            else if (message.Record is Repost repost)
            {
                item = new FirehoseItem(repost.Type, $"Uri: {repost.Subject?.Uri} {Environment.NewLine} Cid: {repost.Subject?.Cid}", repost.CreatedAt);
            }
            else if (message.Record is Follow follow)
            {
                item = new FirehoseItem(follow.Type, $"Did: {follow.Subject}", follow.CreatedAt);
            }
            else if (message.Record is List bslist)
            {
                item = new FirehoseItem(bslist.Type, $"{bslist.Name} {Environment.NewLine} {bslist.Description}", bslist.CreatedAt);
            }
            else if (message.Record is Listitem listItem)
            {
                item = new FirehoseItem(listItem.Type, $"{listItem.Subject} {Environment.NewLine} {listItem.Subject}", listItem.CreatedAt);
            }
            else if (message.Record is Block block)
            {
                item = new FirehoseItem(block.Type, $"{block.Subject}", block.CreatedAt);
            }
            else if (message.Record is ProfileViewBasic profile)
            {
                item = new FirehoseItem(profile.Type, $"{profile.DisplayName}", DateTime.UtcNow);
            }
        }

        if (item is not null)
        {
            if (this.Posts.Count > 100)
            {
                this.Posts.RemoveAt(this.Posts.Count - 1);
            }

            this.Posts.Insert(0, item);
        }
    }

    protected override void OnInitialized()
    {
        var debugLog = new DebugLoggerProvider();
        this.logger = debugLog.CreateLogger("FishyFlipDebugFirehose");
        this.Posts.CollectionChanged += (sender, args) =>
        {
            this.StateHasChanged();
        };
    }

    private class FirehoseItem
    {
        public FirehoseItem(string? type, string? detail, DateTime? createdAt)
        {
            this.Type = type;
            this.Detail = detail;
            this.CreatedAt = createdAt;
        }

        public string? Type { get; }

        public string? Detail { get; }

        public DateTime? CreatedAt { get; }
    }
}
