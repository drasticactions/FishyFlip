@page "/recordview"
@inject ILogger<UserProfile> logger;
@using Drastic.Tools;
@using FishyFlip;
@using FishyFlip.Events;
@using FishyFlip.Models;
@using FishyFlip.Tools;
@using Microsoft.Extensions.Logging.Debug;
@using System.Collections.ObjectModel;
@using FishyFlip.Lexicon.Com.Atproto.Repo

@* Error Block *@
@if (!string.IsNullOrEmpty(error))
{
    <div style="border-style: dotted; border-color: red; border-width: 10px;">
        <p style="color: red;">@error</p>
    </div>
}

<div>
    <label for="handleBox">ATUri:</label>
    <input type="text" @bind="atUriString" name="handleBox">
</div>

<div>
    <label for="inputBox">Instance:</label>
    <input type="text" @bind="instance" name="inputBox">
</div>

@if (record is not null)
{
    <div style="border-style: dotted; border-color: blue; border-width: 10px;">
        <p style="color: green;">Uri: @record.Uri</p>
        <p style="color: green;">Cid: @record.Cid</p>
        <p style="color: green;">Record Type: @record.Value?.Type</p>
    </div>
}

<div>
    <button disabled="@isLoading" @onclick="Load">Load</button>
</div>

@if (isLoading)
{
    <p>Loading...</p>
}

@code {
    private string? error;
    private string? atUriString = "at://did:plc:yhgc5rlqhoezrx6fbawajxlh/app.bsky.feed.post/3kvkp4ksdal2c";
    private string? instance = "bsky.social";
    private ATProtocol? protocol;
    private bool isLoading = false;
    private GetRecordOutput? record;
    private async Task Load()
    {
        this.Unload();

        try
        {
            var host = instance ?? "bsky.social";

            if (!Uri.TryCreate(host, UriKind.Absolute, out Uri? uri))
            {
                uri = new Uri($"https://{host}");
            }

            if (uri is null)
            {
                return;
            }

            var builder = new ATProtocolBuilder();
            protocol = builder.WithInstanceUrl(uri)
                .WithLogger(this.logger).Build();

            this.isLoading = true;

            if (ATUri.TryCreate(this.atUriString ?? string.Empty, out ATUri? atUri))
            {
                var collection = atUri!.Collection;
                (this.record, var error) = (await protocol.Repo.GetRecordAsync(ATIdentifier.Create(atUri.Identity!)!, collection, atUri.Rkey));
                this.error = null;
            }
            else
            {
                this.error = "Invalid ATUri";
            }
        }
        catch (Exception ex)
        {
            this.error = ex.Message;
            this.logger.LogError(ex, ex.Message);
        }
        finally
        {
            this.isLoading = false;
            this.StateHasChanged();
        }

    }

    private void Unload()
    {
        this.error = null;
        this.protocol?.Dispose();
        this.protocol = null;
    }
}