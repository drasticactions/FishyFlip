// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Chat.Bsky.Actor
{

    /// <summary>
    /// chat.bsky.actor Endpoint Group.
    /// </summary>
    public static class ActorEndpoints
    {

       public const string DeleteAccount = "/xrpc/chat.bsky.actor.deleteAccount";

       public const string ExportAccountData = "/xrpc/chat.bsky.actor.exportAccountData";


        /// <summary>
        /// Generated endpoint for chat.bsky.actor.deleteAccount
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Chat.Bsky.Actor.DeleteAccountOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Chat.Bsky.Actor.DeleteAccountOutput?>> DeleteAccountAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = DeleteAccount.ToString();
            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoProxy, Constants.BlueskyChatProxy);
            JsonTypeInfo<Chat.Bsky.Actor.DeleteAccountOutput> jsonTypeInfo = (JsonTypeInfo<Chat.Bsky.Actor.DeleteAccountOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Chat.Bsky.Actor.DeleteAccountOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Post<FishyFlip.Lexicon.Chat.Bsky.Actor.DeleteAccountOutput?>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Generated endpoint for chat.bsky.actor.exportAccountData
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> ExportAccountDataAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = ExportAccountData.ToString();
            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoProxy, Constants.BlueskyChatProxy);
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            JsonTypeInfo<Success> jsonTypeInfo = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Get<Success>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }

    }
}

