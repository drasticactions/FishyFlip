// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Chat.Bsky.Convo
{
    public partial class GetLogOutput : ATObject, ICBOREncodable<GetLogOutput>, IJsonEncodable<GetLogOutput>, IParsable<GetLogOutput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="GetLogOutput"/> class.
        /// </summary>
        /// <param name="cursor"></param>
        /// <param name="logs">
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogBeginConvo"/> (chat.bsky.convo.defs#logBeginConvo) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogAcceptConvo"/> (chat.bsky.convo.defs#logAcceptConvo) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogLeaveConvo"/> (chat.bsky.convo.defs#logLeaveConvo) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogMuteConvo"/> (chat.bsky.convo.defs#logMuteConvo) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogUnmuteConvo"/> (chat.bsky.convo.defs#logUnmuteConvo) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogCreateMessage"/> (chat.bsky.convo.defs#logCreateMessage) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogDeleteMessage"/> (chat.bsky.convo.defs#logDeleteMessage) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogReadMessage"/> (chat.bsky.convo.defs#logReadMessage) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogAddReaction"/> (chat.bsky.convo.defs#logAddReaction) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogRemoveReaction"/> (chat.bsky.convo.defs#logRemoveReaction) <br/>
        /// </param>
        public GetLogOutput(string? cursor = default, List<ATObject> logs = default)
        {
            this.Cursor = cursor;
            this.Logs = logs;
            this.Type = "chat.bsky.convo.getLog#GetLogOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetLogOutput"/> class.
        /// </summary>
        public GetLogOutput()
        {
            this.Type = "chat.bsky.convo.getLog#GetLogOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetLogOutput"/> class.
        /// </summary>
        public GetLogOutput(CBORObject obj)
        {
            if (obj["cursor"] is not null) this.Cursor = obj["cursor"].AsString();
            if (obj["logs"] is not null) this.Logs = obj["logs"].Values.Select(n =>n.ToATObject()).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the cursor.
        /// </summary>
        [JsonPropertyName("cursor")]
        public string? Cursor { get; set; }

        /// <summary>
        /// Gets or sets the logs.
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogBeginConvo"/> (chat.bsky.convo.defs#logBeginConvo) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogAcceptConvo"/> (chat.bsky.convo.defs#logAcceptConvo) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogLeaveConvo"/> (chat.bsky.convo.defs#logLeaveConvo) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogMuteConvo"/> (chat.bsky.convo.defs#logMuteConvo) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogUnmuteConvo"/> (chat.bsky.convo.defs#logUnmuteConvo) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogCreateMessage"/> (chat.bsky.convo.defs#logCreateMessage) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogDeleteMessage"/> (chat.bsky.convo.defs#logDeleteMessage) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogReadMessage"/> (chat.bsky.convo.defs#logReadMessage) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogAddReaction"/> (chat.bsky.convo.defs#logAddReaction) <br/>
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.LogRemoveReaction"/> (chat.bsky.convo.defs#logRemoveReaction) <br/>
        /// </summary>
        [JsonPropertyName("logs")]
        [JsonRequired]
        public List<ATObject> Logs { get; set; }

        public const string RecordType = "chat.bsky.convo.getLog#GetLogOutput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Chat.Bsky.Convo.GetLogOutput>)SourceGenerationContext.Default.ChatBskyConvoGetLogOutput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Chat.Bsky.Convo.GetLogOutput>)SourceGenerationContext.Default.ChatBskyConvoGetLogOutput);
        }

        public static new GetLogOutput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Chat.Bsky.Convo.GetLogOutput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Chat.Bsky.Convo.GetLogOutput>)SourceGenerationContext.Default.ChatBskyConvoGetLogOutput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new GetLogOutput FromCBORObject(CBORObject obj)
        {
            return new GetLogOutput(obj);
        }

        /// <inheritdoc/>
        public static GetLogOutput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<GetLogOutput>(s, (JsonTypeInfo<GetLogOutput>)SourceGenerationContext.Default.ChatBskyConvoGetLogOutput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out GetLogOutput result)
        {
            result = JsonSerializer.Deserialize<GetLogOutput>(s, (JsonTypeInfo<GetLogOutput>)SourceGenerationContext.Default.ChatBskyConvoGetLogOutput);
            return result != null;
        }
    }
}

