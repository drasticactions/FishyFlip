// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Chat.Bsky.Convo
{
    public partial class AddReactionOutput : ATObject, ICBOREncodable<AddReactionOutput>, IJsonEncodable<AddReactionOutput>, IParsable<AddReactionOutput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="AddReactionOutput"/> class.
        /// </summary>
        /// <param name="message">
        /// <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.MessageView"/> (chat.bsky.convo.defs#messageView)
        /// </param>
        public AddReactionOutput(FishyFlip.Lexicon.Chat.Bsky.Convo.MessageView message = default)
        {
            this.Message = message;
            this.Type = "chat.bsky.convo.addReaction#AddReactionOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AddReactionOutput"/> class.
        /// </summary>
        public AddReactionOutput()
        {
            this.Type = "chat.bsky.convo.addReaction#AddReactionOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AddReactionOutput"/> class.
        /// </summary>
        public AddReactionOutput(CBORObject obj)
        {
            if (obj["message"] is not null) this.Message = new FishyFlip.Lexicon.Chat.Bsky.Convo.MessageView(obj["message"]);
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the message.
        /// <br/> <see cref="FishyFlip.Lexicon.Chat.Bsky.Convo.MessageView"/> (chat.bsky.convo.defs#messageView)
        /// </summary>
        [JsonPropertyName("message")]
        [JsonRequired]
        public FishyFlip.Lexicon.Chat.Bsky.Convo.MessageView Message { get; set; }

        public const string RecordType = "chat.bsky.convo.addReaction#AddReactionOutput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Chat.Bsky.Convo.AddReactionOutput>)SourceGenerationContext.Default.ChatBskyConvoAddReactionOutput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Chat.Bsky.Convo.AddReactionOutput>)SourceGenerationContext.Default.ChatBskyConvoAddReactionOutput);
        }

        public static new AddReactionOutput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Chat.Bsky.Convo.AddReactionOutput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Chat.Bsky.Convo.AddReactionOutput>)SourceGenerationContext.Default.ChatBskyConvoAddReactionOutput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new AddReactionOutput FromCBORObject(CBORObject obj)
        {
            return new AddReactionOutput(obj);
        }

        /// <inheritdoc/>
        public static AddReactionOutput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<AddReactionOutput>(s, (JsonTypeInfo<AddReactionOutput>)SourceGenerationContext.Default.ChatBskyConvoAddReactionOutput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out AddReactionOutput result)
        {
            result = JsonSerializer.Deserialize<AddReactionOutput>(s, (JsonTypeInfo<AddReactionOutput>)SourceGenerationContext.Default.ChatBskyConvoAddReactionOutput);
            return result != null;
        }
    }
}

