// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Blue.Moji.Packs
{
    public partial class PackViewerState : ATObject, ICBOREncodable<PackViewerState>, IJsonEncodable<PackViewerState>, IParsable<PackViewerState>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="PackViewerState"/> class.
        /// </summary>
        /// <param name="savedToCollection"></param>
        public PackViewerState(bool? savedToCollection = default)
        {
            this.SavedToCollection = savedToCollection;
            this.Type = "blue.moji.packs.defs#packViewerState";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="PackViewerState"/> class.
        /// </summary>
        public PackViewerState()
        {
            this.Type = "blue.moji.packs.defs#packViewerState";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="PackViewerState"/> class.
        /// </summary>
        public PackViewerState(CBORObject obj)
        {
            if (obj["savedToCollection"] is not null) this.SavedToCollection = obj["savedToCollection"].AsBoolean();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the savedToCollection.
        /// </summary>
        [JsonPropertyName("savedToCollection")]
        public bool? SavedToCollection { get; set; }

        public const string RecordType = "blue.moji.packs.defs#packViewerState";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Blue.Moji.Packs.PackViewerState>)SourceGenerationContext.Default.BlueMojiPacksPackViewerState);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Blue.Moji.Packs.PackViewerState>)SourceGenerationContext.Default.BlueMojiPacksPackViewerState);
        }

        public static new PackViewerState FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Blue.Moji.Packs.PackViewerState>(json, (JsonTypeInfo<FishyFlip.Lexicon.Blue.Moji.Packs.PackViewerState>)SourceGenerationContext.Default.BlueMojiPacksPackViewerState)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new PackViewerState FromCBORObject(CBORObject obj)
        {
            return new PackViewerState(obj);
        }

        /// <inheritdoc/>
        public static PackViewerState Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<PackViewerState>(s, (JsonTypeInfo<PackViewerState>)SourceGenerationContext.Default.BlueMojiPacksPackViewerState)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out PackViewerState result)
        {
            result = JsonSerializer.Deserialize<PackViewerState>(s, (JsonTypeInfo<PackViewerState>)SourceGenerationContext.Default.BlueMojiPacksPackViewerState);
            return result != null;
        }
    }
}

