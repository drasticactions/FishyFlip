// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Blue.Moji.Collection
{
    public partial class SaveToCollectionInput : ATObject, ICBOREncodable<SaveToCollectionInput>, IJsonEncodable<SaveToCollectionInput>, IParsable<SaveToCollectionInput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="SaveToCollectionInput"/> class.
        /// </summary>
        /// <param name="source">The handle or DID of the repo to copy from.</param>
        /// <param name="name">The source Bluemoji name/rkey.</param>
        /// <param name="renameTo">The alias to save the Bluemoji to in the current logged-in user's repo.</param>
        public SaveToCollectionInput(FishyFlip.Models.ATIdentifier source = default, string name = default, string? renameTo = default)
        {
            this.Source = source;
            this.Name = name;
            this.RenameTo = renameTo;
            this.Type = "blue.moji.collection.saveToCollection#SaveToCollectionInput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="SaveToCollectionInput"/> class.
        /// </summary>
        public SaveToCollectionInput()
        {
            this.Type = "blue.moji.collection.saveToCollection#SaveToCollectionInput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="SaveToCollectionInput"/> class.
        /// </summary>
        public SaveToCollectionInput(CBORObject obj)
        {
            if (obj["source"] is not null) this.Source = obj["source"].ToATIdentifier();
            if (obj["name"] is not null) this.Name = obj["name"].AsString();
            if (obj["renameTo"] is not null) this.RenameTo = obj["renameTo"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the source.
        /// <br/> The handle or DID of the repo to copy from.
        /// </summary>
        [JsonPropertyName("source")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATIdentifierJsonConverter))]
        public FishyFlip.Models.ATIdentifier Source { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// <br/> The source Bluemoji name/rkey.
        /// </summary>
        [JsonPropertyName("name")]
        [JsonRequired]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the renameTo.
        /// <br/> The alias to save the Bluemoji to in the current logged-in user's repo.
        /// </summary>
        [JsonPropertyName("renameTo")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? RenameTo { get; set; }

        public const string RecordType = "blue.moji.collection.saveToCollection#SaveToCollectionInput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Blue.Moji.Collection.SaveToCollectionInput>)SourceGenerationContext.Default.BlueMojiCollectionSaveToCollectionInput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Blue.Moji.Collection.SaveToCollectionInput>)SourceGenerationContext.Default.BlueMojiCollectionSaveToCollectionInput);
        }

        public static new SaveToCollectionInput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Blue.Moji.Collection.SaveToCollectionInput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Blue.Moji.Collection.SaveToCollectionInput>)SourceGenerationContext.Default.BlueMojiCollectionSaveToCollectionInput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new SaveToCollectionInput FromCBORObject(CBORObject obj)
        {
            return new SaveToCollectionInput(obj);
        }

        /// <inheritdoc/>
        public static SaveToCollectionInput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<SaveToCollectionInput>(s, (JsonTypeInfo<SaveToCollectionInput>)SourceGenerationContext.Default.BlueMojiCollectionSaveToCollectionInput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out SaveToCollectionInput result)
        {
            result = JsonSerializer.Deserialize<SaveToCollectionInput>(s, (JsonTypeInfo<SaveToCollectionInput>)SourceGenerationContext.Default.BlueMojiCollectionSaveToCollectionInput);
            return result != null;
        }
    }
}

