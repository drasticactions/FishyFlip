// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Blue.Moji.Collection
{
    public partial class PutItemInput : ATObject, ICBOREncodable<PutItemInput>, IJsonEncodable<PutItemInput>, IParsable<PutItemInput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="PutItemInput"/> class.
        /// </summary>
        /// <param name="repo">The handle or DID of the repo (aka, current account).</param>
        /// <param name="validate">Can be set to 'false' to skip Lexicon schema validation of record data.</param>
        /// <param name="item">
        /// <see cref="FishyFlip.Lexicon.Blue.Moji.Collection.ItemView"/> (blue.moji.collection.item#itemView)
        /// </param>
        public PutItemInput(FishyFlip.Models.ATIdentifier repo = default, bool? validate = default, FishyFlip.Lexicon.Blue.Moji.Collection.ItemView item = default)
        {
            this.Repo = repo;
            this.Validate = validate;
            this.Item = item;
            this.Type = "blue.moji.collection.putItem#PutItemInput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="PutItemInput"/> class.
        /// </summary>
        public PutItemInput()
        {
            this.Type = "blue.moji.collection.putItem#PutItemInput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="PutItemInput"/> class.
        /// </summary>
        public PutItemInput(CBORObject obj)
        {
            if (obj["repo"] is not null) this.Repo = obj["repo"].ToATIdentifier();
            if (obj["validate"] is not null) this.Validate = obj["validate"].AsBoolean();
            if (obj["item"] is not null) this.Item = new FishyFlip.Lexicon.Blue.Moji.Collection.ItemView(obj["item"]);
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the repo.
        /// <br/> The handle or DID of the repo (aka, current account).
        /// </summary>
        [JsonPropertyName("repo")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATIdentifierJsonConverter))]
        public FishyFlip.Models.ATIdentifier Repo { get; set; }

        /// <summary>
        /// Gets or sets the validate.
        /// <br/> Can be set to 'false' to skip Lexicon schema validation of record data.
        /// </summary>
        [JsonPropertyName("validate")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? Validate { get; set; } = true;

        /// <summary>
        /// Gets or sets the item.
        /// <br/> <see cref="FishyFlip.Lexicon.Blue.Moji.Collection.ItemView"/> (blue.moji.collection.item#itemView)
        /// </summary>
        [JsonPropertyName("item")]
        [JsonRequired]
        public FishyFlip.Lexicon.Blue.Moji.Collection.ItemView Item { get; set; }

        public const string RecordType = "blue.moji.collection.putItem#PutItemInput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Blue.Moji.Collection.PutItemInput>)SourceGenerationContext.Default.BlueMojiCollectionPutItemInput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Blue.Moji.Collection.PutItemInput>)SourceGenerationContext.Default.BlueMojiCollectionPutItemInput);
        }

        public static new PutItemInput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Blue.Moji.Collection.PutItemInput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Blue.Moji.Collection.PutItemInput>)SourceGenerationContext.Default.BlueMojiCollectionPutItemInput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new PutItemInput FromCBORObject(CBORObject obj)
        {
            return new PutItemInput(obj);
        }

        /// <inheritdoc/>
        public static PutItemInput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<PutItemInput>(s, (JsonTypeInfo<PutItemInput>)SourceGenerationContext.Default.BlueMojiCollectionPutItemInput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out PutItemInput result)
        {
            result = JsonSerializer.Deserialize<PutItemInput>(s, (JsonTypeInfo<PutItemInput>)SourceGenerationContext.Default.BlueMojiCollectionPutItemInput);
            return result != null;
        }
    }
}

