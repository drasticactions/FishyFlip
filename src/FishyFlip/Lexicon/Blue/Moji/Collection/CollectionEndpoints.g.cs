// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Blue.Moji.Collection
{

    /// <summary>
    /// blue.moji.collection Endpoint Group.
    /// </summary>
    public static class CollectionEndpoints
    {

       public const string GetItem = "/xrpc/blue.moji.collection.getItem";

       public const string ListCollection = "/xrpc/blue.moji.collection.listCollection";

       public const string PutItem = "/xrpc/blue.moji.collection.putItem";

       public const string SaveToCollection = "/xrpc/blue.moji.collection.saveToCollection";


        /// <summary>
        /// Get a single emoji from a repository. Requires auth.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="name">The Bluemoji alias/rkey.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Blue.Moji.Collection.GetItemOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Blue.Moji.Collection.GetItemOutput?>> GetItemAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, string name, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetItem.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("repo=" + repo);

            queryStrings.Add("name=" + name);

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Blue.Moji.Collection.GetItemOutput>(endpointUrl, atp.Options.SourceGenerationContext.BlueMojiCollectionGetItemOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// List a range of Bluemoji in a repository, matching a specific collection. Requires auth.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="limit">The number of records to return.</param>
        /// <param name="cursor"></param>
        /// <param name="reverse">Flag to reverse the order of the returned records.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Blue.Moji.Collection.ListCollectionOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Blue.Moji.Collection.ListCollectionOutput?>> ListCollectionAsync (this FishyFlip.ATProtocol atp, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = ListCollection.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            if (cursor != null)
            {
                queryStrings.Add("cursor=" + cursor);
            }

            if (reverse != null)
            {
                queryStrings.Add("reverse=" + (reverse.Value ? "true" : "false"));
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Blue.Moji.Collection.ListCollectionOutput>(endpointUrl, atp.Options.SourceGenerationContext.BlueMojiCollectionListCollectionOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Write a Bluemoji record, creating or updating it as needed. Requires auth, implemented by AppView.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="repo">The handle or DID of the repo (aka, current account).</param>
        /// <param name="item"></param>
        /// <param name="validate">Can be set to 'false' to skip Lexicon schema validation of record data.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Blue.Moji.Collection.PutItemOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Blue.Moji.Collection.PutItemOutput?>> PutItemAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier repo, FishyFlip.Lexicon.Blue.Moji.Collection.ItemView item, bool? validate = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = PutItem.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new PutItemInput();
            inputItem.Repo = repo;
            inputItem.Item = item;
            inputItem.Validate = validate;
            return atp.Post<PutItemInput, FishyFlip.Lexicon.Blue.Moji.Collection.PutItemOutput?>(endpointUrl, atp.Options.SourceGenerationContext.BlueMojiCollectionPutItemInput!, atp.Options.SourceGenerationContext.BlueMojiCollectionPutItemOutput!, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Copy a single emoji from another repo. Requires auth.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.EmojiNotFoundError"/> Indicates the named Bluemoji was not found in the source repo. <br/>
        /// <see cref="FishyFlip.Lexicon.DestinationExistsError"/> Indicates another Bluemoji with the same name already exists in the source repo. Set renameTo to rename. <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="source">The handle or DID of the repo to copy from.</param>
        /// <param name="name">The source Bluemoji name/rkey.</param>
        /// <param name="renameTo">The alias to save the Bluemoji to in the current logged-in user's repo.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Blue.Moji.Collection.SaveToCollectionOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Blue.Moji.Collection.SaveToCollectionOutput?>> SaveToCollectionAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier source, string name, string? renameTo = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = SaveToCollection.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new SaveToCollectionInput();
            inputItem.Source = source;
            inputItem.Name = name;
            inputItem.RenameTo = renameTo;
            return atp.Post<SaveToCollectionInput, FishyFlip.Lexicon.Blue.Moji.Collection.SaveToCollectionOutput?>(endpointUrl, atp.Options.SourceGenerationContext.BlueMojiCollectionSaveToCollectionInput!, atp.Options.SourceGenerationContext.BlueMojiCollectionSaveToCollectionOutput!, inputItem, cancellationToken, headers);
        }

    }
}

