// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Blue.Maril.Stellar
{

    /// <summary>
    /// blue.maril.stellar Endpoint Group.
    /// </summary>
    public static class StellarEndpoints
    {

       public const string GetActorReactions = "/xrpc/blue.maril.stellar.getActorReactions";

       public const string GetReactions = "/xrpc/blue.maril.stellar.getReactions";


        /// <summary>
        /// Get a list of posts reaction by an actor. Requires auth, actor must be the requesting account.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="actor"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Blue.Maril.Stellar.GetActorReactionsOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Blue.Maril.Stellar.GetActorReactionsOutput?>> GetActorReactionsAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier actor, int? limit = 50, string? cursor = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetActorReactions.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("actor=" + actor);

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            if (cursor != null)
            {
                queryStrings.Add("cursor=" + cursor);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Blue.Maril.Stellar.GetActorReactionsOutput>(endpointUrl, atp.Options.SourceGenerationContext.BlueMarilStellarGetActorReactionsOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Get reaction records which reference a subject (by AT-URI and CID).
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="uri">AT-URI of the subject (eg, a post record).</param>
        /// <param name="cid">CID of the subject record (aka, specific version of record), to filter reactions.</param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Blue.Maril.Stellar.GetReactionsOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Blue.Maril.Stellar.GetReactionsOutput?>> GetReactionsAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATUri uri, string? cid = default, int? limit = 50, string? cursor = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetReactions.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("uri=" + uri);

            if (cid != null)
            {
                queryStrings.Add("cid=" + cid);
            }

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            if (cursor != null)
            {
                queryStrings.Add("cursor=" + cursor);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Blue.Maril.Stellar.GetReactionsOutput>(endpointUrl, atp.Options.SourceGenerationContext.BlueMarilStellarGetReactionsOutput!, cancellationToken, headers);
        }

    }
}

