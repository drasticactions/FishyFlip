// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Blue.Zio.Atfile
{
    /// <summary>
    /// Unknown metadata for an uploaded file.
    /// </summary>
    public partial class Unknown : ATObject, ICBOREncodable<Unknown>, IJsonEncodable<Unknown>, IParsable<Unknown>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Unknown"/> class.
        /// </summary>
        /// <param name="reason"></param>
        public Unknown(string? reason = default)
        {
            this.Reason = reason;
            this.Type = "blue.zio.atfile.meta#unknown";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Unknown"/> class.
        /// </summary>
        public Unknown()
        {
            this.Type = "blue.zio.atfile.meta#unknown";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Unknown"/> class.
        /// </summary>
        public Unknown(CBORObject obj)
        {
            if (obj["reason"] is not null) this.Reason = obj["reason"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the reason.
        /// </summary>
        [JsonPropertyName("reason")]
        public string? Reason { get; set; }

        public const string RecordType = "blue.zio.atfile.meta#unknown";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Blue.Zio.Atfile.Unknown>)SourceGenerationContext.Default.BlueZioAtfileUnknown);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Blue.Zio.Atfile.Unknown>)SourceGenerationContext.Default.BlueZioAtfileUnknown);
        }

        public static new Unknown FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Blue.Zio.Atfile.Unknown>(json, (JsonTypeInfo<FishyFlip.Lexicon.Blue.Zio.Atfile.Unknown>)SourceGenerationContext.Default.BlueZioAtfileUnknown)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Unknown FromCBORObject(CBORObject obj)
        {
            return new Unknown(obj);
        }

        /// <inheritdoc/>
        public static Unknown Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Unknown>(s, (JsonTypeInfo<Unknown>)SourceGenerationContext.Default.BlueZioAtfileUnknown)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Unknown result)
        {
            result = JsonSerializer.Deserialize<Unknown>(s, (JsonTypeInfo<Unknown>)SourceGenerationContext.Default.BlueZioAtfileUnknown);
            return result != null;
        }
    }
}

