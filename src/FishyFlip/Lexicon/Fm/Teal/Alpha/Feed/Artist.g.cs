// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Fm.Teal.Alpha.Feed
{
    public partial class Artist : ATObject, ICBOREncodable<Artist>, IJsonEncodable<Artist>, IParsable<Artist>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Artist"/> class.
        /// </summary>
        /// <param name="artistName">The name of the artist</param>
        /// <param name="artistMbId">The Musicbrainz ID of the artist</param>
        public Artist(string artistName = default, string? artistMbId = default)
        {
            this.ArtistName = artistName;
            this.ArtistMbId = artistMbId;
            this.Type = "fm.teal.alpha.feed.defs#artist";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Artist"/> class.
        /// </summary>
        public Artist()
        {
            this.Type = "fm.teal.alpha.feed.defs#artist";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Artist"/> class.
        /// </summary>
        public Artist(CBORObject obj)
        {
            if (obj["artistName"] is not null) this.ArtistName = obj["artistName"].AsString();
            if (obj["artistMbId"] is not null) this.ArtistMbId = obj["artistMbId"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the artistName.
        /// <br/> The name of the artist
        /// </summary>
        [JsonPropertyName("artistName")]
        [JsonRequired]
        public string ArtistName { get; set; }

        /// <summary>
        /// Gets or sets the artistMbId.
        /// <br/> The Musicbrainz ID of the artist
        /// </summary>
        [JsonPropertyName("artistMbId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ArtistMbId { get; set; }

        public const string RecordType = "fm.teal.alpha.feed.defs#artist";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.Artist>)SourceGenerationContext.Default.FmTealAlphaFeedArtist);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.Artist>)SourceGenerationContext.Default.FmTealAlphaFeedArtist);
        }

        public static new Artist FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.Artist>(json, (JsonTypeInfo<FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.Artist>)SourceGenerationContext.Default.FmTealAlphaFeedArtist)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Artist FromCBORObject(CBORObject obj)
        {
            return new Artist(obj);
        }

        /// <inheritdoc/>
        public static Artist Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Artist>(s, (JsonTypeInfo<Artist>)SourceGenerationContext.Default.FmTealAlphaFeedArtist)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Artist result)
        {
            result = JsonSerializer.Deserialize<Artist>(s, (JsonTypeInfo<Artist>)SourceGenerationContext.Default.FmTealAlphaFeedArtist);
            return result != null;
        }
    }
}

