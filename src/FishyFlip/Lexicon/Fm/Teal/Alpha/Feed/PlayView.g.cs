// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable

namespace FishyFlip.Lexicon.Fm.Teal.Alpha.Feed
{
    public partial class PlayView : ATObject
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayView"/> class.
        /// </summary>
        /// <param name="trackName">The name of the track</param>
        /// <param name="trackMbId">The Musicbrainz ID of the track</param>
        /// <param name="recordingMbId">The Musicbrainz recording ID of the track</param>
        /// <param name="duration">The length of the track in seconds</param>
        /// <param name="artistNames">Array of artist names in order of original appearance.</param>
        /// <param name="artistMbIds">Array of Musicbrainz artist IDs</param>
        /// <param name="releaseName">The name of the release/album</param>
        /// <param name="releaseMbId">The Musicbrainz release ID</param>
        /// <param name="isrc">The ISRC code associated with the recording</param>
        /// <param name="originUrl">The URL associated with this track</param>
        /// <param name="musicServiceBaseDomain">The base domain of the music service. e.g. music.apple.com, tidal.com, spotify.com. Defaults to 'local' if not provided.</param>
        /// <param name="submissionClientAgent">A user-agent style string specifying the user agent. e.g. tealtracker/0.0.1b (Linux; Android 13; SM-A715F). Defaults to 'manual/unknown' if not provided.</param>
        /// <param name="playedTime">The unix timestamp of when the track was played</param>
        public PlayView(string? trackName = default, string? trackMbId = default, string? recordingMbId = default, long? duration = default, List<string>? artistNames = default, List<string>? artistMbIds = default, string? releaseName = default, string? releaseMbId = default, string? isrc = default, string? originUrl = default, string? musicServiceBaseDomain = default, string? submissionClientAgent = default, DateTime? playedTime = default)
        {
            this.TrackName = trackName;
            this.TrackMbId = trackMbId;
            this.RecordingMbId = recordingMbId;
            this.Duration = duration;
            this.ArtistNames = artistNames;
            this.ArtistMbIds = artistMbIds;
            this.ReleaseName = releaseName;
            this.ReleaseMbId = releaseMbId;
            this.Isrc = isrc;
            this.OriginUrl = originUrl;
            this.MusicServiceBaseDomain = musicServiceBaseDomain;
            this.SubmissionClientAgent = submissionClientAgent;
            this.PlayedTime = playedTime;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="PlayView"/> class.
        /// </summary>
        public PlayView()
        {
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="PlayView"/> class.
        /// </summary>
        public PlayView(CBORObject obj)
        {
            if (obj["trackName"] is not null) this.TrackName = obj["trackName"].AsString();
            if (obj["trackMbId"] is not null) this.TrackMbId = obj["trackMbId"].AsString();
            if (obj["recordingMbId"] is not null) this.RecordingMbId = obj["recordingMbId"].AsString();
            if (obj["duration"] is not null) this.Duration = obj["duration"].AsInt64Value();
            if (obj["artistNames"] is not null) this.ArtistNames = obj["artistNames"].Values.Select(n =>n.AsString()).ToList();
            if (obj["artistMbIds"] is not null) this.ArtistMbIds = obj["artistMbIds"].Values.Select(n =>n.AsString()).ToList();
            if (obj["releaseName"] is not null) this.ReleaseName = obj["releaseName"].AsString();
            if (obj["releaseMbId"] is not null) this.ReleaseMbId = obj["releaseMbId"].AsString();
            if (obj["isrc"] is not null) this.Isrc = obj["isrc"].AsString();
            if (obj["originUrl"] is not null) this.OriginUrl = obj["originUrl"].AsString();
            if (obj["musicServiceBaseDomain"] is not null) this.MusicServiceBaseDomain = obj["musicServiceBaseDomain"].AsString();
            if (obj["submissionClientAgent"] is not null) this.SubmissionClientAgent = obj["submissionClientAgent"].AsString();
            if (obj["playedTime"] is not null) this.PlayedTime = obj["playedTime"].ToDateTime();
        }

        /// <summary>
        /// Gets or sets the trackName.
        /// <br/> The name of the track
        /// </summary>
        [JsonPropertyName("trackName")]
        [JsonRequired]
        public string? TrackName { get; set; }

        /// <summary>
        /// Gets or sets the trackMbId.
        /// <br/> The Musicbrainz ID of the track
        /// </summary>
        [JsonPropertyName("trackMbId")]
        public string? TrackMbId { get; set; }

        /// <summary>
        /// Gets or sets the recordingMbId.
        /// <br/> The Musicbrainz recording ID of the track
        /// </summary>
        [JsonPropertyName("recordingMbId")]
        public string? RecordingMbId { get; set; }

        /// <summary>
        /// Gets or sets the duration.
        /// <br/> The length of the track in seconds
        /// </summary>
        [JsonPropertyName("duration")]
        public long? Duration { get; set; }

        /// <summary>
        /// Gets or sets the artistNames.
        /// <br/> Array of artist names in order of original appearance.
        /// </summary>
        [JsonPropertyName("artistNames")]
        [JsonRequired]
        public List<string>? ArtistNames { get; set; }

        /// <summary>
        /// Gets or sets the artistMbIds.
        /// <br/> Array of Musicbrainz artist IDs
        /// </summary>
        [JsonPropertyName("artistMbIds")]
        public List<string>? ArtistMbIds { get; set; }

        /// <summary>
        /// Gets or sets the releaseName.
        /// <br/> The name of the release/album
        /// </summary>
        [JsonPropertyName("releaseName")]
        public string? ReleaseName { get; set; }

        /// <summary>
        /// Gets or sets the releaseMbId.
        /// <br/> The Musicbrainz release ID
        /// </summary>
        [JsonPropertyName("releaseMbId")]
        public string? ReleaseMbId { get; set; }

        /// <summary>
        /// Gets or sets the isrc.
        /// <br/> The ISRC code associated with the recording
        /// </summary>
        [JsonPropertyName("isrc")]
        public string? Isrc { get; set; }

        /// <summary>
        /// Gets or sets the originUrl.
        /// <br/> The URL associated with this track
        /// </summary>
        [JsonPropertyName("originUrl")]
        public string? OriginUrl { get; set; }

        /// <summary>
        /// Gets or sets the musicServiceBaseDomain.
        /// <br/> The base domain of the music service. e.g. music.apple.com, tidal.com, spotify.com. Defaults to 'local' if not provided.
        /// </summary>
        [JsonPropertyName("musicServiceBaseDomain")]
        public string? MusicServiceBaseDomain { get; set; }

        /// <summary>
        /// Gets or sets the submissionClientAgent.
        /// <br/> A user-agent style string specifying the user agent. e.g. tealtracker/0.0.1b (Linux; Android 13; SM-A715F). Defaults to 'manual/unknown' if not provided.
        /// </summary>
        [JsonPropertyName("submissionClientAgent")]
        public string? SubmissionClientAgent { get; set; }

        /// <summary>
        /// Gets or sets the playedTime.
        /// <br/> The unix timestamp of when the track was played
        /// </summary>
        [JsonPropertyName("playedTime")]
        public DateTime? PlayedTime { get; set; }

        /// <summary>
        /// Gets the ATRecord Type.
        /// </summary>
        [JsonPropertyName("$type")]
        public override string Type => "fm.teal.alpha.feed.defs#playView";

        public const string RecordType = "fm.teal.alpha.feed.defs#playView";

        public override string ToJson()
        {
            return JsonSerializer.Serialize<FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.PlayView>(this, (JsonTypeInfo<FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.PlayView>)SourceGenerationContext.Default.FmTealAlphaFeedPlayView)!;
        }

        public static PlayView FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.PlayView>(json, (JsonTypeInfo<FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.PlayView>)SourceGenerationContext.Default.FmTealAlphaFeedPlayView)!;
        }
    }
}

