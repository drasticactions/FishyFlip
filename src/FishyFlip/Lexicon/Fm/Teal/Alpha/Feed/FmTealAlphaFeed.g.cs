// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Fm.Teal.Alpha.Feed
{

    /// <summary>
    /// fm.teal.alpha.feed Endpoint Class.
    /// </summary>
    public sealed class FmTealAlphaFeed
    {

        private ATProtocol atp;

        /// <summary>
        /// Initializes a new instance of the <see cref="FmTealAlphaFeed"/> class.
        /// </summary>
        /// <param name="atp"><see cref="ATProtocol"/>.</param>
        internal FmTealAlphaFeed(ATProtocol atp)
        {
            this.atp = atp;
        }

        /// <summary>
        /// Gets the ATProtocol.
        /// </summary>
        internal ATProtocol ATProtocol => this.atp;


        /// <summary>
        /// Generated endpoint for fm.teal.alpha.feed.getActorFeed
        /// </summary>
        /// <param name="authorDID">The author's DID for the play</param>
        /// <param name="cursor">The cursor to start the query from</param>
        /// <param name="limit">The upper limit of tracks to get per request. Default is 20, max is 50.</param>
        /// <param name="cancellationToken"></param>
        public Task<Result<FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.GetActorFeedOutput?>> GetActorFeedAsync (FishyFlip.Models.ATIdentifier authorDID, string? cursor = default, int? limit = 0, CancellationToken cancellationToken = default)
        {
            return atp.GetActorFeedAsync(authorDID, cursor, limit, cancellationToken);
        }


        /// <summary>
        /// Generated endpoint for fm.teal.alpha.feed.getPlay
        /// </summary>
        /// <param name="authorDID">The author's DID for the play</param>
        /// <param name="rkey">The record key of the play</param>
        /// <param name="cancellationToken"></param>
        public Task<Result<FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.GetPlayOutput?>> GetPlayAsync (FishyFlip.Models.ATIdentifier authorDID, string rkey, CancellationToken cancellationToken = default)
        {
            return atp.GetPlayAsync(authorDID, rkey, cancellationToken);
        }

    }
}

