// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

using FishyFlip.Lexicon.Com.Atproto.Repo;

namespace FishyFlip.Lexicon
{

    /// <summary>
    /// Extension methods for fm.teal.alpha.feed.
    /// </summary>
    public static class FmTealAlphaFeedExtensions
    {

        /// <summary>
        /// Create a Play record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="record"></param>
        /// <param name="rkey"></param>
        /// <param name="validate"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<CreateRecordOutput?>> CreatePlayAsync(this FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.FmTealAlphaFeed atp, FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.Play record, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.CreateRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "fm.teal.alpha.feed.play", record, rkey, validate, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Create a Play record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="trackName">The name of the track</param>
        /// <param name="artistNames">Array of artist names in order of original appearance.</param>
        /// <param name="trackMbId">The Musicbrainz ID of the track</param>
        /// <param name="recordingMbId">The Musicbrainz recording ID of the track</param>
        /// <param name="duration">The length of the track in seconds</param>
        /// <param name="artistMbIds">Array of Musicbrainz artist IDs</param>
        /// <param name="releaseName">The name of the release/album</param>
        /// <param name="releaseMbId">The Musicbrainz release ID</param>
        /// <param name="isrc">The ISRC code associated with the recording</param>
        /// <param name="originUrl">The URL associated with this track</param>
        /// <param name="musicServiceBaseDomain">The base domain of the music service. e.g. music.apple.com, tidal.com, spotify.com. Defaults to 'local' if not provided.</param>
        /// <param name="submissionClientAgent">A user-agent style string specifying the user agent. e.g. tealtracker/0.0.1b (Linux; Android 13; SM-A715F). Defaults to 'manual/unknown' if not provided.</param>
        /// <param name="playedTime">The unix timestamp of when the track was played</param>
        /// <param name="rkey"></param>
        /// <param name="validate"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<CreateRecordOutput?>> CreatePlayAsync(this FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.FmTealAlphaFeed atp, string? trackName, List<string>? artistNames, string? trackMbId = default, string? recordingMbId = default, long? duration = default, List<string>? artistMbIds = default, string? releaseName = default, string? releaseMbId = default, string? isrc = default, string? originUrl = default, string? musicServiceBaseDomain = default, string? submissionClientAgent = default, DateTime? playedTime = default, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            var record = new FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.Play();
            record.TrackName = trackName;
            record.TrackMbId = trackMbId;
            record.RecordingMbId = recordingMbId;
            record.Duration = duration;
            record.ArtistNames = artistNames;
            record.ArtistMbIds = artistMbIds;
            record.ReleaseName = releaseName;
            record.ReleaseMbId = releaseMbId;
            record.Isrc = isrc;
            record.OriginUrl = originUrl;
            record.MusicServiceBaseDomain = musicServiceBaseDomain;
            record.SubmissionClientAgent = submissionClientAgent;
            record.PlayedTime = playedTime;
            return atp.ATProtocol.CreateRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "fm.teal.alpha.feed.play", record, rkey, validate, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Delete a Play record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="rkey"></param>
        /// <param name="swapRecord"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<DeleteRecordOutput?>> DeletePlayAsync(this FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.FmTealAlphaFeed atp, string rkey, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.DeleteRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "fm.teal.alpha.feed.play", rkey, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Put a Play record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="rkey"></param>
        /// <param name="record"></param>
        /// <param name="validate"></param>
        /// <param name="swapRecord"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<PutRecordOutput?>> PutPlayAsync(this FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.FmTealAlphaFeed atp, string rkey, FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.Play record, bool? validate = default, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.PutRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "fm.teal.alpha.feed.play", rkey, record, validate, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// List Play records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="reverse"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<ListRecordsOutput?>> ListPlayAsync(this FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.FmTealAlphaFeed atp, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.ListRecordsAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "fm.teal.alpha.feed.play", limit, cursor, reverse, cancellationToken);
        }

        /// <summary>
        /// List Play records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="repo"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="reverse"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<ListRecordsOutput?>> ListPlayAsync(this FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.FmTealAlphaFeed atp, FishyFlip.Models.ATIdentifier repo, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.ListRecordsAsync(repo, "fm.teal.alpha.feed.play", limit, cursor, reverse, cancellationToken);
        }

        /// <summary>
        /// Get Play records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="rkey"></param>
        /// <param name="cid"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<GetRecordOutput?>> GetPlayAsync(this FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.FmTealAlphaFeed atp, string rkey, string? cid = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.GetRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "fm.teal.alpha.feed.play", rkey, cid, cancellationToken);
        }

        /// <summary>
        /// Get Play records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="repo"></param>
        /// <param name="rkey"></param>
        /// <param name="cid"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<GetRecordOutput?>> GetPlayAsync(this FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.FmTealAlphaFeed atp, FishyFlip.Models.ATIdentifier repo, string rkey, string? cid = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.GetRecordAsync(repo, "fm.teal.alpha.feed.play", rkey, cid, cancellationToken);
        }
    }
}

