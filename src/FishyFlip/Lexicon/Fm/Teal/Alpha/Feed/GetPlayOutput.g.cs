// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Fm.Teal.Alpha.Feed
{
    public partial class GetPlayOutput : ATObject, ICBOREncodable<GetPlayOutput>, IJsonEncodable<GetPlayOutput>, IParsable<GetPlayOutput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="GetPlayOutput"/> class.
        /// </summary>
        /// <param name="play">
        /// <see cref="FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.PlayView"/> (fm.teal.alpha.feed.defs#playView)
        /// </param>
        public GetPlayOutput(FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.PlayView play = default)
        {
            this.Play = play;
            this.Type = "fm.teal.alpha.feed.getPlay#GetPlayOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetPlayOutput"/> class.
        /// </summary>
        public GetPlayOutput()
        {
            this.Type = "fm.teal.alpha.feed.getPlay#GetPlayOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetPlayOutput"/> class.
        /// </summary>
        public GetPlayOutput(CBORObject obj)
        {
            if (obj["play"] is not null) this.Play = new FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.PlayView(obj["play"]);
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the play.
        /// <br/> <see cref="FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.PlayView"/> (fm.teal.alpha.feed.defs#playView)
        /// </summary>
        [JsonPropertyName("play")]
        [JsonRequired]
        public FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.PlayView Play { get; set; }

        public const string RecordType = "fm.teal.alpha.feed.getPlay#GetPlayOutput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.GetPlayOutput>)SourceGenerationContext.Default.FmTealAlphaFeedGetPlayOutput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.GetPlayOutput>)SourceGenerationContext.Default.FmTealAlphaFeedGetPlayOutput);
        }

        public static new GetPlayOutput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.GetPlayOutput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.GetPlayOutput>)SourceGenerationContext.Default.FmTealAlphaFeedGetPlayOutput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new GetPlayOutput FromCBORObject(CBORObject obj)
        {
            return new GetPlayOutput(obj);
        }

        /// <inheritdoc/>
        public static GetPlayOutput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<GetPlayOutput>(s, (JsonTypeInfo<GetPlayOutput>)SourceGenerationContext.Default.FmTealAlphaFeedGetPlayOutput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out GetPlayOutput result)
        {
            result = JsonSerializer.Deserialize<GetPlayOutput>(s, (JsonTypeInfo<GetPlayOutput>)SourceGenerationContext.Default.FmTealAlphaFeedGetPlayOutput);
            return result != null;
        }
    }
}

