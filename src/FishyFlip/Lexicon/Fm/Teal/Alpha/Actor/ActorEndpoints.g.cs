// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Fm.Teal.Alpha.Actor
{

    /// <summary>
    /// fm.teal.alpha.actor Endpoint Group.
    /// </summary>
    public static class ActorEndpoints
    {

       public const string GroupNamespace = "fm.teal.alpha.actor";

       public const string GetProfile = "/xrpc/fm.teal.alpha.actor.getProfile";

       public const string GetProfiles = "/xrpc/fm.teal.alpha.actor.getProfiles";

       public const string SearchActors = "/xrpc/fm.teal.alpha.actor.searchActors";


        /// <summary>
        /// Generated endpoint for fm.teal.alpha.actor.getProfile
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="actor">The author's DID</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.GetProfileOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.GetProfileOutput?>> GetProfileAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier actor, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetProfile.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("actor=" + actor);

            var headers = new Dictionary<string, string>();
            if (atp.TryFetchProxy(GroupNamespace, out var proxyUrl))
            {
                headers.Add(Constants.AtProtoProxy, proxyUrl);
            }
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.GetProfileOutput>(endpointUrl, atp.Options.SourceGenerationContext.FmTealAlphaActorGetProfileOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Generated endpoint for fm.teal.alpha.actor.getProfiles
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="actors">Array of actor DIDs</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.GetProfilesOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.GetProfilesOutput?>> GetProfilesAsync (this FishyFlip.ATProtocol atp, List<FishyFlip.Models.ATIdentifier> actors, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetProfiles.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add(string.Join("&", actors.Select(n => "actors=" + n)));

            var headers = new Dictionary<string, string>();
            if (atp.TryFetchProxy(GroupNamespace, out var proxyUrl))
            {
                headers.Add(Constants.AtProtoProxy, proxyUrl);
            }
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.GetProfilesOutput>(endpointUrl, atp.Options.SourceGenerationContext.FmTealAlphaActorGetProfilesOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Generated endpoint for fm.teal.alpha.actor.searchActors
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="q">The search query</param>
        /// <param name="limit">The maximum number of actors to return</param>
        /// <param name="cursor">Cursor for pagination</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.SearchActorsOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.SearchActorsOutput?>> SearchActorsAsync (this FishyFlip.ATProtocol atp, string q, int? limit = 0, string? cursor = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = SearchActors.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("q=" + q);

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            if (cursor != null)
            {
                queryStrings.Add("cursor=" + cursor);
            }

            var headers = new Dictionary<string, string>();
            if (atp.TryFetchProxy(GroupNamespace, out var proxyUrl))
            {
                headers.Add(Constants.AtProtoProxy, proxyUrl);
            }
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.SearchActorsOutput>(endpointUrl, atp.Options.SourceGenerationContext.FmTealAlphaActorSearchActorsOutput!, cancellationToken, headers);
        }

    }
}

