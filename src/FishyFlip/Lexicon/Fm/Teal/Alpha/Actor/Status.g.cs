// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Fm.Teal.Alpha.Actor
{
    /// <summary>
    /// This lexicon is in a not officially released state. It is subject to change. | A declaration of the status of the actor. Only one can be shown at a time. If there are multiple, the latest record should be picked and earlier records should be deleted or tombstoned.
    /// </summary>
    public partial class Status : ATObject, ICBOREncodable<Status>, IJsonEncodable<Status>, IParsable<Status>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Status"/> class.
        /// </summary>
        /// <param name="time">The unix timestamp of when the item was recorded</param>
        /// <param name="item">
        /// <see cref="FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.PlayView"/> (fm.teal.alpha.feed.defs#playView)
        /// </param>
        /// <param name="expiry">The unix timestamp of the expiry time of the item. If unavailable, default to 10 minutes past the start time.</param>
        public Status(DateTime? time, FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.PlayView? item, DateTime? expiry = default)
        {
            this.Time = time;
            this.Expiry = expiry;
            this.Item = item;
            this.Type = "fm.teal.alpha.actor.status";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Status"/> class.
        /// </summary>
        public Status()
        {
            this.Type = "fm.teal.alpha.actor.status";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Status"/> class.
        /// </summary>
        public Status(CBORObject obj)
        {
            if (obj["time"] is not null) this.Time = obj["time"].ToDateTime();
            if (obj["expiry"] is not null) this.Expiry = obj["expiry"].ToDateTime();
            if (obj["item"] is not null) this.Item = new FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.PlayView(obj["item"]);
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the time.
        /// <br/> The unix timestamp of when the item was recorded
        /// </summary>
        [JsonPropertyName("time")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? Time { get; set; }

        /// <summary>
        /// Gets or sets the expiry.
        /// <br/> The unix timestamp of the expiry time of the item. If unavailable, default to 10 minutes past the start time.
        /// </summary>
        [JsonPropertyName("expiry")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? Expiry { get; set; }

        /// <summary>
        /// Gets or sets the item.
        /// <br/> <see cref="FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.PlayView"/> (fm.teal.alpha.feed.defs#playView)
        /// </summary>
        [JsonPropertyName("item")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public FishyFlip.Lexicon.Fm.Teal.Alpha.Feed.PlayView? Item { get; set; }

        public const string RecordType = "fm.teal.alpha.actor.status";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.Status>)SourceGenerationContext.Default.FmTealAlphaActorStatus);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.Status>)SourceGenerationContext.Default.FmTealAlphaActorStatus);
        }

        public static new Status FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.Status>(json, (JsonTypeInfo<FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.Status>)SourceGenerationContext.Default.FmTealAlphaActorStatus)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Status FromCBORObject(CBORObject obj)
        {
            return new Status(obj);
        }

        /// <inheritdoc/>
        public static Status Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Status>(s, (JsonTypeInfo<Status>)SourceGenerationContext.Default.FmTealAlphaActorStatus)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Status result)
        {
            result = JsonSerializer.Deserialize<Status>(s, (JsonTypeInfo<Status>)SourceGenerationContext.Default.FmTealAlphaActorStatus);
            return result != null;
        }
    }
}

