// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Fm.Teal.Alpha.Actor
{
    public partial class ProfileView : ATObject, ICBOREncodable<ProfileView>, IJsonEncodable<ProfileView>, IParsable<ProfileView>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileView"/> class.
        /// </summary>
        /// <param name="did">The decentralized identifier of the actor</param>
        /// <param name="displayName"></param>
        /// <param name="description">Free-form profile description text.</param>
        /// <param name="descriptionFacets">Annotations of text in the profile description (mentions, URLs, hashtags, etc). May be changed to another (backwards compatible) lexicon.</param>
        /// <param name="featuredItem">The user's most recent item featured on their profile.
        /// <see cref="FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.FeaturedItem"/> (fm.teal.alpha.actor.profile#featuredItem)
        /// </param>
        /// <param name="avatar">IPLD of the avatar</param>
        /// <param name="banner">IPLD of the banner image</param>
        /// <param name="createdAt"></param>
        public ProfileView(string? did = default, string? displayName = default, string? description = default, List<FishyFlip.Lexicon.App.Bsky.Richtext.Facet>? descriptionFacets = default, FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.FeaturedItem? featuredItem = default, string? avatar = default, string? banner = default, DateTime? createdAt = default)
        {
            this.Did = did;
            this.DisplayName = displayName;
            this.Description = description;
            this.DescriptionFacets = descriptionFacets;
            this.FeaturedItem = featuredItem;
            this.Avatar = avatar;
            this.Banner = banner;
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.Type = "fm.teal.alpha.actor.defs#profileView";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileView"/> class.
        /// </summary>
        public ProfileView()
        {
            this.Type = "fm.teal.alpha.actor.defs#profileView";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileView"/> class.
        /// </summary>
        public ProfileView(CBORObject obj)
        {
            if (obj["did"] is not null) this.Did = obj["did"].AsString();
            if (obj["displayName"] is not null) this.DisplayName = obj["displayName"].AsString();
            if (obj["description"] is not null) this.Description = obj["description"].AsString();
            if (obj["descriptionFacets"] is not null) this.DescriptionFacets = obj["descriptionFacets"].Values.Select(n =>new FishyFlip.Lexicon.App.Bsky.Richtext.Facet(n)).ToList();
            if (obj["featuredItem"] is not null) this.FeaturedItem = new FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.FeaturedItem(obj["featuredItem"]);
            if (obj["avatar"] is not null) this.Avatar = obj["avatar"].AsString();
            if (obj["banner"] is not null) this.Banner = obj["banner"].AsString();
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the did.
        /// <br/> The decentralized identifier of the actor
        /// </summary>
        [JsonPropertyName("did")]
        public string? Did { get; set; }

        /// <summary>
        /// Gets or sets the displayName.
        /// </summary>
        [JsonPropertyName("displayName")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the description.
        /// <br/> Free-form profile description text.
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or sets the descriptionFacets.
        /// <br/> Annotations of text in the profile description (mentions, URLs, hashtags, etc). May be changed to another (backwards compatible) lexicon.
        /// </summary>
        [JsonPropertyName("descriptionFacets")]
        public List<FishyFlip.Lexicon.App.Bsky.Richtext.Facet>? DescriptionFacets { get; set; }

        /// <summary>
        /// Gets or sets the featuredItem.
        /// <br/> The user's most recent item featured on their profile.
        /// <br/> <see cref="FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.FeaturedItem"/> (fm.teal.alpha.actor.profile#featuredItem)
        /// </summary>
        [JsonPropertyName("featuredItem")]
        public FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.FeaturedItem? FeaturedItem { get; set; }

        /// <summary>
        /// Gets or sets the avatar.
        /// <br/> IPLD of the avatar
        /// </summary>
        [JsonPropertyName("avatar")]
        public string? Avatar { get; set; }

        /// <summary>
        /// Gets or sets the banner.
        /// <br/> IPLD of the banner image
        /// </summary>
        [JsonPropertyName("banner")]
        public string? Banner { get; set; }

        /// <summary>
        /// Gets or sets the createdAt.
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;

        public const string RecordType = "fm.teal.alpha.actor.defs#profileView";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.ProfileView>)SourceGenerationContext.Default.FmTealAlphaActorProfileView);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.ProfileView>)SourceGenerationContext.Default.FmTealAlphaActorProfileView);
        }

        public static new ProfileView FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.ProfileView>(json, (JsonTypeInfo<FishyFlip.Lexicon.Fm.Teal.Alpha.Actor.ProfileView>)SourceGenerationContext.Default.FmTealAlphaActorProfileView)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new ProfileView FromCBORObject(CBORObject obj)
        {
            return new ProfileView(obj);
        }

        /// <inheritdoc/>
        public static ProfileView Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<ProfileView>(s, (JsonTypeInfo<ProfileView>)SourceGenerationContext.Default.FmTealAlphaActorProfileView)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out ProfileView result)
        {
            result = JsonSerializer.Deserialize<ProfileView>(s, (JsonTypeInfo<ProfileView>)SourceGenerationContext.Default.FmTealAlphaActorProfileView);
            return result != null;
        }
    }
}

