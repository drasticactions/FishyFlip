// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Ma.Tokono.Byov
{
    /// <summary>
    /// A channel subscription.
    /// </summary>
    public partial class Subscription : ATObject, ICBOREncodable<Subscription>, IJsonEncodable<Subscription>, IParsable<Subscription>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription"/> class.
        /// </summary>
        /// <param name="subject"></param>
        /// <param name="createdAt"></param>
        public Subscription(string? subject, DateTime? createdAt = default)
        {
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.Subject = subject;
            this.Type = "ma.tokono.byov.subscription";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription"/> class.
        /// </summary>
        public Subscription()
        {
            this.Type = "ma.tokono.byov.subscription";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription"/> class.
        /// </summary>
        public Subscription(CBORObject obj)
        {
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["subject"] is not null) this.Subject = obj["subject"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the createdAt.
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime? CreatedAt { get; set; } = default;

        /// <summary>
        /// Gets or sets the subject.
        /// </summary>
        [JsonPropertyName("subject")]
        public string? Subject { get; set; }

        public const string RecordType = "ma.tokono.byov.subscription";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Ma.Tokono.Byov.Subscription>)SourceGenerationContext.Default.MaTokonoByovSubscription);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Ma.Tokono.Byov.Subscription>)SourceGenerationContext.Default.MaTokonoByovSubscription);
        }

        public static new Subscription FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Ma.Tokono.Byov.Subscription>(json, (JsonTypeInfo<FishyFlip.Lexicon.Ma.Tokono.Byov.Subscription>)SourceGenerationContext.Default.MaTokonoByovSubscription)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Subscription FromCBORObject(CBORObject obj)
        {
            return new Subscription(obj);
        }

        /// <inheritdoc/>
        public static Subscription Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Subscription>(s, (JsonTypeInfo<Subscription>)SourceGenerationContext.Default.MaTokonoByovSubscription)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Subscription result)
        {
            result = JsonSerializer.Deserialize<Subscription>(s, (JsonTypeInfo<Subscription>)SourceGenerationContext.Default.MaTokonoByovSubscription);
            return result != null;
        }
    }
}

