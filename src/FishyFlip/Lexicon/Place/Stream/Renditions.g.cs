// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Place.Stream
{
    public partial class Renditions : ATObject, ICBOREncodable<Renditions>, IJsonEncodable<Renditions>, IParsable<Renditions>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Renditions"/> class.
        /// </summary>
        /// <param name="renditions"></param>
        public Renditions(List<FishyFlip.Lexicon.Place.Stream.Rendition> renditions = default)
        {
            this.RenditionsValue = renditions;
            this.Type = "place.stream.defs#renditions";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Renditions"/> class.
        /// </summary>
        public Renditions()
        {
            this.Type = "place.stream.defs#renditions";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Renditions"/> class.
        /// </summary>
        public Renditions(CBORObject obj)
        {
            if (obj["renditions"] is not null) this.RenditionsValue = obj["renditions"].Values.Select(n =>new FishyFlip.Lexicon.Place.Stream.Rendition(n)).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the renditions.
        /// </summary>
        [JsonPropertyName("renditions")]
        [JsonRequired]
        public List<FishyFlip.Lexicon.Place.Stream.Rendition> RenditionsValue { get; set; }

        public const string RecordType = "place.stream.defs#renditions";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Renditions>)SourceGenerationContext.Default.PlaceStreamRenditions);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Renditions>)SourceGenerationContext.Default.PlaceStreamRenditions);
        }

        public static new Renditions FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Place.Stream.Renditions>(json, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Renditions>)SourceGenerationContext.Default.PlaceStreamRenditions)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Renditions FromCBORObject(CBORObject obj)
        {
            return new Renditions(obj);
        }

        /// <inheritdoc/>
        public static Renditions Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Renditions>(s, (JsonTypeInfo<Renditions>)SourceGenerationContext.Default.PlaceStreamRenditions)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Renditions result)
        {
            result = JsonSerializer.Deserialize<Renditions>(s, (JsonTypeInfo<Renditions>)SourceGenerationContext.Default.PlaceStreamRenditions);
            return result != null;
        }
    }
}

