// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Place.Stream
{
    /// <summary>
    /// Record announcing a livestream is happening
    /// </summary>
    public partial class Livestream : ATObject, ICBOREncodable<Livestream>, IJsonEncodable<Livestream>, IParsable<Livestream>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Livestream"/> class.
        /// </summary>
        /// <param name="title">The title of the livestream, as it will be announced to followers.</param>
        /// <param name="url">The URL where this stream can be found. This is primarily a hint for other Streamplace nodes to locate and replicate the stream.</param>
        /// <param name="createdAt">Client-declared timestamp when this livestream started.</param>
        /// <param name="post">The post that announced this livestream. Used for chat replies.
        /// <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.StrongRef"/> (com.atproto.repo.strongRef)
        /// </param>
        public Livestream(string? title, string? url = default, DateTime? createdAt = default, Com.Atproto.Repo.StrongRef? post = default)
        {
            this.Title = title;
            this.Url = url;
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.Post = post;
            this.Type = "place.stream.livestream";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Livestream"/> class.
        /// </summary>
        public Livestream()
        {
            this.Type = "place.stream.livestream";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Livestream"/> class.
        /// </summary>
        public Livestream(CBORObject obj)
        {
            if (obj["title"] is not null) this.Title = obj["title"].AsString();
            if (obj["url"] is not null) this.Url = obj["url"].AsString();
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["post"] is not null) this.Post = new FishyFlip.Lexicon.Com.Atproto.Repo.StrongRef(obj["post"]);
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the title.
        /// <br/> The title of the livestream, as it will be announced to followers.
        /// </summary>
        [JsonPropertyName("title")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Title { get; set; }

        /// <summary>
        /// Gets or sets the url.
        /// <br/> The URL where this stream can be found. This is primarily a hint for other Streamplace nodes to locate and replicate the stream.
        /// </summary>
        [JsonPropertyName("url")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Url { get; set; }

        /// <summary>
        /// Gets or sets the createdAt.
        /// <br/> Client-declared timestamp when this livestream started.
        /// </summary>
        [JsonPropertyName("createdAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;

        /// <summary>
        /// Gets or sets the post.
        /// <br/> The post that announced this livestream. Used for chat replies.
        /// <br/> <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.StrongRef"/> (com.atproto.repo.strongRef)
        /// </summary>
        [JsonPropertyName("post")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Com.Atproto.Repo.StrongRef? Post { get; set; }

        public const string RecordType = "place.stream.livestream";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Livestream>)SourceGenerationContext.Default.PlaceStreamLivestream);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Livestream>)SourceGenerationContext.Default.PlaceStreamLivestream);
        }

        public static new Livestream FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Place.Stream.Livestream>(json, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Livestream>)SourceGenerationContext.Default.PlaceStreamLivestream)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Livestream FromCBORObject(CBORObject obj)
        {
            return new Livestream(obj);
        }

        /// <inheritdoc/>
        public static Livestream Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Livestream>(s, (JsonTypeInfo<Livestream>)SourceGenerationContext.Default.PlaceStreamLivestream)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Livestream result)
        {
            result = JsonSerializer.Deserialize<Livestream>(s, (JsonTypeInfo<Livestream>)SourceGenerationContext.Default.PlaceStreamLivestream);
            return result != null;
        }
    }
}

