// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Place.Stream.Live
{
    public partial class GetSegmentsOutput : ATObject, ICBOREncodable<GetSegmentsOutput>, IJsonEncodable<GetSegmentsOutput>, IParsable<GetSegmentsOutput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="GetSegmentsOutput"/> class.
        /// </summary>
        /// <param name="segments"></param>
        public GetSegmentsOutput(List<FishyFlip.Lexicon.Place.Stream.SegmentView>? segments = default)
        {
            this.Segments = segments;
            this.Type = "place.stream.live.getSegments#GetSegmentsOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetSegmentsOutput"/> class.
        /// </summary>
        public GetSegmentsOutput()
        {
            this.Type = "place.stream.live.getSegments#GetSegmentsOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetSegmentsOutput"/> class.
        /// </summary>
        public GetSegmentsOutput(CBORObject obj)
        {
            if (obj["segments"] is not null) this.Segments = obj["segments"].Values.Select(n =>new FishyFlip.Lexicon.Place.Stream.SegmentView(n)).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the segments.
        /// </summary>
        [JsonPropertyName("segments")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<FishyFlip.Lexicon.Place.Stream.SegmentView>? Segments { get; set; }

        public const string RecordType = "place.stream.live.getSegments#GetSegmentsOutput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Live.GetSegmentsOutput>)SourceGenerationContext.Default.PlaceStreamLiveGetSegmentsOutput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Live.GetSegmentsOutput>)SourceGenerationContext.Default.PlaceStreamLiveGetSegmentsOutput);
        }

        public static new GetSegmentsOutput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Place.Stream.Live.GetSegmentsOutput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Live.GetSegmentsOutput>)SourceGenerationContext.Default.PlaceStreamLiveGetSegmentsOutput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new GetSegmentsOutput FromCBORObject(CBORObject obj)
        {
            return new GetSegmentsOutput(obj);
        }

        /// <inheritdoc/>
        public static GetSegmentsOutput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<GetSegmentsOutput>(s, (JsonTypeInfo<GetSegmentsOutput>)SourceGenerationContext.Default.PlaceStreamLiveGetSegmentsOutput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out GetSegmentsOutput result)
        {
            result = JsonSerializer.Deserialize<GetSegmentsOutput>(s, (JsonTypeInfo<GetSegmentsOutput>)SourceGenerationContext.Default.PlaceStreamLiveGetSegmentsOutput);
            return result != null;
        }
    }
}

