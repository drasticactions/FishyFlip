// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Place.Stream.Live
{

    /// <summary>
    /// place.stream.live Endpoint Group.
    /// </summary>
    public static class LiveEndpoints
    {

       public const string GroupNamespace = "place.stream.live";

       public const string GetLiveUsers = "/xrpc/place.stream.live.getLiveUsers";

       public const string GetSegments = "/xrpc/place.stream.live.getSegments";


        /// <summary>
        /// Get a list of livestream segments for a user
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="limit"></param>
        /// <param name="before"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Place.Stream.Live.GetLiveUsersOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Place.Stream.Live.GetLiveUsersOutput?>> GetLiveUsersAsync (this FishyFlip.ATProtocol atp, int? limit = 50, DateTime? before = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetLiveUsers.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            if (before != null)
            {
                queryStrings.Add("before=" + before);
            }

            var headers = new Dictionary<string, string>();
            if (atp.TryFetchProxy(GroupNamespace, out var proxyUrl))
            {
                headers.Add(Constants.AtProtoProxy, proxyUrl);
            }
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Place.Stream.Live.GetLiveUsersOutput>(endpointUrl, atp.Options.SourceGenerationContext.PlaceStreamLiveGetLiveUsersOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Get a list of livestream segments for a user
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="userDID">The DID of the potentially-following user</param>
        /// <param name="limit"></param>
        /// <param name="before"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Place.Stream.Live.GetSegmentsOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Place.Stream.Live.GetSegmentsOutput?>> GetSegmentsAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATDid userDID, int? limit = 50, DateTime? before = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetSegments.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("userDID=" + userDID);

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            if (before != null)
            {
                queryStrings.Add("before=" + before);
            }

            var headers = new Dictionary<string, string>();
            if (atp.TryFetchProxy(GroupNamespace, out var proxyUrl))
            {
                headers.Add(Constants.AtProtoProxy, proxyUrl);
            }
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Place.Stream.Live.GetSegmentsOutput>(endpointUrl, atp.Options.SourceGenerationContext.PlaceStreamLiveGetSegmentsOutput!, cancellationToken, headers);
        }

    }
}

