// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Place.Stream.Live
{
    public partial class GetLiveUsersOutput : ATObject, ICBOREncodable<GetLiveUsersOutput>, IJsonEncodable<GetLiveUsersOutput>, IParsable<GetLiveUsersOutput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="GetLiveUsersOutput"/> class.
        /// </summary>
        /// <param name="streams"></param>
        public GetLiveUsersOutput(List<FishyFlip.Lexicon.Place.Stream.LivestreamView>? streams = default)
        {
            this.Streams = streams;
            this.Type = "place.stream.live.getLiveUsers#GetLiveUsersOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetLiveUsersOutput"/> class.
        /// </summary>
        public GetLiveUsersOutput()
        {
            this.Type = "place.stream.live.getLiveUsers#GetLiveUsersOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetLiveUsersOutput"/> class.
        /// </summary>
        public GetLiveUsersOutput(CBORObject obj)
        {
            if (obj["streams"] is not null) this.Streams = obj["streams"].Values.Select(n =>new FishyFlip.Lexicon.Place.Stream.LivestreamView(n)).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the streams.
        /// </summary>
        [JsonPropertyName("streams")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<FishyFlip.Lexicon.Place.Stream.LivestreamView>? Streams { get; set; }

        public const string RecordType = "place.stream.live.getLiveUsers#GetLiveUsersOutput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Live.GetLiveUsersOutput>)SourceGenerationContext.Default.PlaceStreamLiveGetLiveUsersOutput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Live.GetLiveUsersOutput>)SourceGenerationContext.Default.PlaceStreamLiveGetLiveUsersOutput);
        }

        public static new GetLiveUsersOutput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Place.Stream.Live.GetLiveUsersOutput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Live.GetLiveUsersOutput>)SourceGenerationContext.Default.PlaceStreamLiveGetLiveUsersOutput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new GetLiveUsersOutput FromCBORObject(CBORObject obj)
        {
            return new GetLiveUsersOutput(obj);
        }

        /// <inheritdoc/>
        public static GetLiveUsersOutput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<GetLiveUsersOutput>(s, (JsonTypeInfo<GetLiveUsersOutput>)SourceGenerationContext.Default.PlaceStreamLiveGetLiveUsersOutput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out GetLiveUsersOutput result)
        {
            result = JsonSerializer.Deserialize<GetLiveUsersOutput>(s, (JsonTypeInfo<GetLiveUsersOutput>)SourceGenerationContext.Default.PlaceStreamLiveGetLiveUsersOutput);
            return result != null;
        }
    }
}

