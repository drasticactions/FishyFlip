// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Place.Stream.Graph
{

    /// <summary>
    /// place.stream.graph Endpoint Group.
    /// </summary>
    public static class GraphEndpoints
    {

       public const string GroupNamespace = "place.stream.graph";

       public const string GetFollowingUser = "/xrpc/place.stream.graph.getFollowingUser";


        /// <summary>
        /// Get whether or not user A is following user B.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="userDID">The DID of the potentially-following user</param>
        /// <param name="subjectDID">The DID of the user potentially being followed</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Place.Stream.Graph.GetFollowingUserOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Place.Stream.Graph.GetFollowingUserOutput?>> GetFollowingUserAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATDid userDID, FishyFlip.Models.ATDid subjectDID, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetFollowingUser.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("userDID=" + userDID);

            queryStrings.Add("subjectDID=" + subjectDID);

            var headers = new Dictionary<string, string>();
            if (atp.TryFetchProxy(GroupNamespace, out var proxyUrl))
            {
                headers.Add(Constants.AtProtoProxy, proxyUrl);
            }
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Place.Stream.Graph.GetFollowingUserOutput>(endpointUrl, atp.Options.SourceGenerationContext.PlaceStreamGraphGetFollowingUserOutput!, cancellationToken, headers);
        }

    }
}

