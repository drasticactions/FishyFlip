// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Place.Stream
{
    public partial class Rendition : ATObject, ICBOREncodable<Rendition>, IJsonEncodable<Rendition>, IParsable<Rendition>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Rendition"/> class.
        /// </summary>
        /// <param name="name"></param>
        public Rendition(string name = default)
        {
            this.Name = name;
            this.Type = "place.stream.defs#rendition";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Rendition"/> class.
        /// </summary>
        public Rendition()
        {
            this.Type = "place.stream.defs#rendition";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Rendition"/> class.
        /// </summary>
        public Rendition(CBORObject obj)
        {
            if (obj["name"] is not null) this.Name = obj["name"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [JsonPropertyName("name")]
        [JsonRequired]
        public string Name { get; set; }

        public const string RecordType = "place.stream.defs#rendition";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Rendition>)SourceGenerationContext.Default.PlaceStreamRendition);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Rendition>)SourceGenerationContext.Default.PlaceStreamRendition);
        }

        public static new Rendition FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Place.Stream.Rendition>(json, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Rendition>)SourceGenerationContext.Default.PlaceStreamRendition)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Rendition FromCBORObject(CBORObject obj)
        {
            return new Rendition(obj);
        }

        /// <inheritdoc/>
        public static Rendition Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Rendition>(s, (JsonTypeInfo<Rendition>)SourceGenerationContext.Default.PlaceStreamRendition)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Rendition result)
        {
            result = JsonSerializer.Deserialize<Rendition>(s, (JsonTypeInfo<Rendition>)SourceGenerationContext.Default.PlaceStreamRendition);
            return result != null;
        }
    }
}

