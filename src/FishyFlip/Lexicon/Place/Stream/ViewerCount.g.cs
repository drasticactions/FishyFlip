// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Place.Stream
{
    public partial class ViewerCount : ATObject, ICBOREncodable<ViewerCount>, IJsonEncodable<ViewerCount>, IParsable<ViewerCount>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewerCount"/> class.
        /// </summary>
        /// <param name="count"></param>
        public ViewerCount(long count = default)
        {
            this.Count = count;
            this.Type = "place.stream.livestream#viewerCount";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ViewerCount"/> class.
        /// </summary>
        public ViewerCount()
        {
            this.Type = "place.stream.livestream#viewerCount";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ViewerCount"/> class.
        /// </summary>
        public ViewerCount(CBORObject obj)
        {
            if (obj["count"] is not null) this.Count = obj["count"].AsInt64Value();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the count.
        /// </summary>
        [JsonPropertyName("count")]
        [JsonRequired]
        public long Count { get; set; }

        public const string RecordType = "place.stream.livestream#viewerCount";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.ViewerCount>)SourceGenerationContext.Default.PlaceStreamViewerCount);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.ViewerCount>)SourceGenerationContext.Default.PlaceStreamViewerCount);
        }

        public static new ViewerCount FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Place.Stream.ViewerCount>(json, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.ViewerCount>)SourceGenerationContext.Default.PlaceStreamViewerCount)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new ViewerCount FromCBORObject(CBORObject obj)
        {
            return new ViewerCount(obj);
        }

        /// <inheritdoc/>
        public static ViewerCount Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<ViewerCount>(s, (JsonTypeInfo<ViewerCount>)SourceGenerationContext.Default.PlaceStreamViewerCount)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out ViewerCount result)
        {
            result = JsonSerializer.Deserialize<ViewerCount>(s, (JsonTypeInfo<ViewerCount>)SourceGenerationContext.Default.PlaceStreamViewerCount);
            return result != null;
        }
    }
}

