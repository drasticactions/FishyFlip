// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Place.Stream
{
    /// <summary>
    /// Media file representing a segment of a livestream
    /// </summary>
    public partial class Segment : ATObject, ICBOREncodable<Segment>, IJsonEncodable<Segment>, IParsable<Segment>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Segment"/> class.
        /// </summary>
        /// <param name="id">Unique identifier for the segment</param>
        /// <param name="signingKey">The DID of the signing key used for this segment</param>
        /// <param name="startTime">When this segment started</param>
        /// <param name="creator"></param>
        /// <param name="duration">The duration of the segment in nanoseconds</param>
        /// <param name="video"></param>
        /// <param name="audio"></param>
        public Segment(string? id, string? signingKey, DateTime? startTime, FishyFlip.Models.ATDid? creator, long? duration = default, List<FishyFlip.Lexicon.Place.Stream.Video>? video = default, List<FishyFlip.Lexicon.Place.Stream.Audio>? audio = default)
        {
            this.Id = id;
            this.SigningKey = signingKey;
            this.StartTime = startTime;
            this.Duration = duration;
            this.Creator = creator;
            this.Video = video;
            this.Audio = audio;
            this.Type = "place.stream.segment";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Segment"/> class.
        /// </summary>
        public Segment()
        {
            this.Type = "place.stream.segment";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Segment"/> class.
        /// </summary>
        public Segment(CBORObject obj)
        {
            if (obj["id"] is not null) this.Id = obj["id"].AsString();
            if (obj["signingKey"] is not null) this.SigningKey = obj["signingKey"].AsString();
            if (obj["startTime"] is not null) this.StartTime = obj["startTime"].ToDateTime();
            if (obj["duration"] is not null) this.Duration = obj["duration"].AsInt64Value();
            if (obj["creator"] is not null) this.Creator = obj["creator"].ToATDid();
            if (obj["video"] is not null) this.Video = obj["video"].Values.Select(n =>new FishyFlip.Lexicon.Place.Stream.Video(n)).ToList();
            if (obj["audio"] is not null) this.Audio = obj["audio"].Values.Select(n =>new FishyFlip.Lexicon.Place.Stream.Audio(n)).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the id.
        /// <br/> Unique identifier for the segment
        /// </summary>
        [JsonPropertyName("id")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Id { get; set; }

        /// <summary>
        /// Gets or sets the signingKey.
        /// <br/> The DID of the signing key used for this segment
        /// </summary>
        [JsonPropertyName("signingKey")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? SigningKey { get; set; }

        /// <summary>
        /// Gets or sets the startTime.
        /// <br/> When this segment started
        /// </summary>
        [JsonPropertyName("startTime")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or sets the duration.
        /// <br/> The duration of the segment in nanoseconds
        /// </summary>
        [JsonPropertyName("duration")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public long? Duration { get; set; }

        /// <summary>
        /// Gets or sets the creator.
        /// </summary>
        [JsonPropertyName("creator")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATDidJsonConverter))]
        public FishyFlip.Models.ATDid? Creator { get; set; }

        /// <summary>
        /// Gets or sets the video.
        /// </summary>
        [JsonPropertyName("video")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<FishyFlip.Lexicon.Place.Stream.Video>? Video { get; set; }

        /// <summary>
        /// Gets or sets the audio.
        /// </summary>
        [JsonPropertyName("audio")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<FishyFlip.Lexicon.Place.Stream.Audio>? Audio { get; set; }

        public const string RecordType = "place.stream.segment";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Segment>)SourceGenerationContext.Default.PlaceStreamSegment);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Segment>)SourceGenerationContext.Default.PlaceStreamSegment);
        }

        public static new Segment FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Place.Stream.Segment>(json, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Segment>)SourceGenerationContext.Default.PlaceStreamSegment)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Segment FromCBORObject(CBORObject obj)
        {
            return new Segment(obj);
        }

        /// <inheritdoc/>
        public static Segment Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Segment>(s, (JsonTypeInfo<Segment>)SourceGenerationContext.Default.PlaceStreamSegment)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Segment result)
        {
            result = JsonSerializer.Deserialize<Segment>(s, (JsonTypeInfo<Segment>)SourceGenerationContext.Default.PlaceStreamSegment);
            return result != null;
        }
    }
}

