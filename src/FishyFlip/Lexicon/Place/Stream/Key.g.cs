// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Place.Stream
{
    /// <summary>
    /// Record linking an atproto identity with a stream signing key
    /// </summary>
    public partial class Key : ATObject, ICBOREncodable<Key>, IJsonEncodable<Key>, IParsable<Key>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Key"/> class.
        /// </summary>
        /// <param name="signingKey">The did:key signing key for the stream.</param>
        /// <param name="createdAt">Client-declared timestamp when this key was created.</param>
        public Key(string? signingKey, DateTime? createdAt = default)
        {
            this.SigningKey = signingKey;
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.Type = "place.stream.key";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Key"/> class.
        /// </summary>
        public Key()
        {
            this.Type = "place.stream.key";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Key"/> class.
        /// </summary>
        public Key(CBORObject obj)
        {
            if (obj["signingKey"] is not null) this.SigningKey = obj["signingKey"].AsString();
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the signingKey.
        /// <br/> The did:key signing key for the stream.
        /// </summary>
        [JsonPropertyName("signingKey")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? SigningKey { get; set; }

        /// <summary>
        /// Gets or sets the createdAt.
        /// <br/> Client-declared timestamp when this key was created.
        /// </summary>
        [JsonPropertyName("createdAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;

        public const string RecordType = "place.stream.key";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Key>)SourceGenerationContext.Default.PlaceStreamKey);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Key>)SourceGenerationContext.Default.PlaceStreamKey);
        }

        public static new Key FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Place.Stream.Key>(json, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Key>)SourceGenerationContext.Default.PlaceStreamKey)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Key FromCBORObject(CBORObject obj)
        {
            return new Key(obj);
        }

        /// <inheritdoc/>
        public static Key Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Key>(s, (JsonTypeInfo<Key>)SourceGenerationContext.Default.PlaceStreamKey)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Key result)
        {
            result = JsonSerializer.Deserialize<Key>(s, (JsonTypeInfo<Key>)SourceGenerationContext.Default.PlaceStreamKey);
            return result != null;
        }
    }
}

