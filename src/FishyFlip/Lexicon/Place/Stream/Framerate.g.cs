// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Place.Stream
{
    public partial class Framerate : ATObject, ICBOREncodable<Framerate>, IJsonEncodable<Framerate>, IParsable<Framerate>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Framerate"/> class.
        /// </summary>
        /// <param name="num"></param>
        /// <param name="den"></param>
        public Framerate(long num = default, long den = default)
        {
            this.Num = num;
            this.Den = den;
            this.Type = "place.stream.segment#framerate";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Framerate"/> class.
        /// </summary>
        public Framerate()
        {
            this.Type = "place.stream.segment#framerate";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Framerate"/> class.
        /// </summary>
        public Framerate(CBORObject obj)
        {
            if (obj["num"] is not null) this.Num = obj["num"].AsInt64Value();
            if (obj["den"] is not null) this.Den = obj["den"].AsInt64Value();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the num.
        /// </summary>
        [JsonPropertyName("num")]
        [JsonRequired]
        public long Num { get; set; }

        /// <summary>
        /// Gets or sets the den.
        /// </summary>
        [JsonPropertyName("den")]
        [JsonRequired]
        public long Den { get; set; }

        public const string RecordType = "place.stream.segment#framerate";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Framerate>)SourceGenerationContext.Default.PlaceStreamFramerate);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Framerate>)SourceGenerationContext.Default.PlaceStreamFramerate);
        }

        public static new Framerate FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Place.Stream.Framerate>(json, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Framerate>)SourceGenerationContext.Default.PlaceStreamFramerate)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Framerate FromCBORObject(CBORObject obj)
        {
            return new Framerate(obj);
        }

        /// <inheritdoc/>
        public static Framerate Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Framerate>(s, (JsonTypeInfo<Framerate>)SourceGenerationContext.Default.PlaceStreamFramerate)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Framerate result)
        {
            result = JsonSerializer.Deserialize<Framerate>(s, (JsonTypeInfo<Framerate>)SourceGenerationContext.Default.PlaceStreamFramerate);
            return result != null;
        }
    }
}

