// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Place.Stream
{
    public partial class BlockView : ATObject, ICBOREncodable<BlockView>, IJsonEncodable<BlockView>, IParsable<BlockView>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockView"/> class.
        /// </summary>
        /// <param name="uri"></param>
        /// <param name="cid"></param>
        /// <param name="blocker">
        /// <see cref="FishyFlip.Lexicon.App.Bsky.Actor.ProfileViewBasic"/> (app.bsky.actor.defs#profileViewBasic)
        /// </param>
        /// <param name="record">
        /// <see cref="FishyFlip.Lexicon.App.Bsky.Graph.Block"/> (app.bsky.graph.block)
        /// </param>
        /// <param name="indexedAt"></param>
        public BlockView(FishyFlip.Models.ATUri uri = default, string cid = default, FishyFlip.Lexicon.App.Bsky.Actor.ProfileViewBasic blocker = default, FishyFlip.Lexicon.App.Bsky.Graph.Block record = default, DateTime? indexedAt = default)
        {
            this.Uri = uri;
            this.Cid = cid;
            this.Blocker = blocker;
            this.Record = record;
            this.IndexedAt = indexedAt;
            this.Type = "place.stream.defs#blockView";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="BlockView"/> class.
        /// </summary>
        public BlockView()
        {
            this.Type = "place.stream.defs#blockView";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="BlockView"/> class.
        /// </summary>
        public BlockView(CBORObject obj)
        {
            if (obj["uri"] is not null) this.Uri = obj["uri"].ToATUri();
            if (obj["cid"] is not null) this.Cid = obj["cid"].AsString();
            if (obj["blocker"] is not null) this.Blocker = new FishyFlip.Lexicon.App.Bsky.Actor.ProfileViewBasic(obj["blocker"]);
            if (obj["record"] is not null) this.Record = new FishyFlip.Lexicon.App.Bsky.Graph.Block(obj["record"]);
            if (obj["indexedAt"] is not null) this.IndexedAt = obj["indexedAt"].ToDateTime();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the uri.
        /// </summary>
        [JsonPropertyName("uri")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATUriJsonConverter))]
        public FishyFlip.Models.ATUri Uri { get; set; }

        /// <summary>
        /// Gets or sets the cid.
        /// </summary>
        [JsonPropertyName("cid")]
        [JsonRequired]
        public string Cid { get; set; }

        /// <summary>
        /// Gets or sets the blocker.
        /// <br/> <see cref="FishyFlip.Lexicon.App.Bsky.Actor.ProfileViewBasic"/> (app.bsky.actor.defs#profileViewBasic)
        /// </summary>
        [JsonPropertyName("blocker")]
        [JsonRequired]
        public FishyFlip.Lexicon.App.Bsky.Actor.ProfileViewBasic Blocker { get; set; }

        /// <summary>
        /// Gets or sets the record.
        /// <br/> <see cref="FishyFlip.Lexicon.App.Bsky.Graph.Block"/> (app.bsky.graph.block)
        /// </summary>
        [JsonPropertyName("record")]
        [JsonRequired]
        public FishyFlip.Lexicon.App.Bsky.Graph.Block Record { get; set; }

        /// <summary>
        /// Gets or sets the indexedAt.
        /// </summary>
        [JsonPropertyName("indexedAt")]
        [JsonRequired]
        public DateTime? IndexedAt { get; set; }

        public const string RecordType = "place.stream.defs#blockView";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.BlockView>)SourceGenerationContext.Default.PlaceStreamBlockView);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.BlockView>)SourceGenerationContext.Default.PlaceStreamBlockView);
        }

        public static new BlockView FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Place.Stream.BlockView>(json, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.BlockView>)SourceGenerationContext.Default.PlaceStreamBlockView)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new BlockView FromCBORObject(CBORObject obj)
        {
            return new BlockView(obj);
        }

        /// <inheritdoc/>
        public static BlockView Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<BlockView>(s, (JsonTypeInfo<BlockView>)SourceGenerationContext.Default.PlaceStreamBlockView)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out BlockView result)
        {
            result = JsonSerializer.Deserialize<BlockView>(s, (JsonTypeInfo<BlockView>)SourceGenerationContext.Default.PlaceStreamBlockView);
            return result != null;
        }
    }
}

