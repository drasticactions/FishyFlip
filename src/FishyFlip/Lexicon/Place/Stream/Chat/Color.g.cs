// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Place.Stream.Chat
{
    /// <summary>
    /// Customizations for the color of a user's name in chat
    /// </summary>
    public partial class Color : ATObject, ICBOREncodable<Color>, IJsonEncodable<Color>, IParsable<Color>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Color"/> class.
        /// </summary>
        /// <param name="red"></param>
        /// <param name="green"></param>
        /// <param name="blue"></param>
        public Color(long red = default, long green = default, long blue = default)
        {
            this.Red = red;
            this.Green = green;
            this.Blue = blue;
            this.Type = "place.stream.chat.profile#color";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Color"/> class.
        /// </summary>
        public Color()
        {
            this.Type = "place.stream.chat.profile#color";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Color"/> class.
        /// </summary>
        public Color(CBORObject obj)
        {
            if (obj["red"] is not null) this.Red = obj["red"].AsInt64Value();
            if (obj["green"] is not null) this.Green = obj["green"].AsInt64Value();
            if (obj["blue"] is not null) this.Blue = obj["blue"].AsInt64Value();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the red.
        /// </summary>
        [JsonPropertyName("red")]
        [JsonRequired]
        public long Red { get; set; }

        /// <summary>
        /// Gets or sets the green.
        /// </summary>
        [JsonPropertyName("green")]
        [JsonRequired]
        public long Green { get; set; }

        /// <summary>
        /// Gets or sets the blue.
        /// </summary>
        [JsonPropertyName("blue")]
        [JsonRequired]
        public long Blue { get; set; }

        public const string RecordType = "place.stream.chat.profile#color";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Chat.Color>)SourceGenerationContext.Default.PlaceStreamChatColor);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Chat.Color>)SourceGenerationContext.Default.PlaceStreamChatColor);
        }

        public static new Color FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Place.Stream.Chat.Color>(json, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Chat.Color>)SourceGenerationContext.Default.PlaceStreamChatColor)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Color FromCBORObject(CBORObject obj)
        {
            return new Color(obj);
        }

        /// <inheritdoc/>
        public static Color Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Color>(s, (JsonTypeInfo<Color>)SourceGenerationContext.Default.PlaceStreamChatColor)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Color result)
        {
            result = JsonSerializer.Deserialize<Color>(s, (JsonTypeInfo<Color>)SourceGenerationContext.Default.PlaceStreamChatColor);
            return result != null;
        }
    }
}

