// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Place.Stream.Chat
{
    /// <summary>
    /// Record containing customizations for a user's chat profile.
    /// </summary>
    public partial class Profile : ATObject, ICBOREncodable<Profile>, IJsonEncodable<Profile>, IParsable<Profile>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Profile"/> class.
        /// </summary>
        /// <param name="color">
        /// <see cref="FishyFlip.Lexicon.Place.Stream.Chat.Color"/> (place.stream.chat.profile#color)
        /// </param>
        public Profile(FishyFlip.Lexicon.Place.Stream.Chat.Color? color = default)
        {
            this.Color = color;
            this.Type = "place.stream.chat.profile";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Profile"/> class.
        /// </summary>
        public Profile()
        {
            this.Type = "place.stream.chat.profile";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Profile"/> class.
        /// </summary>
        public Profile(CBORObject obj)
        {
            if (obj["color"] is not null) this.Color = new FishyFlip.Lexicon.Place.Stream.Chat.Color(obj["color"]);
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the color.
        /// <br/> <see cref="FishyFlip.Lexicon.Place.Stream.Chat.Color"/> (place.stream.chat.profile#color)
        /// </summary>
        [JsonPropertyName("color")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public FishyFlip.Lexicon.Place.Stream.Chat.Color? Color { get; set; }

        public const string RecordType = "place.stream.chat.profile";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Chat.Profile>)SourceGenerationContext.Default.PlaceStreamChatProfile);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Chat.Profile>)SourceGenerationContext.Default.PlaceStreamChatProfile);
        }

        public static new Profile FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Place.Stream.Chat.Profile>(json, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.Chat.Profile>)SourceGenerationContext.Default.PlaceStreamChatProfile)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Profile FromCBORObject(CBORObject obj)
        {
            return new Profile(obj);
        }

        /// <inheritdoc/>
        public static Profile Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Profile>(s, (JsonTypeInfo<Profile>)SourceGenerationContext.Default.PlaceStreamChatProfile)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Profile result)
        {
            result = JsonSerializer.Deserialize<Profile>(s, (JsonTypeInfo<Profile>)SourceGenerationContext.Default.PlaceStreamChatProfile);
            return result != null;
        }
    }
}

