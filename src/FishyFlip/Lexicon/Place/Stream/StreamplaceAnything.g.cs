// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Place.Stream
{
    public partial class StreamplaceAnything : ATObject, ICBOREncodable<StreamplaceAnything>, IJsonEncodable<StreamplaceAnything>, IParsable<StreamplaceAnything>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="StreamplaceAnything"/> class.
        /// </summary>
        /// <param name="livestream">
        /// <br/> Union Types: <br/>
        /// #livestreamView <br/>
        /// #viewerCount <br/>
        /// <see cref="FishyFlip.Lexicon.Place.Stream.BlockView"/> (place.stream.defs#blockView) <br/>
        /// <see cref="FishyFlip.Lexicon.Place.Stream.Renditions"/> (place.stream.defs#renditions) <br/>
        /// <see cref="FishyFlip.Lexicon.Place.Stream.Rendition"/> (place.stream.defs#rendition) <br/>
        /// <see cref="FishyFlip.Lexicon.Place.Stream.Chat.MessageView"/> (place.stream.chat.defs#messageView) <br/>
        /// </param>
        public StreamplaceAnything(ATObject livestream = default)
        {
            this.Livestream = livestream;
            this.Type = "place.stream.livestream#streamplaceAnything";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="StreamplaceAnything"/> class.
        /// </summary>
        public StreamplaceAnything()
        {
            this.Type = "place.stream.livestream#streamplaceAnything";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="StreamplaceAnything"/> class.
        /// </summary>
        public StreamplaceAnything(CBORObject obj)
        {
            if (obj["livestream"] is not null) this.Livestream = obj["livestream"].ToATObject();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the livestream.
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Place.Stream.LivestreamView"/> (place.stream.livestream#livestreamView) <br/>
        /// <see cref="FishyFlip.Lexicon.Place.Stream.ViewerCount"/> (place.stream.livestream#viewerCount) <br/>
        /// <see cref="FishyFlip.Lexicon.Place.Stream.BlockView"/> (place.stream.defs#blockView) <br/>
        /// <see cref="FishyFlip.Lexicon.Place.Stream.Renditions"/> (place.stream.defs#renditions) <br/>
        /// <see cref="FishyFlip.Lexicon.Place.Stream.Rendition"/> (place.stream.defs#rendition) <br/>
        /// <see cref="FishyFlip.Lexicon.Place.Stream.Chat.MessageView"/> (place.stream.chat.defs#messageView) <br/>
        /// </summary>
        [JsonPropertyName("livestream")]
        [JsonRequired]
        public ATObject Livestream { get; set; }

        public const string RecordType = "place.stream.livestream#streamplaceAnything";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.StreamplaceAnything>)SourceGenerationContext.Default.PlaceStreamStreamplaceAnything);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.StreamplaceAnything>)SourceGenerationContext.Default.PlaceStreamStreamplaceAnything);
        }

        public static new StreamplaceAnything FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Place.Stream.StreamplaceAnything>(json, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.StreamplaceAnything>)SourceGenerationContext.Default.PlaceStreamStreamplaceAnything)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new StreamplaceAnything FromCBORObject(CBORObject obj)
        {
            return new StreamplaceAnything(obj);
        }

        /// <inheritdoc/>
        public static StreamplaceAnything Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<StreamplaceAnything>(s, (JsonTypeInfo<StreamplaceAnything>)SourceGenerationContext.Default.PlaceStreamStreamplaceAnything)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out StreamplaceAnything result)
        {
            result = JsonSerializer.Deserialize<StreamplaceAnything>(s, (JsonTypeInfo<StreamplaceAnything>)SourceGenerationContext.Default.PlaceStreamStreamplaceAnything);
            return result != null;
        }
    }
}

