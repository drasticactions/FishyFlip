// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Place.Stream
{
    public partial class SegmentView : ATObject, ICBOREncodable<SegmentView>, IJsonEncodable<SegmentView>, IParsable<SegmentView>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentView"/> class.
        /// </summary>
        /// <param name="cid"></param>
        /// <param name="record"></param>
        public SegmentView(string cid = default, ATObject record = default)
        {
            this.Cid = cid;
            this.Record = record;
            this.Type = "place.stream.segment#segmentView";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentView"/> class.
        /// </summary>
        public SegmentView()
        {
            this.Type = "place.stream.segment#segmentView";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentView"/> class.
        /// </summary>
        public SegmentView(CBORObject obj)
        {
            if (obj["cid"] is not null) this.Cid = obj["cid"].AsString();
            if (obj["record"] is not null) this.Record = obj["record"].ToATObject();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the cid.
        /// </summary>
        [JsonPropertyName("cid")]
        [JsonRequired]
        public string Cid { get; set; }

        /// <summary>
        /// Gets or sets the record.
        /// </summary>
        [JsonPropertyName("record")]
        [JsonRequired]
        public ATObject Record { get; set; }

        public const string RecordType = "place.stream.segment#segmentView";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.SegmentView>)SourceGenerationContext.Default.PlaceStreamSegmentView);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.SegmentView>)SourceGenerationContext.Default.PlaceStreamSegmentView);
        }

        public static new SegmentView FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Place.Stream.SegmentView>(json, (JsonTypeInfo<FishyFlip.Lexicon.Place.Stream.SegmentView>)SourceGenerationContext.Default.PlaceStreamSegmentView)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new SegmentView FromCBORObject(CBORObject obj)
        {
            return new SegmentView(obj);
        }

        /// <inheritdoc/>
        public static SegmentView Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<SegmentView>(s, (JsonTypeInfo<SegmentView>)SourceGenerationContext.Default.PlaceStreamSegmentView)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out SegmentView result)
        {
            result = JsonSerializer.Deserialize<SegmentView>(s, (JsonTypeInfo<SegmentView>)SourceGenerationContext.Default.PlaceStreamSegmentView);
            return result != null;
        }
    }
}

