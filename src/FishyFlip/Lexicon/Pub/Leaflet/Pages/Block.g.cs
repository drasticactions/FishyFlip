// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Pub.Leaflet.Pages
{
    public partial class Block : ATObject, ICBOREncodable<Block>, IJsonEncodable<Block>, IParsable<Block>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Block"/> class.
        /// </summary>
        /// <param name="block">
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Pub.Leaflet.Blocks.Text"/> (pub.leaflet.blocks.text) <br/>
        /// <see cref="FishyFlip.Lexicon.Pub.Leaflet.Blocks.Header"/> (pub.leaflet.blocks.header) <br/>
        /// <see cref="FishyFlip.Lexicon.Pub.Leaflet.Blocks.BlocksImage"/> (pub.leaflet.blocks.image) <br/>
        /// <see cref="FishyFlip.Lexicon.Pub.Leaflet.Blocks.UnorderedList"/> (pub.leaflet.blocks.unorderedList) <br/>
        /// </param>
        /// <param name="alignment">
        /// <br/> Known Values: <br/>
        /// textAlignLeft -  <br/>
        /// textAlignCenter -  <br/>
        /// textAlignRight -  <br/>
        /// </param>
        public Block(ATObject block = default, string? alignment = default)
        {
            this.BlockValue = block;
            this.Alignment = alignment;
            this.Type = "pub.leaflet.pages.linearDocument#block";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Block"/> class.
        /// </summary>
        public Block()
        {
            this.Type = "pub.leaflet.pages.linearDocument#block";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Block"/> class.
        /// </summary>
        public Block(CBORObject obj)
        {
            if (obj["block"] is not null) this.BlockValue = obj["block"].ToATObject();
            if (obj["alignment"] is not null) this.Alignment = obj["alignment"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the block.
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Pub.Leaflet.Blocks.Text"/> (pub.leaflet.blocks.text) <br/>
        /// <see cref="FishyFlip.Lexicon.Pub.Leaflet.Blocks.Header"/> (pub.leaflet.blocks.header) <br/>
        /// <see cref="FishyFlip.Lexicon.Pub.Leaflet.Blocks.BlocksImage"/> (pub.leaflet.blocks.image) <br/>
        /// <see cref="FishyFlip.Lexicon.Pub.Leaflet.Blocks.UnorderedList"/> (pub.leaflet.blocks.unorderedList) <br/>
        /// </summary>
        [JsonPropertyName("block")]
        [JsonRequired]
        public ATObject BlockValue { get; set; }

        /// <summary>
        /// Gets or sets the alignment.
        /// <br/> Known Values: <br/>
        /// textAlignLeft -  <br/>
        /// textAlignCenter -  <br/>
        /// textAlignRight -  <br/>
        /// </summary>
        [JsonPropertyName("alignment")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Alignment { get; set; }

        public const string RecordType = "pub.leaflet.pages.linearDocument#block";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Pages.Block>)SourceGenerationContext.Default.PubLeafletPagesBlock);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Pages.Block>)SourceGenerationContext.Default.PubLeafletPagesBlock);
        }

        public static new Block FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Pub.Leaflet.Pages.Block>(json, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Pages.Block>)SourceGenerationContext.Default.PubLeafletPagesBlock)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Block FromCBORObject(CBORObject obj)
        {
            return new Block(obj);
        }

        /// <inheritdoc/>
        public static Block Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Block>(s, (JsonTypeInfo<Block>)SourceGenerationContext.Default.PubLeafletPagesBlock)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Block result)
        {
            result = JsonSerializer.Deserialize<Block>(s, (JsonTypeInfo<Block>)SourceGenerationContext.Default.PubLeafletPagesBlock);
            return result != null;
        }
    }
}

