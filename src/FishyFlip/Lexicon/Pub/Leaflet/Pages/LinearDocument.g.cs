// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Pub.Leaflet.Pages
{
    public partial class LinearDocument : ATObject, ICBOREncodable<LinearDocument>, IJsonEncodable<LinearDocument>, IParsable<LinearDocument>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="LinearDocument"/> class.
        /// </summary>
        /// <param name="blocks"></param>
        public LinearDocument(List<FishyFlip.Lexicon.Pub.Leaflet.Pages.Block>? blocks = default)
        {
            this.Blocks = blocks;
            this.Type = "pub.leaflet.pages.linearDocument";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="LinearDocument"/> class.
        /// </summary>
        public LinearDocument()
        {
            this.Type = "pub.leaflet.pages.linearDocument";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="LinearDocument"/> class.
        /// </summary>
        public LinearDocument(CBORObject obj)
        {
            if (obj["blocks"] is not null) this.Blocks = obj["blocks"].Values.Select(n =>new FishyFlip.Lexicon.Pub.Leaflet.Pages.Block(n)).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the blocks.
        /// </summary>
        [JsonPropertyName("blocks")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<FishyFlip.Lexicon.Pub.Leaflet.Pages.Block>? Blocks { get; set; }

        public const string RecordType = "pub.leaflet.pages.linearDocument";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Pages.LinearDocument>)SourceGenerationContext.Default.PubLeafletPagesLinearDocument);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Pages.LinearDocument>)SourceGenerationContext.Default.PubLeafletPagesLinearDocument);
        }

        public static new LinearDocument FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Pub.Leaflet.Pages.LinearDocument>(json, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Pages.LinearDocument>)SourceGenerationContext.Default.PubLeafletPagesLinearDocument)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new LinearDocument FromCBORObject(CBORObject obj)
        {
            return new LinearDocument(obj);
        }

        /// <inheritdoc/>
        public static LinearDocument Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<LinearDocument>(s, (JsonTypeInfo<LinearDocument>)SourceGenerationContext.Default.PubLeafletPagesLinearDocument)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out LinearDocument result)
        {
            result = JsonSerializer.Deserialize<LinearDocument>(s, (JsonTypeInfo<LinearDocument>)SourceGenerationContext.Default.PubLeafletPagesLinearDocument);
            return result != null;
        }
    }
}

