// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Pub.Leaflet.Richtext
{
    /// <summary>
    /// Facet feature for underline markup
    /// </summary>
    public partial class Underline : ATObject, ICBOREncodable<Underline>, IJsonEncodable<Underline>, IParsable<Underline>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Underline"/> class.
        /// </summary>
        public Underline()
        {
            this.Type = "pub.leaflet.richtext.facet#underline";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Underline"/> class.
        /// </summary>
        public Underline(CBORObject obj)
        {
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        public const string RecordType = "pub.leaflet.richtext.facet#underline";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Richtext.Underline>)SourceGenerationContext.Default.PubLeafletRichtextUnderline);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Richtext.Underline>)SourceGenerationContext.Default.PubLeafletRichtextUnderline);
        }

        public static new Underline FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Pub.Leaflet.Richtext.Underline>(json, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Richtext.Underline>)SourceGenerationContext.Default.PubLeafletRichtextUnderline)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Underline FromCBORObject(CBORObject obj)
        {
            return new Underline(obj);
        }

        /// <inheritdoc/>
        public static Underline Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Underline>(s, (JsonTypeInfo<Underline>)SourceGenerationContext.Default.PubLeafletRichtextUnderline)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Underline result)
        {
            result = JsonSerializer.Deserialize<Underline>(s, (JsonTypeInfo<Underline>)SourceGenerationContext.Default.PubLeafletRichtextUnderline);
            return result != null;
        }
    }
}

