// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Pub.Leaflet.Richtext
{
    /// <summary>
    /// Facet feature for italic text
    /// </summary>
    public partial class Italic : ATObject, ICBOREncodable<Italic>, IJsonEncodable<Italic>, IParsable<Italic>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Italic"/> class.
        /// </summary>
        public Italic()
        {
            this.Type = "pub.leaflet.richtext.facet#italic";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Italic"/> class.
        /// </summary>
        public Italic(CBORObject obj)
        {
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        public const string RecordType = "pub.leaflet.richtext.facet#italic";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Richtext.Italic>)SourceGenerationContext.Default.PubLeafletRichtextItalic);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Richtext.Italic>)SourceGenerationContext.Default.PubLeafletRichtextItalic);
        }

        public static new Italic FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Pub.Leaflet.Richtext.Italic>(json, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Richtext.Italic>)SourceGenerationContext.Default.PubLeafletRichtextItalic)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Italic FromCBORObject(CBORObject obj)
        {
            return new Italic(obj);
        }

        /// <inheritdoc/>
        public static Italic Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Italic>(s, (JsonTypeInfo<Italic>)SourceGenerationContext.Default.PubLeafletRichtextItalic)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Italic result)
        {
            result = JsonSerializer.Deserialize<Italic>(s, (JsonTypeInfo<Italic>)SourceGenerationContext.Default.PubLeafletRichtextItalic);
            return result != null;
        }
    }
}

