// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Pub.Leaflet
{
    /// <summary>
    /// Record containing a document
    /// </summary>
    public partial class Document : ATObject, ICBOREncodable<Document>, IJsonEncodable<Document>, IParsable<Document>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Document"/> class.
        /// </summary>
        /// <param name="title"></param>
        /// <param name="publication"></param>
        /// <param name="author"></param>
        /// <param name="pages">
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Pub.Leaflet.Pages.LinearDocument"/> (pub.leaflet.pages.linearDocument) <br/>
        /// </param>
        /// <param name="description"></param>
        /// <param name="publishedAt"></param>
        public Document(string? title, FishyFlip.Models.ATUri? publication, FishyFlip.Models.ATIdentifier? author, List<FishyFlip.Lexicon.Pub.Leaflet.Pages.LinearDocument>? pages, string? description = default, DateTime? publishedAt = default)
        {
            this.Title = title;
            this.Description = description;
            this.PublishedAt = publishedAt;
            this.Publication = publication;
            this.Author = author;
            this.Pages = pages;
            this.Type = "pub.leaflet.document";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Document"/> class.
        /// </summary>
        public Document()
        {
            this.Type = "pub.leaflet.document";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Document"/> class.
        /// </summary>
        public Document(CBORObject obj)
        {
            if (obj["title"] is not null) this.Title = obj["title"].AsString();
            if (obj["description"] is not null) this.Description = obj["description"].AsString();
            if (obj["publishedAt"] is not null) this.PublishedAt = obj["publishedAt"].ToDateTime();
            if (obj["publication"] is not null) this.Publication = obj["publication"].ToATUri();
            if (obj["author"] is not null) this.Author = obj["author"].ToATIdentifier();
            if (obj["pages"] is not null) this.Pages = obj["pages"].Values.Select(n =>new FishyFlip.Lexicon.Pub.Leaflet.Pages.LinearDocument(n)).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the title.
        /// </summary>
        [JsonPropertyName("title")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Title { get; set; }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        [JsonPropertyName("description")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or sets the publishedAt.
        /// </summary>
        [JsonPropertyName("publishedAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? PublishedAt { get; set; }

        /// <summary>
        /// Gets or sets the publication.
        /// </summary>
        [JsonPropertyName("publication")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATUriJsonConverter))]
        public FishyFlip.Models.ATUri? Publication { get; set; }

        /// <summary>
        /// Gets or sets the author.
        /// </summary>
        [JsonPropertyName("author")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATIdentifierJsonConverter))]
        public FishyFlip.Models.ATIdentifier? Author { get; set; }

        /// <summary>
        /// Gets or sets the pages.
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Pub.Leaflet.Pages.LinearDocument"/> (pub.leaflet.pages.linearDocument) <br/>
        /// </summary>
        [JsonPropertyName("pages")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<FishyFlip.Lexicon.Pub.Leaflet.Pages.LinearDocument>? Pages { get; set; }

        public const string RecordType = "pub.leaflet.document";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Document>)SourceGenerationContext.Default.PubLeafletDocument);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Document>)SourceGenerationContext.Default.PubLeafletDocument);
        }

        public static new Document FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Pub.Leaflet.Document>(json, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Document>)SourceGenerationContext.Default.PubLeafletDocument)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Document FromCBORObject(CBORObject obj)
        {
            return new Document(obj);
        }

        /// <inheritdoc/>
        public static Document Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Document>(s, (JsonTypeInfo<Document>)SourceGenerationContext.Default.PubLeafletDocument)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Document result)
        {
            result = JsonSerializer.Deserialize<Document>(s, (JsonTypeInfo<Document>)SourceGenerationContext.Default.PubLeafletDocument);
            return result != null;
        }
    }
}

