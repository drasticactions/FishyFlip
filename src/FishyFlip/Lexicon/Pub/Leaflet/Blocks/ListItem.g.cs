// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Pub.Leaflet.Blocks
{
    public partial class ListItem : ATObject, ICBOREncodable<ListItem>, IJsonEncodable<ListItem>, IParsable<ListItem>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ListItem"/> class.
        /// </summary>
        /// <param name="content">
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Pub.Leaflet.Blocks.Text"/> (pub.leaflet.blocks.text) <br/>
        /// <see cref="FishyFlip.Lexicon.Pub.Leaflet.Blocks.Header"/> (pub.leaflet.blocks.header) <br/>
        /// <see cref="FishyFlip.Lexicon.Pub.Leaflet.Blocks.BlocksImage"/> (pub.leaflet.blocks.image) <br/>
        /// </param>
        /// <param name="children"></param>
        public ListItem(ATObject content = default, List<FishyFlip.Lexicon.Pub.Leaflet.Blocks.ListItem>? children = default)
        {
            this.Content = content;
            this.Children = children;
            this.Type = "pub.leaflet.blocks.unorderedList#listItem";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ListItem"/> class.
        /// </summary>
        public ListItem()
        {
            this.Type = "pub.leaflet.blocks.unorderedList#listItem";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ListItem"/> class.
        /// </summary>
        public ListItem(CBORObject obj)
        {
            if (obj["content"] is not null) this.Content = obj["content"].ToATObject();
            if (obj["children"] is not null) this.Children = obj["children"].Values.Select(n =>new FishyFlip.Lexicon.Pub.Leaflet.Blocks.ListItem(n)).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the content.
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Pub.Leaflet.Blocks.Text"/> (pub.leaflet.blocks.text) <br/>
        /// <see cref="FishyFlip.Lexicon.Pub.Leaflet.Blocks.Header"/> (pub.leaflet.blocks.header) <br/>
        /// <see cref="FishyFlip.Lexicon.Pub.Leaflet.Blocks.BlocksImage"/> (pub.leaflet.blocks.image) <br/>
        /// </summary>
        [JsonPropertyName("content")]
        [JsonRequired]
        public ATObject Content { get; set; }

        /// <summary>
        /// Gets or sets the children.
        /// </summary>
        [JsonPropertyName("children")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<FishyFlip.Lexicon.Pub.Leaflet.Blocks.ListItem>? Children { get; set; }

        public const string RecordType = "pub.leaflet.blocks.unorderedList#listItem";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Blocks.ListItem>)SourceGenerationContext.Default.PubLeafletBlocksListItem);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Blocks.ListItem>)SourceGenerationContext.Default.PubLeafletBlocksListItem);
        }

        public static new ListItem FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Pub.Leaflet.Blocks.ListItem>(json, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Blocks.ListItem>)SourceGenerationContext.Default.PubLeafletBlocksListItem)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new ListItem FromCBORObject(CBORObject obj)
        {
            return new ListItem(obj);
        }

        /// <inheritdoc/>
        public static ListItem Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<ListItem>(s, (JsonTypeInfo<ListItem>)SourceGenerationContext.Default.PubLeafletBlocksListItem)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out ListItem result)
        {
            result = JsonSerializer.Deserialize<ListItem>(s, (JsonTypeInfo<ListItem>)SourceGenerationContext.Default.PubLeafletBlocksListItem);
            return result != null;
        }
    }
}

