// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Pub.Leaflet.Blocks
{
    public partial class Text : ATObject, ICBOREncodable<Text>, IJsonEncodable<Text>, IParsable<Text>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Text"/> class.
        /// </summary>
        /// <param name="plaintext"></param>
        /// <param name="facets"></param>
        public Text(string plaintext = default, List<FishyFlip.Lexicon.Pub.Leaflet.Richtext.Facet>? facets = default)
        {
            this.Plaintext = plaintext;
            this.Facets = facets;
            this.Type = "pub.leaflet.blocks.text";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Text"/> class.
        /// </summary>
        public Text()
        {
            this.Type = "pub.leaflet.blocks.text";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Text"/> class.
        /// </summary>
        public Text(CBORObject obj)
        {
            if (obj["plaintext"] is not null) this.Plaintext = obj["plaintext"].AsString();
            if (obj["facets"] is not null) this.Facets = obj["facets"].Values.Select(n =>new FishyFlip.Lexicon.Pub.Leaflet.Richtext.Facet(n)).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the plaintext.
        /// </summary>
        [JsonPropertyName("plaintext")]
        [JsonRequired]
        public string Plaintext { get; set; }

        /// <summary>
        /// Gets or sets the facets.
        /// </summary>
        [JsonPropertyName("facets")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<FishyFlip.Lexicon.Pub.Leaflet.Richtext.Facet>? Facets { get; set; }

        public const string RecordType = "pub.leaflet.blocks.text";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Blocks.Text>)SourceGenerationContext.Default.PubLeafletBlocksText);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Blocks.Text>)SourceGenerationContext.Default.PubLeafletBlocksText);
        }

        public static new Text FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Pub.Leaflet.Blocks.Text>(json, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Blocks.Text>)SourceGenerationContext.Default.PubLeafletBlocksText)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Text FromCBORObject(CBORObject obj)
        {
            return new Text(obj);
        }

        /// <inheritdoc/>
        public static Text Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Text>(s, (JsonTypeInfo<Text>)SourceGenerationContext.Default.PubLeafletBlocksText)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Text result)
        {
            result = JsonSerializer.Deserialize<Text>(s, (JsonTypeInfo<Text>)SourceGenerationContext.Default.PubLeafletBlocksText);
            return result != null;
        }
    }
}

