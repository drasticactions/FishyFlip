// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Pub.Leaflet.Blocks
{
    public partial class Header : ATObject, ICBOREncodable<Header>, IJsonEncodable<Header>, IParsable<Header>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Header"/> class.
        /// </summary>
        /// <param name="level"></param>
        /// <param name="plaintext"></param>
        /// <param name="facets"></param>
        public Header(long? level = default, string plaintext = default, List<FishyFlip.Lexicon.Pub.Leaflet.Richtext.Facet>? facets = default)
        {
            this.Level = level;
            this.Plaintext = plaintext;
            this.Facets = facets;
            this.Type = "pub.leaflet.blocks.header";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Header"/> class.
        /// </summary>
        public Header()
        {
            this.Type = "pub.leaflet.blocks.header";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Header"/> class.
        /// </summary>
        public Header(CBORObject obj)
        {
            if (obj["level"] is not null) this.Level = obj["level"].AsInt64Value();
            if (obj["plaintext"] is not null) this.Plaintext = obj["plaintext"].AsString();
            if (obj["facets"] is not null) this.Facets = obj["facets"].Values.Select(n =>new FishyFlip.Lexicon.Pub.Leaflet.Richtext.Facet(n)).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the level.
        /// </summary>
        [JsonPropertyName("level")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public long? Level { get; set; }

        /// <summary>
        /// Gets or sets the plaintext.
        /// </summary>
        [JsonPropertyName("plaintext")]
        [JsonRequired]
        public string Plaintext { get; set; }

        /// <summary>
        /// Gets or sets the facets.
        /// </summary>
        [JsonPropertyName("facets")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<FishyFlip.Lexicon.Pub.Leaflet.Richtext.Facet>? Facets { get; set; }

        public const string RecordType = "pub.leaflet.blocks.header";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Blocks.Header>)SourceGenerationContext.Default.PubLeafletBlocksHeader);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Blocks.Header>)SourceGenerationContext.Default.PubLeafletBlocksHeader);
        }

        public static new Header FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Pub.Leaflet.Blocks.Header>(json, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Blocks.Header>)SourceGenerationContext.Default.PubLeafletBlocksHeader)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Header FromCBORObject(CBORObject obj)
        {
            return new Header(obj);
        }

        /// <inheritdoc/>
        public static Header Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Header>(s, (JsonTypeInfo<Header>)SourceGenerationContext.Default.PubLeafletBlocksHeader)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Header result)
        {
            result = JsonSerializer.Deserialize<Header>(s, (JsonTypeInfo<Header>)SourceGenerationContext.Default.PubLeafletBlocksHeader);
            return result != null;
        }
    }
}

