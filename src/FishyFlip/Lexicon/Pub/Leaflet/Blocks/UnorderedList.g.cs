// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Pub.Leaflet.Blocks
{
    public partial class UnorderedList : ATObject, ICBOREncodable<UnorderedList>, IJsonEncodable<UnorderedList>, IParsable<UnorderedList>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="UnorderedList"/> class.
        /// </summary>
        /// <param name="children"></param>
        public UnorderedList(List<FishyFlip.Lexicon.Pub.Leaflet.Blocks.ListItem> children = default)
        {
            this.Children = children;
            this.Type = "pub.leaflet.blocks.unorderedList";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="UnorderedList"/> class.
        /// </summary>
        public UnorderedList()
        {
            this.Type = "pub.leaflet.blocks.unorderedList";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="UnorderedList"/> class.
        /// </summary>
        public UnorderedList(CBORObject obj)
        {
            if (obj["children"] is not null) this.Children = obj["children"].Values.Select(n =>new FishyFlip.Lexicon.Pub.Leaflet.Blocks.ListItem(n)).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the children.
        /// </summary>
        [JsonPropertyName("children")]
        [JsonRequired]
        public List<FishyFlip.Lexicon.Pub.Leaflet.Blocks.ListItem> Children { get; set; }

        public const string RecordType = "pub.leaflet.blocks.unorderedList";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Blocks.UnorderedList>)SourceGenerationContext.Default.PubLeafletBlocksUnorderedList);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Blocks.UnorderedList>)SourceGenerationContext.Default.PubLeafletBlocksUnorderedList);
        }

        public static new UnorderedList FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Pub.Leaflet.Blocks.UnorderedList>(json, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Blocks.UnorderedList>)SourceGenerationContext.Default.PubLeafletBlocksUnorderedList)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new UnorderedList FromCBORObject(CBORObject obj)
        {
            return new UnorderedList(obj);
        }

        /// <inheritdoc/>
        public static UnorderedList Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<UnorderedList>(s, (JsonTypeInfo<UnorderedList>)SourceGenerationContext.Default.PubLeafletBlocksUnorderedList)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out UnorderedList result)
        {
            result = JsonSerializer.Deserialize<UnorderedList>(s, (JsonTypeInfo<UnorderedList>)SourceGenerationContext.Default.PubLeafletBlocksUnorderedList);
            return result != null;
        }
    }
}

