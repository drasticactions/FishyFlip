// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Pub.Leaflet
{
    /// <summary>
    /// Record declaring a publication
    /// </summary>
    public partial class Publication : ATObject, ICBOREncodable<Publication>, IJsonEncodable<Publication>, IParsable<Publication>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Publication"/> class.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="base_path"></param>
        /// <param name="description"></param>
        /// <param name="icon"></param>
        public Publication(string? name, string? base_path = default, string? description = default, Blob? icon = default)
        {
            this.Name = name;
            this.BasePath = base_path;
            this.Description = description;
            this.Icon = icon;
            this.Type = "pub.leaflet.publication";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Publication"/> class.
        /// </summary>
        public Publication()
        {
            this.Type = "pub.leaflet.publication";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Publication"/> class.
        /// </summary>
        public Publication(CBORObject obj)
        {
            if (obj["name"] is not null) this.Name = obj["name"].AsString();
            if (obj["base_path"] is not null) this.BasePath = obj["base_path"].AsString();
            if (obj["description"] is not null) this.Description = obj["description"].AsString();
            if (obj["icon"] is not null) this.Icon = new FishyFlip.Models.Blob(obj["icon"]);
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [JsonPropertyName("name")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Name { get; set; }

        /// <summary>
        /// Gets or sets the base_path.
        /// </summary>
        [JsonPropertyName("base_path")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? BasePath { get; set; }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        [JsonPropertyName("description")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or sets the icon.
        /// </summary>
        [JsonPropertyName("icon")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Blob? Icon { get; set; }

        public const string RecordType = "pub.leaflet.publication";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Publication>)SourceGenerationContext.Default.PubLeafletPublication);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Publication>)SourceGenerationContext.Default.PubLeafletPublication);
        }

        public static new Publication FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Pub.Leaflet.Publication>(json, (JsonTypeInfo<FishyFlip.Lexicon.Pub.Leaflet.Publication>)SourceGenerationContext.Default.PubLeafletPublication)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Publication FromCBORObject(CBORObject obj)
        {
            return new Publication(obj);
        }

        /// <inheritdoc/>
        public static Publication Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Publication>(s, (JsonTypeInfo<Publication>)SourceGenerationContext.Default.PubLeafletPublication)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Publication result)
        {
            result = JsonSerializer.Deserialize<Publication>(s, (JsonTypeInfo<Publication>)SourceGenerationContext.Default.PubLeafletPublication);
            return result != null;
        }
    }
}

