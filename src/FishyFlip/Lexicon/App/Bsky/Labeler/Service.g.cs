// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.App.Bsky.Labeler
{
    /// <summary>
    /// A declaration of the existence of labeler service.
    /// </summary>
    public partial class Service : ATObject, ICBOREncodable<Service>, IJsonEncodable<Service>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Service"/> class.
        /// </summary>
        /// <param name="policies">
        /// <see cref="FishyFlip.Lexicon.App.Bsky.Labeler.LabelerPolicies"/> (app.bsky.labeler.defs#labelerPolicies)
        /// </param>
        /// <param name="labels">
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Com.Atproto.Label.SelfLabels"/> (com.atproto.label.defs#selfLabels) <br/>
        /// </param>
        /// <param name="createdAt"></param>
        /// <param name="reasonTypes">The set of report reason 'codes' which are in-scope for this service to review and action. These usually align to policy categories. If not defined (distinct from empty array), all reason types are allowed.</param>
        /// <param name="subjectTypes">The set of subject types (account, record, etc) this service accepts reports on.</param>
        /// <param name="subjectCollections">Set of record types (collection NSIDs) which can be reported to this service. If not defined (distinct from empty array), default is any record type.</param>
        public Service(FishyFlip.Lexicon.App.Bsky.Labeler.LabelerPolicies? policies, FishyFlip.Lexicon.Com.Atproto.Label.SelfLabels? labels = default, DateTime? createdAt = default, List<string>? reasonTypes = default, List<string>? subjectTypes = default, List<string>? subjectCollections = default)
        {
            this.Policies = policies;
            this.Labels = labels;
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.ReasonTypes = reasonTypes;
            this.SubjectTypes = subjectTypes;
            this.SubjectCollections = subjectCollections;
            this.Type = "app.bsky.labeler.service";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Service"/> class.
        /// </summary>
        public Service()
        {
            this.Type = "app.bsky.labeler.service";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Service"/> class.
        /// </summary>
        public Service(CBORObject obj)
        {
            if (obj["policies"] is not null) this.Policies = new FishyFlip.Lexicon.App.Bsky.Labeler.LabelerPolicies(obj["policies"]);
            if (obj["labels"] is not null) this.Labels = new FishyFlip.Lexicon.Com.Atproto.Label.SelfLabels(obj["labels"]);
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["reasonTypes"] is not null) this.ReasonTypes = obj["reasonTypes"].Values.Select(n =>n.AsString()).ToList();
            if (obj["subjectTypes"] is not null) this.SubjectTypes = obj["subjectTypes"].Values.Select(n =>n.AsString()).ToList();
            if (obj["subjectCollections"] is not null) this.SubjectCollections = obj["subjectCollections"].Values.Select(n =>n.AsString()).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the policies.
        /// <br/> <see cref="FishyFlip.Lexicon.App.Bsky.Labeler.LabelerPolicies"/> (app.bsky.labeler.defs#labelerPolicies)
        /// </summary>
        [JsonPropertyName("policies")]
        public FishyFlip.Lexicon.App.Bsky.Labeler.LabelerPolicies? Policies { get; set; }

        /// <summary>
        /// Gets or sets the labels.
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Com.Atproto.Label.SelfLabels"/> (com.atproto.label.defs#selfLabels) <br/>
        /// </summary>
        [JsonPropertyName("labels")]
        public FishyFlip.Lexicon.Com.Atproto.Label.SelfLabels? Labels { get; set; }

        /// <summary>
        /// Gets or sets the createdAt.
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;

        /// <summary>
        /// Gets or sets the reasonTypes.
        /// <br/> The set of report reason 'codes' which are in-scope for this service to review and action. These usually align to policy categories. If not defined (distinct from empty array), all reason types are allowed.
        /// </summary>
        [JsonPropertyName("reasonTypes")]
        public List<string>? ReasonTypes { get; set; }

        /// <summary>
        /// Gets or sets the subjectTypes.
        /// <br/> The set of subject types (account, record, etc) this service accepts reports on.
        /// </summary>
        [JsonPropertyName("subjectTypes")]
        public List<string>? SubjectTypes { get; set; }

        /// <summary>
        /// Gets or sets the subjectCollections.
        /// <br/> Set of record types (collection NSIDs) which can be reported to this service. If not defined (distinct from empty array), default is any record type.
        /// </summary>
        [JsonPropertyName("subjectCollections")]
        public List<string>? SubjectCollections { get; set; }

        public const string RecordType = "app.bsky.labeler.service";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Labeler.Service>)SourceGenerationContext.Default.AppBskyLabelerService);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Labeler.Service>)SourceGenerationContext.Default.AppBskyLabelerService);
        }

        public static new Service FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.App.Bsky.Labeler.Service>(json, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Labeler.Service>)SourceGenerationContext.Default.AppBskyLabelerService)!;
        }

         /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

         /// <inheritdoc/>
        public static new Service FromCBORObject(CBORObject obj)
        {
            return new Service(obj);
        }

    }
}

