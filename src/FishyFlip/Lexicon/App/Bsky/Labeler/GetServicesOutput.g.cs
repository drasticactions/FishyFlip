// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.App.Bsky.Labeler
{
    public partial class GetServicesOutput : ATObject, ICBOREncodable<GetServicesOutput>, IJsonEncodable<GetServicesOutput>, IParsable<GetServicesOutput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="GetServicesOutput"/> class.
        /// </summary>
        /// <param name="views">
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.App.Bsky.Labeler.LabelerView"/> (app.bsky.labeler.defs#labelerView) <br/>
        /// <see cref="FishyFlip.Lexicon.App.Bsky.Labeler.LabelerViewDetailed"/> (app.bsky.labeler.defs#labelerViewDetailed) <br/>
        /// </param>
        public GetServicesOutput(List<ATObject> views = default)
        {
            this.Views = views;
            this.Type = "app.bsky.labeler.getServices#GetServicesOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetServicesOutput"/> class.
        /// </summary>
        public GetServicesOutput()
        {
            this.Type = "app.bsky.labeler.getServices#GetServicesOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetServicesOutput"/> class.
        /// </summary>
        public GetServicesOutput(CBORObject obj)
        {
            if (obj["views"] is not null) this.Views = obj["views"].Values.Select(n =>n.ToATObject()).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the views.
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.App.Bsky.Labeler.LabelerView"/> (app.bsky.labeler.defs#labelerView) <br/>
        /// <see cref="FishyFlip.Lexicon.App.Bsky.Labeler.LabelerViewDetailed"/> (app.bsky.labeler.defs#labelerViewDetailed) <br/>
        /// </summary>
        [JsonPropertyName("views")]
        [JsonRequired]
        public List<ATObject> Views { get; set; }

        public const string RecordType = "app.bsky.labeler.getServices#GetServicesOutput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Labeler.GetServicesOutput>)SourceGenerationContext.Default.AppBskyLabelerGetServicesOutput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Labeler.GetServicesOutput>)SourceGenerationContext.Default.AppBskyLabelerGetServicesOutput);
        }

        public static new GetServicesOutput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.App.Bsky.Labeler.GetServicesOutput>(json, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Labeler.GetServicesOutput>)SourceGenerationContext.Default.AppBskyLabelerGetServicesOutput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new GetServicesOutput FromCBORObject(CBORObject obj)
        {
            return new GetServicesOutput(obj);
        }

        /// <inheritdoc/>
        public static GetServicesOutput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<GetServicesOutput>(s, (JsonTypeInfo<GetServicesOutput>)SourceGenerationContext.Default.AppBskyLabelerGetServicesOutput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out GetServicesOutput result)
        {
            result = JsonSerializer.Deserialize<GetServicesOutput>(s, (JsonTypeInfo<GetServicesOutput>)SourceGenerationContext.Default.AppBskyLabelerGetServicesOutput);
            return result != null;
        }
    }
}

