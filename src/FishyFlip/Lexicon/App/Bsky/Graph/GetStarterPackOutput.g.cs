// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.App.Bsky.Graph
{
    public partial class GetStarterPackOutput : ATObject, ICBOREncodable<GetStarterPackOutput>, IJsonEncodable<GetStarterPackOutput>, IParsable<GetStarterPackOutput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="GetStarterPackOutput"/> class.
        /// </summary>
        /// <param name="starterPack">
        /// <see cref="FishyFlip.Lexicon.App.Bsky.Graph.StarterPackView"/> (app.bsky.graph.defs#starterPackView)
        /// </param>
        public GetStarterPackOutput(FishyFlip.Lexicon.App.Bsky.Graph.StarterPackView starterPack = default)
        {
            this.StarterPack = starterPack;
            this.Type = "app.bsky.graph.getStarterPack#GetStarterPackOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetStarterPackOutput"/> class.
        /// </summary>
        public GetStarterPackOutput()
        {
            this.Type = "app.bsky.graph.getStarterPack#GetStarterPackOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetStarterPackOutput"/> class.
        /// </summary>
        public GetStarterPackOutput(CBORObject obj)
        {
            if (obj["starterPack"] is not null) this.StarterPack = new FishyFlip.Lexicon.App.Bsky.Graph.StarterPackView(obj["starterPack"]);
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the starterPack.
        /// <br/> <see cref="FishyFlip.Lexicon.App.Bsky.Graph.StarterPackView"/> (app.bsky.graph.defs#starterPackView)
        /// </summary>
        [JsonPropertyName("starterPack")]
        [JsonRequired]
        public FishyFlip.Lexicon.App.Bsky.Graph.StarterPackView StarterPack { get; set; }

        public const string RecordType = "app.bsky.graph.getStarterPack#GetStarterPackOutput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Graph.GetStarterPackOutput>)SourceGenerationContext.Default.AppBskyGraphGetStarterPackOutput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Graph.GetStarterPackOutput>)SourceGenerationContext.Default.AppBskyGraphGetStarterPackOutput);
        }

        public static new GetStarterPackOutput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.App.Bsky.Graph.GetStarterPackOutput>(json, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Graph.GetStarterPackOutput>)SourceGenerationContext.Default.AppBskyGraphGetStarterPackOutput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new GetStarterPackOutput FromCBORObject(CBORObject obj)
        {
            return new GetStarterPackOutput(obj);
        }

        /// <inheritdoc/>
        public static GetStarterPackOutput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<GetStarterPackOutput>(s, (JsonTypeInfo<GetStarterPackOutput>)SourceGenerationContext.Default.AppBskyGraphGetStarterPackOutput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out GetStarterPackOutput result)
        {
            result = JsonSerializer.Deserialize<GetStarterPackOutput>(s, (JsonTypeInfo<GetStarterPackOutput>)SourceGenerationContext.Default.AppBskyGraphGetStarterPackOutput);
            return result != null;
        }
    }
}

