// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.App.Bsky.Graph
{
    public partial class ListViewerState : ATObject, ICBOREncodable<ListViewerState>, IJsonEncodable<ListViewerState>, IParsable<ListViewerState>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ListViewerState"/> class.
        /// </summary>
        /// <param name="muted"></param>
        /// <param name="blocked"></param>
        public ListViewerState(bool? muted = default, FishyFlip.Models.ATUri? blocked = default)
        {
            this.Muted = muted;
            this.Blocked = blocked;
            this.Type = "app.bsky.graph.defs#listViewerState";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ListViewerState"/> class.
        /// </summary>
        public ListViewerState()
        {
            this.Type = "app.bsky.graph.defs#listViewerState";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ListViewerState"/> class.
        /// </summary>
        public ListViewerState(CBORObject obj)
        {
            if (obj["muted"] is not null) this.Muted = obj["muted"].AsBoolean();
            if (obj["blocked"] is not null) this.Blocked = obj["blocked"].ToATUri();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the muted.
        /// </summary>
        [JsonPropertyName("muted")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? Muted { get; set; }

        /// <summary>
        /// Gets or sets the blocked.
        /// </summary>
        [JsonPropertyName("blocked")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATUriJsonConverter))]
        public FishyFlip.Models.ATUri? Blocked { get; set; }

        public const string RecordType = "app.bsky.graph.defs#listViewerState";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Graph.ListViewerState>)SourceGenerationContext.Default.AppBskyGraphListViewerState);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Graph.ListViewerState>)SourceGenerationContext.Default.AppBskyGraphListViewerState);
        }

        public static new ListViewerState FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.App.Bsky.Graph.ListViewerState>(json, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Graph.ListViewerState>)SourceGenerationContext.Default.AppBskyGraphListViewerState)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new ListViewerState FromCBORObject(CBORObject obj)
        {
            return new ListViewerState(obj);
        }

        /// <inheritdoc/>
        public static ListViewerState Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<ListViewerState>(s, (JsonTypeInfo<ListViewerState>)SourceGenerationContext.Default.AppBskyGraphListViewerState)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out ListViewerState result)
        {
            result = JsonSerializer.Deserialize<ListViewerState>(s, (JsonTypeInfo<ListViewerState>)SourceGenerationContext.Default.AppBskyGraphListViewerState);
            return result != null;
        }
    }
}

