// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.App.Bsky.Graph
{
    /// <summary>
    /// Record declaring a verification relationship between two accounts. Verifications are only considered valid by an app if issued by an account the app considers trusted.
    /// </summary>
    public partial class Verification : ATObject, ICBOREncodable<Verification>, IJsonEncodable<Verification>, IParsable<Verification>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Verification"/> class.
        /// </summary>
        /// <param name="subject">DID of the subject the verification applies to.</param>
        /// <param name="handle">Handle of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current handle matches the one at the time of verifying.</param>
        /// <param name="displayName">Display name of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current displayName matches the one at the time of verifying.</param>
        /// <param name="createdAt">Date of when the verification was created.</param>
        public Verification(FishyFlip.Models.ATDid? subject, FishyFlip.Models.ATHandle? handle, string? displayName, DateTime? createdAt = default)
        {
            this.Subject = subject;
            this.Handle = handle;
            this.DisplayName = displayName;
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.Type = "app.bsky.graph.verification";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Verification"/> class.
        /// </summary>
        public Verification()
        {
            this.Type = "app.bsky.graph.verification";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Verification"/> class.
        /// </summary>
        public Verification(CBORObject obj)
        {
            if (obj["subject"] is not null) this.Subject = obj["subject"].ToATDid();
            if (obj["handle"] is not null) this.Handle = obj["handle"].ToATHandle();
            if (obj["displayName"] is not null) this.DisplayName = obj["displayName"].AsString();
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the subject.
        /// <br/> DID of the subject the verification applies to.
        /// </summary>
        [JsonPropertyName("subject")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATDidJsonConverter))]
        public FishyFlip.Models.ATDid? Subject { get; set; }

        /// <summary>
        /// Gets or sets the handle.
        /// <br/> Handle of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current handle matches the one at the time of verifying.
        /// </summary>
        [JsonPropertyName("handle")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATHandleJsonConverter))]
        public FishyFlip.Models.ATHandle? Handle { get; set; }

        /// <summary>
        /// Gets or sets the displayName.
        /// <br/> Display name of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current displayName matches the one at the time of verifying.
        /// </summary>
        [JsonPropertyName("displayName")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the createdAt.
        /// <br/> Date of when the verification was created.
        /// </summary>
        [JsonPropertyName("createdAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;

        public const string RecordType = "app.bsky.graph.verification";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Graph.Verification>)SourceGenerationContext.Default.AppBskyGraphVerification);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Graph.Verification>)SourceGenerationContext.Default.AppBskyGraphVerification);
        }

        public static new Verification FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.App.Bsky.Graph.Verification>(json, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Graph.Verification>)SourceGenerationContext.Default.AppBskyGraphVerification)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Verification FromCBORObject(CBORObject obj)
        {
            return new Verification(obj);
        }

        /// <inheritdoc/>
        public static Verification Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Verification>(s, (JsonTypeInfo<Verification>)SourceGenerationContext.Default.AppBskyGraphVerification)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Verification result)
        {
            result = JsonSerializer.Deserialize<Verification>(s, (JsonTypeInfo<Verification>)SourceGenerationContext.Default.AppBskyGraphVerification);
            return result != null;
        }
    }
}

