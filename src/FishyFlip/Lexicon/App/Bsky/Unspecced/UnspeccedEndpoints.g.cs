// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.App.Bsky.Unspecced
{

    /// <summary>
    /// app.bsky.unspecced Endpoint Group.
    /// </summary>
    public static class UnspeccedEndpoints
    {

       public const string GetConfig = "/xrpc/app.bsky.unspecced.getConfig";

       public const string GetPopularFeedGenerators = "/xrpc/app.bsky.unspecced.getPopularFeedGenerators";

       public const string GetSuggestedFeeds = "/xrpc/app.bsky.unspecced.getSuggestedFeeds";

       public const string GetSuggestedFeedsSkeleton = "/xrpc/app.bsky.unspecced.getSuggestedFeedsSkeleton";

       public const string GetSuggestedStarterPacks = "/xrpc/app.bsky.unspecced.getSuggestedStarterPacks";

       public const string GetSuggestedStarterPacksSkeleton = "/xrpc/app.bsky.unspecced.getSuggestedStarterPacksSkeleton";

       public const string GetSuggestionsSkeleton = "/xrpc/app.bsky.unspecced.getSuggestionsSkeleton";

       public const string GetTaggedSuggestions = "/xrpc/app.bsky.unspecced.getTaggedSuggestions";

       public const string GetTrendingTopics = "/xrpc/app.bsky.unspecced.getTrendingTopics";

       public const string GetTrends = "/xrpc/app.bsky.unspecced.getTrends";

       public const string GetTrendsSkeleton = "/xrpc/app.bsky.unspecced.getTrendsSkeleton";

       public const string SearchActorsSkeleton = "/xrpc/app.bsky.unspecced.searchActorsSkeleton";

       public const string SearchPostsSkeleton = "/xrpc/app.bsky.unspecced.searchPostsSkeleton";

       public const string SearchStarterPacksSkeleton = "/xrpc/app.bsky.unspecced.searchStarterPacksSkeleton";


        /// <summary>
        /// Get miscellaneous runtime configuration.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.App.Bsky.Unspecced.GetConfigOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.App.Bsky.Unspecced.GetConfigOutput?>> GetConfigAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetConfig.ToString();
            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            return atp.Get<FishyFlip.Lexicon.App.Bsky.Unspecced.GetConfigOutput>(endpointUrl, atp.Options.SourceGenerationContext.AppBskyUnspeccedGetConfigOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// An unspecced view of globally popular feed generators.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="query"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.App.Bsky.Unspecced.GetPopularFeedGeneratorsOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.App.Bsky.Unspecced.GetPopularFeedGeneratorsOutput?>> GetPopularFeedGeneratorsAsync (this FishyFlip.ATProtocol atp, int? limit = 50, string? cursor = default, string? query = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetPopularFeedGenerators.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            if (cursor != null)
            {
                queryStrings.Add("cursor=" + cursor);
            }

            if (query != null)
            {
                queryStrings.Add("query=" + query);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.App.Bsky.Unspecced.GetPopularFeedGeneratorsOutput>(endpointUrl, atp.Options.SourceGenerationContext.AppBskyUnspeccedGetPopularFeedGeneratorsOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Get a list of suggested feeds
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.App.Bsky.Unspecced.GetSuggestedFeedsOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.App.Bsky.Unspecced.GetSuggestedFeedsOutput?>> GetSuggestedFeedsAsync (this FishyFlip.ATProtocol atp, int? limit = 10, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetSuggestedFeeds.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.App.Bsky.Unspecced.GetSuggestedFeedsOutput>(endpointUrl, atp.Options.SourceGenerationContext.AppBskyUnspeccedGetSuggestedFeedsOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Get a skeleton of suggested feeds. Intended to be called and hydrated by app.bsky.unspecced.getSuggestedFeeds
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="viewer">DID of the account making the request (not included for public/unauthenticated queries).</param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.App.Bsky.Unspecced.GetSuggestedFeedsSkeletonOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.App.Bsky.Unspecced.GetSuggestedFeedsSkeletonOutput?>> GetSuggestedFeedsSkeletonAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATDid? viewer = default, int? limit = 10, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetSuggestedFeedsSkeleton.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            if (viewer != null)
            {
                queryStrings.Add("viewer=" + viewer);
            }

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.App.Bsky.Unspecced.GetSuggestedFeedsSkeletonOutput>(endpointUrl, atp.Options.SourceGenerationContext.AppBskyUnspeccedGetSuggestedFeedsSkeletonOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Get a list of suggested starterpacks
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.App.Bsky.Unspecced.GetSuggestedStarterPacksOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.App.Bsky.Unspecced.GetSuggestedStarterPacksOutput?>> GetSuggestedStarterPacksAsync (this FishyFlip.ATProtocol atp, int? limit = 10, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetSuggestedStarterPacks.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.App.Bsky.Unspecced.GetSuggestedStarterPacksOutput>(endpointUrl, atp.Options.SourceGenerationContext.AppBskyUnspeccedGetSuggestedStarterPacksOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Get a skeleton of suggested starterpacks. Intended to be called and hydrated by app.bsky.unspecced.getSuggestedStarterpacks
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="viewer">DID of the account making the request (not included for public/unauthenticated queries).</param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.App.Bsky.Unspecced.GetSuggestedStarterPacksSkeletonOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.App.Bsky.Unspecced.GetSuggestedStarterPacksSkeletonOutput?>> GetSuggestedStarterPacksSkeletonAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATDid? viewer = default, int? limit = 10, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetSuggestedStarterPacksSkeleton.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            if (viewer != null)
            {
                queryStrings.Add("viewer=" + viewer);
            }

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.App.Bsky.Unspecced.GetSuggestedStarterPacksSkeletonOutput>(endpointUrl, atp.Options.SourceGenerationContext.AppBskyUnspeccedGetSuggestedStarterPacksSkeletonOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Get a skeleton of suggested actors. Intended to be called and then hydrated through app.bsky.actor.getSuggestions
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="viewer">DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.</param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="relativeToDid">DID of the account to get suggestions relative to. If not provided, suggestions will be based on the viewer.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.App.Bsky.Unspecced.GetSuggestionsSkeletonOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.App.Bsky.Unspecced.GetSuggestionsSkeletonOutput?>> GetSuggestionsSkeletonAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATDid? viewer = default, int? limit = 50, string? cursor = default, FishyFlip.Models.ATDid? relativeToDid = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetSuggestionsSkeleton.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            if (viewer != null)
            {
                queryStrings.Add("viewer=" + viewer);
            }

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            if (cursor != null)
            {
                queryStrings.Add("cursor=" + cursor);
            }

            if (relativeToDid != null)
            {
                queryStrings.Add("relativeToDid=" + relativeToDid);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.App.Bsky.Unspecced.GetSuggestionsSkeletonOutput>(endpointUrl, atp.Options.SourceGenerationContext.AppBskyUnspeccedGetSuggestionsSkeletonOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Get a list of suggestions (feeds and users) tagged with categories
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.App.Bsky.Unspecced.GetTaggedSuggestionsOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.App.Bsky.Unspecced.GetTaggedSuggestionsOutput?>> GetTaggedSuggestionsAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetTaggedSuggestions.ToString();
            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            return atp.Get<FishyFlip.Lexicon.App.Bsky.Unspecced.GetTaggedSuggestionsOutput>(endpointUrl, atp.Options.SourceGenerationContext.AppBskyUnspeccedGetTaggedSuggestionsOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Get a list of trending topics
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="viewer">DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.</param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.App.Bsky.Unspecced.GetTrendingTopicsOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.App.Bsky.Unspecced.GetTrendingTopicsOutput?>> GetTrendingTopicsAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATDid? viewer = default, int? limit = 10, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetTrendingTopics.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            if (viewer != null)
            {
                queryStrings.Add("viewer=" + viewer);
            }

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.App.Bsky.Unspecced.GetTrendingTopicsOutput>(endpointUrl, atp.Options.SourceGenerationContext.AppBskyUnspeccedGetTrendingTopicsOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Get the current trends on the network
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.App.Bsky.Unspecced.GetTrendsOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.App.Bsky.Unspecced.GetTrendsOutput?>> GetTrendsAsync (this FishyFlip.ATProtocol atp, int? limit = 10, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetTrends.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.App.Bsky.Unspecced.GetTrendsOutput>(endpointUrl, atp.Options.SourceGenerationContext.AppBskyUnspeccedGetTrendsOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Get the skeleton of trends on the network. Intended to be called and then hydrated through app.bsky.unspecced.getTrends
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="viewer">DID of the account making the request (not included for public/unauthenticated queries).</param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.App.Bsky.Unspecced.GetTrendsSkeletonOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.App.Bsky.Unspecced.GetTrendsSkeletonOutput?>> GetTrendsSkeletonAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATDid? viewer = default, int? limit = 10, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetTrendsSkeleton.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            if (viewer != null)
            {
                queryStrings.Add("viewer=" + viewer);
            }

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.App.Bsky.Unspecced.GetTrendsSkeletonOutput>(endpointUrl, atp.Options.SourceGenerationContext.AppBskyUnspeccedGetTrendsSkeletonOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Backend Actors (profile) search, returns only skeleton.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.BadQueryStringError"/>  <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax.</param>
        /// <param name="viewer">DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.</param>
        /// <param name="typeahead">If true, acts as fast/simple 'typeahead' query.</param>
        /// <param name="limit"></param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.App.Bsky.Unspecced.SearchActorsSkeletonOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.App.Bsky.Unspecced.SearchActorsSkeletonOutput?>> SearchActorsSkeletonAsync (this FishyFlip.ATProtocol atp, string q, FishyFlip.Models.ATDid? viewer = default, bool? typeahead = default, int? limit = 25, string? cursor = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = SearchActorsSkeleton.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("q=" + q);

            if (viewer != null)
            {
                queryStrings.Add("viewer=" + viewer);
            }

            if (typeahead != null)
            {
                queryStrings.Add("typeahead=" + (typeahead.Value ? "true" : "false"));
            }

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            if (cursor != null)
            {
                queryStrings.Add("cursor=" + cursor);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.App.Bsky.Unspecced.SearchActorsSkeletonOutput>(endpointUrl, atp.Options.SourceGenerationContext.AppBskyUnspeccedSearchActorsSkeletonOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Backend Posts search, returns only skeleton
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.BadQueryStringError"/>  <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="sort">Specifies the ranking order of results.</param>
        /// <param name="since">Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD).</param>
        /// <param name="until">Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD).</param>
        /// <param name="mentions">Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions.</param>
        /// <param name="author">Filter to posts by the given account. Handles are resolved to DID before query-time.</param>
        /// <param name="lang">Filter to posts in the given language. Expected to be based on post language field, though server may override language detection.</param>
        /// <param name="domain">Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization.</param>
        /// <param name="url">Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching.</param>
        /// <param name="tag">Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching.</param>
        /// <param name="viewer">DID of the account making the request (not included for public/unauthenticated queries). Used for 'from:me' queries.</param>
        /// <param name="limit"></param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.App.Bsky.Unspecced.SearchPostsSkeletonOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.App.Bsky.Unspecced.SearchPostsSkeletonOutput?>> SearchPostsSkeletonAsync (this FishyFlip.ATProtocol atp, string q, string? sort = default, string? since = default, string? until = default, FishyFlip.Models.ATIdentifier? mentions = default, FishyFlip.Models.ATIdentifier? author = default, string? lang = default, string? domain = default, string? url = default, List<string>? tag = default, FishyFlip.Models.ATDid? viewer = default, int? limit = 25, string? cursor = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = SearchPostsSkeleton.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("q=" + q);

            if (sort != null)
            {
                queryStrings.Add("sort=" + sort);
            }

            if (since != null)
            {
                queryStrings.Add("since=" + since);
            }

            if (until != null)
            {
                queryStrings.Add("until=" + until);
            }

            if (mentions != null)
            {
                queryStrings.Add("mentions=" + mentions);
            }

            if (author != null)
            {
                queryStrings.Add("author=" + author);
            }

            if (lang != null)
            {
                queryStrings.Add("lang=" + lang);
            }

            if (domain != null)
            {
                queryStrings.Add("domain=" + domain);
            }

            if (url != null)
            {
                queryStrings.Add("url=" + url);
            }

            if (tag != null)
            {
                queryStrings.Add(string.Join("&", tag.Select(n => "tag=" + n)));
            }

            if (viewer != null)
            {
                queryStrings.Add("viewer=" + viewer);
            }

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            if (cursor != null)
            {
                queryStrings.Add("cursor=" + cursor);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.App.Bsky.Unspecced.SearchPostsSkeletonOutput>(endpointUrl, atp.Options.SourceGenerationContext.AppBskyUnspeccedSearchPostsSkeletonOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Backend Starter Pack search, returns only skeleton.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.BadQueryStringError"/>  <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="q">Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.</param>
        /// <param name="viewer">DID of the account making the request (not included for public/unauthenticated queries).</param>
        /// <param name="limit"></param>
        /// <param name="cursor">Optional pagination mechanism; may not necessarily allow scrolling through entire result set.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.App.Bsky.Unspecced.SearchStarterPacksSkeletonOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.App.Bsky.Unspecced.SearchStarterPacksSkeletonOutput?>> SearchStarterPacksSkeletonAsync (this FishyFlip.ATProtocol atp, string q, FishyFlip.Models.ATDid? viewer = default, int? limit = 25, string? cursor = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = SearchStarterPacksSkeleton.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("q=" + q);

            if (viewer != null)
            {
                queryStrings.Add("viewer=" + viewer);
            }

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            if (cursor != null)
            {
                queryStrings.Add("cursor=" + cursor);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.App.Bsky.Unspecced.SearchStarterPacksSkeletonOutput>(endpointUrl, atp.Options.SourceGenerationContext.AppBskyUnspeccedSearchStarterPacksSkeletonOutput!, cancellationToken, headers);
        }

    }
}

