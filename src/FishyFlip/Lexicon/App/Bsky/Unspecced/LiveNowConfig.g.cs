// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.App.Bsky.Unspecced
{
    public partial class LiveNowConfig : ATObject, ICBOREncodable<LiveNowConfig>, IJsonEncodable<LiveNowConfig>, IParsable<LiveNowConfig>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="LiveNowConfig"/> class.
        /// </summary>
        /// <param name="did"></param>
        /// <param name="domains"></param>
        public LiveNowConfig(FishyFlip.Models.ATDid did = default, List<string> domains = default)
        {
            this.Did = did;
            this.Domains = domains;
            this.Type = "app.bsky.unspecced.getConfig#liveNowConfig";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="LiveNowConfig"/> class.
        /// </summary>
        public LiveNowConfig()
        {
            this.Type = "app.bsky.unspecced.getConfig#liveNowConfig";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="LiveNowConfig"/> class.
        /// </summary>
        public LiveNowConfig(CBORObject obj)
        {
            if (obj["did"] is not null) this.Did = obj["did"].ToATDid();
            if (obj["domains"] is not null) this.Domains = obj["domains"].Values.Select(n =>n.AsString()).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the did.
        /// </summary>
        [JsonPropertyName("did")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATDidJsonConverter))]
        public FishyFlip.Models.ATDid Did { get; set; }

        /// <summary>
        /// Gets or sets the domains.
        /// </summary>
        [JsonPropertyName("domains")]
        [JsonRequired]
        public List<string> Domains { get; set; }

        public const string RecordType = "app.bsky.unspecced.getConfig#liveNowConfig";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Unspecced.LiveNowConfig>)SourceGenerationContext.Default.AppBskyUnspeccedLiveNowConfig);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Unspecced.LiveNowConfig>)SourceGenerationContext.Default.AppBskyUnspeccedLiveNowConfig);
        }

        public static new LiveNowConfig FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.App.Bsky.Unspecced.LiveNowConfig>(json, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Unspecced.LiveNowConfig>)SourceGenerationContext.Default.AppBskyUnspeccedLiveNowConfig)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new LiveNowConfig FromCBORObject(CBORObject obj)
        {
            return new LiveNowConfig(obj);
        }

        /// <inheritdoc/>
        public static LiveNowConfig Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<LiveNowConfig>(s, (JsonTypeInfo<LiveNowConfig>)SourceGenerationContext.Default.AppBskyUnspeccedLiveNowConfig)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out LiveNowConfig result)
        {
            result = JsonSerializer.Deserialize<LiveNowConfig>(s, (JsonTypeInfo<LiveNowConfig>)SourceGenerationContext.Default.AppBskyUnspeccedLiveNowConfig);
            return result != null;
        }
    }
}

