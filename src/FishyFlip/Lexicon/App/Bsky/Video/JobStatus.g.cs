// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.App.Bsky.Video
{
    public partial class JobStatus : ATObject, ICBOREncodable<JobStatus>, IJsonEncodable<JobStatus>, IParsable<JobStatus>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="JobStatus"/> class.
        /// </summary>
        /// <param name="jobId"></param>
        /// <param name="did"></param>
        /// <param name="state">The state of the video processing job. All values not listed as a known value indicate that the job is in process.
        /// <br/> Known Values: <br/>
        /// JOB_STATE_COMPLETED <br/>
        /// JOB_STATE_FAILED <br/>
        /// </param>
        /// <param name="progress">Progress within the current processing state.</param>
        /// <param name="blob"></param>
        /// <param name="error"></param>
        /// <param name="message"></param>
        public JobStatus(string jobId = default, FishyFlip.Models.ATDid did = default, string state = default, long? progress = default, Blob? blob = default, string? error = default, string? message = default)
        {
            this.JobId = jobId;
            this.Did = did;
            this.State = state;
            this.Progress = progress;
            this.Blob = blob;
            this.Error = error;
            this.Message = message;
            this.Type = "app.bsky.video.defs#jobStatus";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="JobStatus"/> class.
        /// </summary>
        public JobStatus()
        {
            this.Type = "app.bsky.video.defs#jobStatus";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="JobStatus"/> class.
        /// </summary>
        public JobStatus(CBORObject obj)
        {
            if (obj["jobId"] is not null) this.JobId = obj["jobId"].AsString();
            if (obj["did"] is not null) this.Did = obj["did"].ToATDid();
            if (obj["state"] is not null) this.State = obj["state"].AsString();
            if (obj["progress"] is not null) this.Progress = obj["progress"].AsInt64Value();
            if (obj["blob"] is not null) this.Blob = new FishyFlip.Models.Blob(obj["blob"]);
            if (obj["error"] is not null) this.Error = obj["error"].AsString();
            if (obj["message"] is not null) this.Message = obj["message"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the jobId.
        /// </summary>
        [JsonPropertyName("jobId")]
        [JsonRequired]
        public string JobId { get; set; }

        /// <summary>
        /// Gets or sets the did.
        /// </summary>
        [JsonPropertyName("did")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATDidJsonConverter))]
        public FishyFlip.Models.ATDid Did { get; set; }

        /// <summary>
        /// Gets or sets the state.
        /// <br/> The state of the video processing job. All values not listed as a known value indicate that the job is in process.
        /// <br/> Known Values: <br/>
        /// JOB_STATE_COMPLETED <br/>
        /// JOB_STATE_FAILED <br/>
        /// </summary>
        [JsonPropertyName("state")]
        [JsonRequired]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the progress.
        /// <br/> Progress within the current processing state.
        /// </summary>
        [JsonPropertyName("progress")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public long? Progress { get; set; }

        /// <summary>
        /// Gets or sets the blob.
        /// </summary>
        [JsonPropertyName("blob")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Blob? Blob { get; set; }

        /// <summary>
        /// Gets or sets the error.
        /// </summary>
        [JsonPropertyName("error")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Error { get; set; }

        /// <summary>
        /// Gets or sets the message.
        /// </summary>
        [JsonPropertyName("message")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Message { get; set; }

        public const string RecordType = "app.bsky.video.defs#jobStatus";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Video.JobStatus>)SourceGenerationContext.Default.AppBskyVideoJobStatus);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Video.JobStatus>)SourceGenerationContext.Default.AppBskyVideoJobStatus);
        }

        public static new JobStatus FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.App.Bsky.Video.JobStatus>(json, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Video.JobStatus>)SourceGenerationContext.Default.AppBskyVideoJobStatus)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new JobStatus FromCBORObject(CBORObject obj)
        {
            return new JobStatus(obj);
        }

        /// <inheritdoc/>
        public static JobStatus Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<JobStatus>(s, (JsonTypeInfo<JobStatus>)SourceGenerationContext.Default.AppBskyVideoJobStatus)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out JobStatus result)
        {
            result = JsonSerializer.Deserialize<JobStatus>(s, (JsonTypeInfo<JobStatus>)SourceGenerationContext.Default.AppBskyVideoJobStatus);
            return result != null;
        }
    }
}

