// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.App.Bsky.Richtext
{
    /// <summary>
    /// Specifies the sub-string range a facet feature applies to. Start index is inclusive, end index is exclusive. Indices are zero-indexed, counting bytes of the UTF-8 encoded text. NOTE: some languages, like Javascript, use UTF-16 or Unicode codepoints for string slice indexing; in these languages, convert to byte arrays before working with facets.
    /// </summary>
    public partial class ByteSlice : ATObject, ICBOREncodable<ByteSlice>, IJsonEncodable<ByteSlice>, IParsable<ByteSlice>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ByteSlice"/> class.
        /// </summary>
        /// <param name="byteStart"></param>
        /// <param name="byteEnd"></param>
        public ByteSlice(long byteStart = default, long byteEnd = default)
        {
            this.ByteStart = byteStart;
            this.ByteEnd = byteEnd;
            this.Type = "app.bsky.richtext.facet#byteSlice";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ByteSlice"/> class.
        /// </summary>
        public ByteSlice()
        {
            this.Type = "app.bsky.richtext.facet#byteSlice";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ByteSlice"/> class.
        /// </summary>
        public ByteSlice(CBORObject obj)
        {
            if (obj["byteStart"] is not null) this.ByteStart = obj["byteStart"].AsInt64Value();
            if (obj["byteEnd"] is not null) this.ByteEnd = obj["byteEnd"].AsInt64Value();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the byteStart.
        /// </summary>
        [JsonPropertyName("byteStart")]
        [JsonRequired]
        public long ByteStart { get; set; }

        /// <summary>
        /// Gets or sets the byteEnd.
        /// </summary>
        [JsonPropertyName("byteEnd")]
        [JsonRequired]
        public long ByteEnd { get; set; }

        public const string RecordType = "app.bsky.richtext.facet#byteSlice";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Richtext.ByteSlice>)SourceGenerationContext.Default.AppBskyRichtextByteSlice);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Richtext.ByteSlice>)SourceGenerationContext.Default.AppBskyRichtextByteSlice);
        }

        public static new ByteSlice FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.App.Bsky.Richtext.ByteSlice>(json, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Richtext.ByteSlice>)SourceGenerationContext.Default.AppBskyRichtextByteSlice)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new ByteSlice FromCBORObject(CBORObject obj)
        {
            return new ByteSlice(obj);
        }

        /// <inheritdoc/>
        public static ByteSlice Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<ByteSlice>(s, (JsonTypeInfo<ByteSlice>)SourceGenerationContext.Default.AppBskyRichtextByteSlice)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out ByteSlice result)
        {
            result = JsonSerializer.Deserialize<ByteSlice>(s, (JsonTypeInfo<ByteSlice>)SourceGenerationContext.Default.AppBskyRichtextByteSlice);
            return result != null;
        }
    }
}

