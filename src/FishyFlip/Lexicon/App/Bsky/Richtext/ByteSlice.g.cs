// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable

namespace FishyFlip.Lexicon.App.Bsky.Richtext
{
    /// <summary>
    /// Specifies the sub-string range a facet feature applies to. Start index is inclusive, end index is exclusive. Indices are zero-indexed, counting bytes of the UTF-8 encoded text. NOTE: some languages, like Javascript, use UTF-16 or Unicode codepoints for string slice indexing; in these languages, convert to byte arrays before working with facets.
    /// </summary>
    public partial class ByteSlice : ATObject
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ByteSlice"/> class.
        /// </summary>
        /// <param name="byteStart"></param>
        /// <param name="byteEnd"></param>
        public ByteSlice(long? byteStart = default, long? byteEnd = default)
        {
            this.ByteStart = byteStart;
            this.ByteEnd = byteEnd;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ByteSlice"/> class.
        /// </summary>
        public ByteSlice()
        {
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ByteSlice"/> class.
        /// </summary>
        public ByteSlice(CBORObject obj)
        {
            if (obj["byteStart"] is not null) this.ByteStart = obj["byteStart"].AsInt64Value();
            if (obj["byteEnd"] is not null) this.ByteEnd = obj["byteEnd"].AsInt64Value();
        }

        /// <summary>
        /// Gets or sets the byteStart.
        /// </summary>
        [JsonPropertyName("byteStart")]
        [JsonRequired]
        public long? ByteStart { get; set; }

        /// <summary>
        /// Gets or sets the byteEnd.
        /// </summary>
        [JsonPropertyName("byteEnd")]
        [JsonRequired]
        public long? ByteEnd { get; set; }

        /// <summary>
        /// Gets the ATRecord Type.
        /// </summary>
        [JsonPropertyName("$type")]
        public override string Type => "app.bsky.richtext.facet#byteSlice";

        public const string RecordType = "app.bsky.richtext.facet#byteSlice";

        public override string ToJson()
        {
            return JsonSerializer.Serialize<App.Bsky.Richtext.ByteSlice>(this, (JsonTypeInfo<App.Bsky.Richtext.ByteSlice>)SourceGenerationContext.Default.AppBskyRichtextByteSlice)!;
        }

        public static ByteSlice FromJson(string json)
        {
            return JsonSerializer.Deserialize<App.Bsky.Richtext.ByteSlice>(json, (JsonTypeInfo<App.Bsky.Richtext.ByteSlice>)SourceGenerationContext.Default.AppBskyRichtextByteSlice)!;
        }
    }
}

