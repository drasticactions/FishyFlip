// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.App.Bsky.Actor
{
    /// <summary>
    /// Preferences for how verified accounts appear in the app.
    /// </summary>
    public partial class VerificationPrefs : ATObject, ICBOREncodable<VerificationPrefs>, IJsonEncodable<VerificationPrefs>, IParsable<VerificationPrefs>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationPrefs"/> class.
        /// </summary>
        /// <param name="hideBadges">Hide the blue check badges for verified accounts and trusted verifiers.</param>
        public VerificationPrefs(bool? hideBadges = default)
        {
            this.HideBadges = hideBadges;
            this.Type = "app.bsky.actor.defs#verificationPrefs";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationPrefs"/> class.
        /// </summary>
        public VerificationPrefs()
        {
            this.Type = "app.bsky.actor.defs#verificationPrefs";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationPrefs"/> class.
        /// </summary>
        public VerificationPrefs(CBORObject obj)
        {
            if (obj["hideBadges"] is not null) this.HideBadges = obj["hideBadges"].AsBoolean();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the hideBadges.
        /// <br/> Hide the blue check badges for verified accounts and trusted verifiers.
        /// </summary>
        [JsonPropertyName("hideBadges")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? HideBadges { get; set; } = false;

        public const string RecordType = "app.bsky.actor.defs#verificationPrefs";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Actor.VerificationPrefs>)SourceGenerationContext.Default.AppBskyActorVerificationPrefs);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Actor.VerificationPrefs>)SourceGenerationContext.Default.AppBskyActorVerificationPrefs);
        }

        public static new VerificationPrefs FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.App.Bsky.Actor.VerificationPrefs>(json, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Actor.VerificationPrefs>)SourceGenerationContext.Default.AppBskyActorVerificationPrefs)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new VerificationPrefs FromCBORObject(CBORObject obj)
        {
            return new VerificationPrefs(obj);
        }

        /// <inheritdoc/>
        public static VerificationPrefs Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<VerificationPrefs>(s, (JsonTypeInfo<VerificationPrefs>)SourceGenerationContext.Default.AppBskyActorVerificationPrefs)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out VerificationPrefs result)
        {
            result = JsonSerializer.Deserialize<VerificationPrefs>(s, (JsonTypeInfo<VerificationPrefs>)SourceGenerationContext.Default.AppBskyActorVerificationPrefs);
            return result != null;
        }
    }
}

