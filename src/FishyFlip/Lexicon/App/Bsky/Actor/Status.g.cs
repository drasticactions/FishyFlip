// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.App.Bsky.Actor
{
    /// <summary>
    /// A declaration of a Bluesky account status.
    /// </summary>
    public partial class Status : ATObject, ICBOREncodable<Status>, IJsonEncodable<Status>, IParsable<Status>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Status"/> class.
        /// </summary>
        /// <param name="status">The status for the account.
        /// <br/> Known Values: <br/>
        /// live - Advertises an account as currently offering live content. <br/>
        /// </param>
        /// <param name="embed">An optional embed associated with the status.
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.App.Bsky.Embed.EmbedExternal"/> (app.bsky.embed.external) <br/>
        /// </param>
        /// <param name="durationMinutes">The duration of the status in minutes. Applications can choose to impose minimum and maximum limits.</param>
        /// <param name="createdAt"></param>
        public Status(string? status, FishyFlip.Lexicon.App.Bsky.Embed.EmbedExternal? embed = default, long? durationMinutes = default, DateTime? createdAt = default)
        {
            this.StatusValue = status;
            this.Embed = embed;
            this.DurationMinutes = durationMinutes;
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.Type = "app.bsky.actor.status";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Status"/> class.
        /// </summary>
        public Status()
        {
            this.Type = "app.bsky.actor.status";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Status"/> class.
        /// </summary>
        public Status(CBORObject obj)
        {
            if (obj["status"] is not null) this.StatusValue = obj["status"].AsString();
            if (obj["embed"] is not null) this.Embed = new FishyFlip.Lexicon.App.Bsky.Embed.EmbedExternal(obj["embed"]);
            if (obj["durationMinutes"] is not null) this.DurationMinutes = obj["durationMinutes"].AsInt64Value();
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the status.
        /// <br/> The status for the account.
        /// <br/> Known Values: <br/>
        /// live - Advertises an account as currently offering live content. <br/>
        /// </summary>
        [JsonPropertyName("status")]
        public string? StatusValue { get; set; }

        /// <summary>
        /// Gets or sets the embed.
        /// <br/> An optional embed associated with the status.
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.App.Bsky.Embed.EmbedExternal"/> (app.bsky.embed.external) <br/>
        /// </summary>
        [JsonPropertyName("embed")]
        public FishyFlip.Lexicon.App.Bsky.Embed.EmbedExternal? Embed { get; set; }

        /// <summary>
        /// Gets or sets the durationMinutes.
        /// <br/> The duration of the status in minutes. Applications can choose to impose minimum and maximum limits.
        /// </summary>
        [JsonPropertyName("durationMinutes")]
        public long? DurationMinutes { get; set; }

        /// <summary>
        /// Gets or sets the createdAt.
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;

        public const string RecordType = "app.bsky.actor.status";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Actor.Status>)SourceGenerationContext.Default.AppBskyActorStatus);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Actor.Status>)SourceGenerationContext.Default.AppBskyActorStatus);
        }

        public static new Status FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.App.Bsky.Actor.Status>(json, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Actor.Status>)SourceGenerationContext.Default.AppBskyActorStatus)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Status FromCBORObject(CBORObject obj)
        {
            return new Status(obj);
        }

        /// <inheritdoc/>
        public static Status Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Status>(s, (JsonTypeInfo<Status>)SourceGenerationContext.Default.AppBskyActorStatus)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Status result)
        {
            result = JsonSerializer.Deserialize<Status>(s, (JsonTypeInfo<Status>)SourceGenerationContext.Default.AppBskyActorStatus);
            return result != null;
        }
    }
}

