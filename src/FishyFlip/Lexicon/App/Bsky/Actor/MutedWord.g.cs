// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.App.Bsky.Actor
{
    /// <summary>
    /// A word that the account owner has muted.
    /// </summary>
    public partial class MutedWord : ATObject, ICBOREncodable<MutedWord>, IJsonEncodable<MutedWord>, IParsable<MutedWord>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="MutedWord"/> class.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="value">The muted word itself.</param>
        /// <param name="targets">The intended targets of the muted word.</param>
        /// <param name="actorTarget">Groups of users to apply the muted word to. If undefined, applies to all users.
        /// <br/> Known Values: <br/>
        /// all <br/>
        /// exclude-following <br/>
        /// </param>
        /// <param name="expiresAt">The date and time at which the muted word will expire and no longer be applied.</param>
        public MutedWord(string? id = default, string value = default, List<string> targets = default, string? actorTarget = default, DateTime? expiresAt = default)
        {
            this.Id = id;
            this.Value = value;
            this.Targets = targets;
            this.ActorTarget = actorTarget;
            this.ExpiresAt = expiresAt;
            this.Type = "app.bsky.actor.defs#mutedWord";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="MutedWord"/> class.
        /// </summary>
        public MutedWord()
        {
            this.Type = "app.bsky.actor.defs#mutedWord";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="MutedWord"/> class.
        /// </summary>
        public MutedWord(CBORObject obj)
        {
            if (obj["id"] is not null) this.Id = obj["id"].AsString();
            if (obj["value"] is not null) this.Value = obj["value"].AsString();
            if (obj["targets"] is not null) this.Targets = obj["targets"].Values.Select(n =>n.AsString()).ToList();
            if (obj["actorTarget"] is not null) this.ActorTarget = obj["actorTarget"].AsString();
            if (obj["expiresAt"] is not null) this.ExpiresAt = obj["expiresAt"].ToDateTime();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Gets or sets the value.
        /// <br/> The muted word itself.
        /// </summary>
        [JsonPropertyName("value")]
        [JsonRequired]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets the targets.
        /// <br/> The intended targets of the muted word.
        /// </summary>
        [JsonPropertyName("targets")]
        [JsonRequired]
        public List<string> Targets { get; set; }

        /// <summary>
        /// Gets or sets the actorTarget.
        /// <br/> Groups of users to apply the muted word to. If undefined, applies to all users.
        /// <br/> Known Values: <br/>
        /// all <br/>
        /// exclude-following <br/>
        /// </summary>
        [JsonPropertyName("actorTarget")]
        public string? ActorTarget { get; set; } = "all";

        /// <summary>
        /// Gets or sets the expiresAt.
        /// <br/> The date and time at which the muted word will expire and no longer be applied.
        /// </summary>
        [JsonPropertyName("expiresAt")]
        public DateTime? ExpiresAt { get; set; }

        public const string RecordType = "app.bsky.actor.defs#mutedWord";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Actor.MutedWord>)SourceGenerationContext.Default.AppBskyActorMutedWord);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Actor.MutedWord>)SourceGenerationContext.Default.AppBskyActorMutedWord);
        }

        public static new MutedWord FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.App.Bsky.Actor.MutedWord>(json, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Actor.MutedWord>)SourceGenerationContext.Default.AppBskyActorMutedWord)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new MutedWord FromCBORObject(CBORObject obj)
        {
            return new MutedWord(obj);
        }

        /// <inheritdoc/>
        public static MutedWord Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<MutedWord>(s, (JsonTypeInfo<MutedWord>)SourceGenerationContext.Default.AppBskyActorMutedWord)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out MutedWord result)
        {
            result = JsonSerializer.Deserialize<MutedWord>(s, (JsonTypeInfo<MutedWord>)SourceGenerationContext.Default.AppBskyActorMutedWord);
            return result != null;
        }
    }
}

