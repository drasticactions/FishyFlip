// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.App.Bsky.Actor
{
    public partial class AdultContentPref : ATObject, ICBOREncodable<AdultContentPref>, IJsonEncodable<AdultContentPref>, IParsable<AdultContentPref>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="AdultContentPref"/> class.
        /// </summary>
        /// <param name="enabled"></param>
        public AdultContentPref(bool enabled = default)
        {
            this.Enabled = enabled;
            this.Type = "app.bsky.actor.defs#adultContentPref";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AdultContentPref"/> class.
        /// </summary>
        public AdultContentPref()
        {
            this.Type = "app.bsky.actor.defs#adultContentPref";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AdultContentPref"/> class.
        /// </summary>
        public AdultContentPref(CBORObject obj)
        {
            if (obj["enabled"] is not null) this.Enabled = obj["enabled"].AsBoolean();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the enabled.
        /// </summary>
        [JsonPropertyName("enabled")]
        [JsonRequired]
        public bool Enabled { get; set; } = false;

        public const string RecordType = "app.bsky.actor.defs#adultContentPref";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Actor.AdultContentPref>)SourceGenerationContext.Default.AppBskyActorAdultContentPref);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Actor.AdultContentPref>)SourceGenerationContext.Default.AppBskyActorAdultContentPref);
        }

        public static new AdultContentPref FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.App.Bsky.Actor.AdultContentPref>(json, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Actor.AdultContentPref>)SourceGenerationContext.Default.AppBskyActorAdultContentPref)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new AdultContentPref FromCBORObject(CBORObject obj)
        {
            return new AdultContentPref(obj);
        }

        /// <inheritdoc/>
        public static AdultContentPref Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<AdultContentPref>(s, (JsonTypeInfo<AdultContentPref>)SourceGenerationContext.Default.AppBskyActorAdultContentPref)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out AdultContentPref result)
        {
            result = JsonSerializer.Deserialize<AdultContentPref>(s, (JsonTypeInfo<AdultContentPref>)SourceGenerationContext.Default.AppBskyActorAdultContentPref);
            return result != null;
        }
    }
}

