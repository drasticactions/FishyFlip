// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.App.Bsky.Actor
{
    public partial class StatusView : ATObject, ICBOREncodable<StatusView>, IJsonEncodable<StatusView>, IParsable<StatusView>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="StatusView"/> class.
        /// </summary>
        /// <param name="status">The status for the account.
        /// <br/> Known Values: <br/>
        /// live - Advertises an account as currently offering live content. <br/>
        /// </param>
        /// <param name="record"></param>
        /// <param name="embed">An optional embed associated with the status.
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.App.Bsky.Embed.ViewExternal"/> (app.bsky.embed.external#view) <br/>
        /// </param>
        /// <param name="expiresAt">The date when this status will expire. The application might choose to no longer return the status after expiration.</param>
        /// <param name="isActive">True if the status is not expired, false if it is expired. Only present if expiration was set.</param>
        public StatusView(string status = default, ATObject record = default, FishyFlip.Lexicon.App.Bsky.Embed.ViewExternal? embed = default, DateTime? expiresAt = default, bool? isActive = default)
        {
            this.Status = status;
            this.Record = record;
            this.Embed = embed;
            this.ExpiresAt = expiresAt;
            this.IsActive = isActive;
            this.Type = "app.bsky.actor.defs#statusView";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="StatusView"/> class.
        /// </summary>
        public StatusView()
        {
            this.Type = "app.bsky.actor.defs#statusView";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="StatusView"/> class.
        /// </summary>
        public StatusView(CBORObject obj)
        {
            if (obj["status"] is not null) this.Status = obj["status"].AsString();
            if (obj["record"] is not null) this.Record = obj["record"].ToATObject();
            if (obj["embed"] is not null) this.Embed = new FishyFlip.Lexicon.App.Bsky.Embed.ViewExternal(obj["embed"]);
            if (obj["expiresAt"] is not null) this.ExpiresAt = obj["expiresAt"].ToDateTime();
            if (obj["isActive"] is not null) this.IsActive = obj["isActive"].AsBoolean();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the status.
        /// <br/> The status for the account.
        /// <br/> Known Values: <br/>
        /// live - Advertises an account as currently offering live content. <br/>
        /// </summary>
        [JsonPropertyName("status")]
        [JsonRequired]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the record.
        /// </summary>
        [JsonPropertyName("record")]
        [JsonRequired]
        public ATObject Record { get; set; }

        /// <summary>
        /// Gets or sets the embed.
        /// <br/> An optional embed associated with the status.
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.App.Bsky.Embed.ViewExternal"/> (app.bsky.embed.external#view) <br/>
        /// </summary>
        [JsonPropertyName("embed")]
        public FishyFlip.Lexicon.App.Bsky.Embed.ViewExternal? Embed { get; set; }

        /// <summary>
        /// Gets or sets the expiresAt.
        /// <br/> The date when this status will expire. The application might choose to no longer return the status after expiration.
        /// </summary>
        [JsonPropertyName("expiresAt")]
        public DateTime? ExpiresAt { get; set; }

        /// <summary>
        /// Gets or sets the isActive.
        /// <br/> True if the status is not expired, false if it is expired. Only present if expiration was set.
        /// </summary>
        [JsonPropertyName("isActive")]
        public bool? IsActive { get; set; }

        public const string RecordType = "app.bsky.actor.defs#statusView";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Actor.StatusView>)SourceGenerationContext.Default.AppBskyActorStatusView);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Actor.StatusView>)SourceGenerationContext.Default.AppBskyActorStatusView);
        }

        public static new StatusView FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.App.Bsky.Actor.StatusView>(json, (JsonTypeInfo<FishyFlip.Lexicon.App.Bsky.Actor.StatusView>)SourceGenerationContext.Default.AppBskyActorStatusView)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new StatusView FromCBORObject(CBORObject obj)
        {
            return new StatusView(obj);
        }

        /// <inheritdoc/>
        public static StatusView Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<StatusView>(s, (JsonTypeInfo<StatusView>)SourceGenerationContext.Default.AppBskyActorStatusView)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out StatusView result)
        {
            result = JsonSerializer.Deserialize<StatusView>(s, (JsonTypeInfo<StatusView>)SourceGenerationContext.Default.AppBskyActorStatusView);
            return result != null;
        }
    }
}

