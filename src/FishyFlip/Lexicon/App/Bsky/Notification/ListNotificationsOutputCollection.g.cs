// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.App.Bsky.Notification
{
    /// <summary>
    /// ListNotificationsOutput Collection.
    /// </summary>
    public class ListNotificationsOutputCollection : ATObjectCollectionBase<FishyFlip.Lexicon.App.Bsky.Notification.Notification>, IAsyncEnumerable<FishyFlip.Lexicon.App.Bsky.Notification.Notification>
    {

        public ListNotificationsOutputCollection(FishyFlip.ATProtocol atp, List<string>? reasons = default, int? limit = 50, bool? priority = default, string? cursor = default, DateTime? seenAt = default, CancellationToken cancellationToken = default)
             : base(atp)
        {
            this.Reasons = reasons;
            this.Limit = limit;
            this.Priority = priority;
            this.Cursor = cursor;
            this.SeenAt = seenAt;
            this.CancellationToken = cancellationToken;
        }

        public List<string>? Reasons { get; }

        public bool? Priority { get; }

        public DateTime? SeenAt { get; }

        /// <inheritdoc/>
        public override async Task<(IList<FishyFlip.Lexicon.App.Bsky.Notification.Notification> Posts, string Cursor)> GetRecordsAsync(int? limit = null, CancellationToken? token = default)
        {
            token = token ?? this.CancellationToken ?? System.Threading.CancellationToken.None;
            var (result, error) = await this.ATProtocol.ListNotificationsAsync(reasons: this.Reasons, priority: this.Priority, seenAt: this.SeenAt, limit: limit, cursor: this.Cursor, cancellationToken: token.Value!);

            this.HandleATError(error);

            if (result == null || result.Notifications == null)
            {
                throw new InvalidOperationException("The result or its properties cannot be null.");
            }

            return (result.Notifications, result.Cursor ?? string.Empty);
        }

        public static ListNotificationsOutputCollection Create(FishyFlip.ATProtocol atp, List<string>? reasons = default, int? limit = 50, bool? priority = default, string? cursor = default, DateTime? seenAt = default, CancellationToken cancellationToken = default)
        {
            return new(atp: atp, reasons: reasons, priority: priority, seenAt: seenAt, limit: limit, cursor: cursor, cancellationToken: cancellationToken);
        }
    }
}

