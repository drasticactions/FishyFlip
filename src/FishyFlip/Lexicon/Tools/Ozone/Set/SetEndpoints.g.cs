// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Set
{

    /// <summary>
    /// tools.ozone.set Endpoint Group.
    /// </summary>
    public static class SetEndpoints
    {

       public const string AddValues = "/xrpc/tools.ozone.set.addValues";

       public const string DeleteSet = "/xrpc/tools.ozone.set.deleteSet";

       public const string DeleteValues = "/xrpc/tools.ozone.set.deleteValues";

       public const string GetValues = "/xrpc/tools.ozone.set.getValues";

       public const string QuerySets = "/xrpc/tools.ozone.set.querySets";

       public const string UpsertSet = "/xrpc/tools.ozone.set.upsertSet";


        /// <summary>
        /// Add values to a specific set. Attempting to add values to a set that does not exist will result in an error.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="name"></param>
        /// <param name="values"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> AddValuesAsync (this FishyFlip.ATProtocol atp, string name, List<string> values, CancellationToken cancellationToken = default)
        {
            var endpointUrl = AddValues.ToString();
            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoProxy, atp.Options.OzoneProxyHeader);
            var inputItem = new AddValuesInput();
            inputItem.Name = name;
            inputItem.Values = values;
            JsonTypeInfo<Tools.Ozone.Set.AddValuesInput> jsonTypeInfo = (JsonTypeInfo<Tools.Ozone.Set.AddValuesInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Tools.Ozone.Set.AddValuesInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Success> jsonTypeInfo2 = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Post<AddValuesInput, Success?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Delete an entire set. Attempting to delete a set that does not exist will result in an error.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.SetNotFoundError"/> set with the given name does not exist <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Set.DeleteSetOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Tools.Ozone.Set.DeleteSetOutput?>> DeleteSetAsync (this FishyFlip.ATProtocol atp, string name, CancellationToken cancellationToken = default)
        {
            var endpointUrl = DeleteSet.ToString();
            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoProxy, atp.Options.OzoneProxyHeader);
            var inputItem = new DeleteSetInput();
            inputItem.Name = name;
            JsonTypeInfo<Tools.Ozone.Set.DeleteSetInput> jsonTypeInfo = (JsonTypeInfo<Tools.Ozone.Set.DeleteSetInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Tools.Ozone.Set.DeleteSetInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Tools.Ozone.Set.DeleteSetOutput> jsonTypeInfo2 = (JsonTypeInfo<Tools.Ozone.Set.DeleteSetOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Tools.Ozone.Set.DeleteSetOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Post<DeleteSetInput, FishyFlip.Lexicon.Tools.Ozone.Set.DeleteSetOutput?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Delete values from a specific set. Attempting to delete values that are not in the set will not result in an error
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.SetNotFoundError"/> set with the given name does not exist <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="name"></param>
        /// <param name="values"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> DeleteValuesAsync (this FishyFlip.ATProtocol atp, string name, List<string> values, CancellationToken cancellationToken = default)
        {
            var endpointUrl = DeleteValues.ToString();
            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoProxy, atp.Options.OzoneProxyHeader);
            var inputItem = new DeleteValuesInput();
            inputItem.Name = name;
            inputItem.Values = values;
            JsonTypeInfo<Tools.Ozone.Set.DeleteValuesInput> jsonTypeInfo = (JsonTypeInfo<Tools.Ozone.Set.DeleteValuesInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Tools.Ozone.Set.DeleteValuesInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Success> jsonTypeInfo2 = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Post<DeleteValuesInput, Success?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Get a specific set and its values
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.SetNotFoundError"/> set with the given name does not exist <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="name"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Set.GetValuesOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Tools.Ozone.Set.GetValuesOutput?>> GetValuesAsync (this FishyFlip.ATProtocol atp, string name, int? limit = 100, string? cursor = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetValues.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("name=" + name);

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            if (cursor != null)
            {
                queryStrings.Add("cursor=" + cursor);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoProxy, atp.Options.OzoneProxyHeader);
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            JsonTypeInfo<Tools.Ozone.Set.GetValuesOutput> jsonTypeInfo = (JsonTypeInfo<Tools.Ozone.Set.GetValuesOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Tools.Ozone.Set.GetValuesOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Get<FishyFlip.Lexicon.Tools.Ozone.Set.GetValuesOutput>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Query available sets
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="namePrefix"></param>
        /// <param name="sortBy"></param>
        /// <param name="sortDirection"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Set.QuerySetsOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Tools.Ozone.Set.QuerySetsOutput?>> QuerySetsAsync (this FishyFlip.ATProtocol atp, int? limit = 50, string? cursor = default, string? namePrefix = default, string? sortBy = default, string? sortDirection = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = QuerySets.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            if (cursor != null)
            {
                queryStrings.Add("cursor=" + cursor);
            }

            if (namePrefix != null)
            {
                queryStrings.Add("namePrefix=" + namePrefix);
            }

            if (sortBy != null)
            {
                queryStrings.Add("sortBy=" + sortBy);
            }

            if (sortDirection != null)
            {
                queryStrings.Add("sortDirection=" + sortDirection);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoProxy, atp.Options.OzoneProxyHeader);
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            JsonTypeInfo<Tools.Ozone.Set.QuerySetsOutput> jsonTypeInfo = (JsonTypeInfo<Tools.Ozone.Set.QuerySetsOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Tools.Ozone.Set.QuerySetsOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Get<FishyFlip.Lexicon.Tools.Ozone.Set.QuerySetsOutput>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Create or update set metadata
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Set.SetView?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Tools.Ozone.Set.SetView?>> UpsertSetAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = UpsertSet.ToString();
            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoProxy, atp.Options.OzoneProxyHeader);
            JsonTypeInfo<Tools.Ozone.Set.SetView> jsonTypeInfo = (JsonTypeInfo<Tools.Ozone.Set.SetView>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Tools.Ozone.Set.SetView), atp.Options.JsonSerializerOptions)!;
            return atp.Post<FishyFlip.Lexicon.Tools.Ozone.Set.SetView?>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }

    }
}

