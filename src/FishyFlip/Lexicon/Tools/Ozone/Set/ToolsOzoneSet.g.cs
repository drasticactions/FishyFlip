// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Set
{

    /// <summary>
    /// tools.ozone.set Endpoint Class.
    /// </summary>
    public sealed class ToolsOzoneSet
    {

        private ATProtocol atp;

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsOzoneSet"/> class.
        /// </summary>
        /// <param name="atp"><see cref="ATProtocol"/>.</param>
        internal ToolsOzoneSet(ATProtocol atp)
        {
            this.atp = atp;
        }

        /// <summary>
        /// Gets the ATProtocol.
        /// </summary>
        internal ATProtocol ATProtocol => this.atp;


        /// <summary>
        /// Add values to a specific set. Attempting to add values to a set that does not exist will result in an error.
        /// </summary>
        /// <param name="name">Name of the set to add values to</param>
        /// <param name="values">Array of string values to add to the set</param>
        /// <param name="cancellationToken"></param>
        public Task<Result<Success?>> AddValuesAsync (string name, List<string> values, CancellationToken cancellationToken = default)
        {
            return atp.AddValuesAsync(name, values, cancellationToken);
        }


        /// <summary>
        /// Delete an entire set. Attempting to delete a set that does not exist will result in an error.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.SetNotFoundError"/> set with the given name does not exist <br/>
        /// </summary>
        /// <param name="name">Name of the set to delete</param>
        /// <param name="cancellationToken"></param>
        public Task<Result<FishyFlip.Lexicon.Tools.Ozone.Set.DeleteSetOutput?>> DeleteSetAsync (string name, CancellationToken cancellationToken = default)
        {
            return atp.DeleteSetAsync(name, cancellationToken);
        }


        /// <summary>
        /// Delete values from a specific set. Attempting to delete values that are not in the set will not result in an error
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.SetNotFoundError"/> set with the given name does not exist <br/>
        /// </summary>
        /// <param name="name">Name of the set to delete values from</param>
        /// <param name="values">Array of string values to delete from the set</param>
        /// <param name="cancellationToken"></param>
        public Task<Result<Success?>> DeleteValuesAsync (string name, List<string> values, CancellationToken cancellationToken = default)
        {
            return atp.DeleteValuesAsync(name, values, cancellationToken);
        }


        /// <summary>
        /// Get a specific set and its values
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.SetNotFoundError"/> set with the given name does not exist <br/>
        /// </summary>
        /// <param name="name"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        public Task<Result<FishyFlip.Lexicon.Tools.Ozone.Set.GetValuesOutput?>> GetValuesAsync (string name, int? limit = 100, string? cursor = default, CancellationToken cancellationToken = default)
        {
            return atp.GetValuesAsync(name, limit, cursor, cancellationToken);
        }


        /// <summary>
        /// Query available sets
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="namePrefix"></param>
        /// <param name="sortBy"></param>
        /// <param name="sortDirection">Defaults to ascending order of name field.</param>
        /// <param name="cancellationToken"></param>
        public Task<Result<FishyFlip.Lexicon.Tools.Ozone.Set.QuerySetsOutput?>> QuerySetsAsync (int? limit = 50, string? cursor = default, string? namePrefix = default, string? sortBy = default, string? sortDirection = default, CancellationToken cancellationToken = default)
        {
            return atp.QuerySetsAsync(limit, cursor, namePrefix, sortBy, sortDirection, cancellationToken);
        }

        /// <summary>
        /// Query available sets
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="namePrefix"></param>
        /// <param name="sortBy"></param>
        /// <param name="sortDirection">Defaults to ascending order of name field.</param>
        /// <param name="cancellationToken"></param>
        public QuerySetsOutputCollection QuerySetsCollectionAsync (int? limit = 50, string? cursor = default, string? namePrefix = default, string? sortBy = default, string? sortDirection = default, CancellationToken cancellationToken = default)
        {
            return new QuerySetsOutputCollection(atp, limit, cursor, namePrefix, sortBy, sortDirection, cancellationToken);
        }


        /// <summary>
        /// Create or update set metadata
        /// </summary>
        /// <param name="Set"></param>
        /// <param name="cancellationToken"></param>
        public Task<Result<FishyFlip.Lexicon.Tools.Ozone.Set.SetView?>> UpsertSetAsync (FishyFlip.Lexicon.Tools.Ozone.Set.Set Set, CancellationToken cancellationToken = default)
        {
            return atp.UpsertSetAsync(Set, cancellationToken);
        }

    }
}

