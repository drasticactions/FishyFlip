// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Signature
{
    public partial class FindRelatedAccountsOutput : ATObject, ICBOREncodable<FindRelatedAccountsOutput>, IJsonEncodable<FindRelatedAccountsOutput>, IParsable<FindRelatedAccountsOutput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="FindRelatedAccountsOutput"/> class.
        /// </summary>
        /// <param name="cursor"></param>
        /// <param name="accounts"></param>
        public FindRelatedAccountsOutput(string? cursor = default, List<FishyFlip.Lexicon.Tools.Ozone.Signature.RelatedAccount> accounts = default)
        {
            this.Cursor = cursor;
            this.Accounts = accounts;
            this.Type = "tools.ozone.signature.findRelatedAccounts#FindRelatedAccountsOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="FindRelatedAccountsOutput"/> class.
        /// </summary>
        public FindRelatedAccountsOutput()
        {
            this.Type = "tools.ozone.signature.findRelatedAccounts#FindRelatedAccountsOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="FindRelatedAccountsOutput"/> class.
        /// </summary>
        public FindRelatedAccountsOutput(CBORObject obj)
        {
            if (obj["cursor"] is not null) this.Cursor = obj["cursor"].AsString();
            if (obj["accounts"] is not null) this.Accounts = obj["accounts"].Values.Select(n =>new FishyFlip.Lexicon.Tools.Ozone.Signature.RelatedAccount(n)).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the cursor.
        /// </summary>
        [JsonPropertyName("cursor")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Cursor { get; set; }

        /// <summary>
        /// Gets or sets the accounts.
        /// </summary>
        [JsonPropertyName("accounts")]
        [JsonRequired]
        public List<FishyFlip.Lexicon.Tools.Ozone.Signature.RelatedAccount> Accounts { get; set; }

        public const string RecordType = "tools.ozone.signature.findRelatedAccounts#FindRelatedAccountsOutput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Signature.FindRelatedAccountsOutput>)SourceGenerationContext.Default.ToolsOzoneSignatureFindRelatedAccountsOutput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Signature.FindRelatedAccountsOutput>)SourceGenerationContext.Default.ToolsOzoneSignatureFindRelatedAccountsOutput);
        }

        public static new FindRelatedAccountsOutput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Signature.FindRelatedAccountsOutput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Signature.FindRelatedAccountsOutput>)SourceGenerationContext.Default.ToolsOzoneSignatureFindRelatedAccountsOutput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new FindRelatedAccountsOutput FromCBORObject(CBORObject obj)
        {
            return new FindRelatedAccountsOutput(obj);
        }

        /// <inheritdoc/>
        public static FindRelatedAccountsOutput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<FindRelatedAccountsOutput>(s, (JsonTypeInfo<FindRelatedAccountsOutput>)SourceGenerationContext.Default.ToolsOzoneSignatureFindRelatedAccountsOutput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out FindRelatedAccountsOutput result)
        {
            result = JsonSerializer.Deserialize<FindRelatedAccountsOutput>(s, (JsonTypeInfo<FindRelatedAccountsOutput>)SourceGenerationContext.Default.ToolsOzoneSignatureFindRelatedAccountsOutput);
            return result != null;
        }
    }
}

