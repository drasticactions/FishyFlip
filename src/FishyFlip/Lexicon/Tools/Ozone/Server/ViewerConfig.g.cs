// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Server
{
    public partial class ViewerConfig : ATObject, ICBOREncodable<ViewerConfig>, IJsonEncodable<ViewerConfig>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewerConfig"/> class.
        /// </summary>
        /// <param name="role">
        /// <br/> Known Values: <br/>
        /// roleAdmin - Admin role. Highest level of access, can perform all actions. <br/>
        /// roleModerator - Moderator role. Can perform most actions. <br/>
        /// roleTriage - Triage role. Mostly intended for monitoring and escalating issues. <br/>
        /// </param>
        public ViewerConfig(string? role = default)
        {
            this.Role = role;
            this.Type = "tools.ozone.server.getConfig#viewerConfig";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ViewerConfig"/> class.
        /// </summary>
        public ViewerConfig()
        {
            this.Type = "tools.ozone.server.getConfig#viewerConfig";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ViewerConfig"/> class.
        /// </summary>
        public ViewerConfig(CBORObject obj)
        {
            if (obj["role"] is not null) this.Role = obj["role"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the role.
        /// <br/> Known Values: <br/>
        /// roleAdmin - Admin role. Highest level of access, can perform all actions. <br/>
        /// roleModerator - Moderator role. Can perform most actions. <br/>
        /// roleTriage - Triage role. Mostly intended for monitoring and escalating issues. <br/>
        /// </summary>
        [JsonPropertyName("role")]
        public string? Role { get; set; }

        public const string RecordType = "tools.ozone.server.getConfig#viewerConfig";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Server.ViewerConfig>)SourceGenerationContext.Default.ToolsOzoneServerViewerConfig);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Server.ViewerConfig>)SourceGenerationContext.Default.ToolsOzoneServerViewerConfig);
        }

        public static new ViewerConfig FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Server.ViewerConfig>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Server.ViewerConfig>)SourceGenerationContext.Default.ToolsOzoneServerViewerConfig)!;
        }

         /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

         /// <inheritdoc/>
        public static new ViewerConfig FromCBORObject(CBORObject obj)
        {
            return new ViewerConfig(obj);
        }

    }
}

