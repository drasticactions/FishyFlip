// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Server
{
    public partial class ServiceConfig : ATObject, ICBOREncodable<ServiceConfig>, IJsonEncodable<ServiceConfig>, IParsable<ServiceConfig>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceConfig"/> class.
        /// </summary>
        /// <param name="url"></param>
        public ServiceConfig(string? url = default)
        {
            this.Url = url;
            this.Type = "tools.ozone.server.getConfig#serviceConfig";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceConfig"/> class.
        /// </summary>
        public ServiceConfig()
        {
            this.Type = "tools.ozone.server.getConfig#serviceConfig";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceConfig"/> class.
        /// </summary>
        public ServiceConfig(CBORObject obj)
        {
            if (obj["url"] is not null) this.Url = obj["url"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the url.
        /// </summary>
        [JsonPropertyName("url")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Url { get; set; }

        public const string RecordType = "tools.ozone.server.getConfig#serviceConfig";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Server.ServiceConfig>)SourceGenerationContext.Default.ToolsOzoneServerServiceConfig);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Server.ServiceConfig>)SourceGenerationContext.Default.ToolsOzoneServerServiceConfig);
        }

        public static new ServiceConfig FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Server.ServiceConfig>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Server.ServiceConfig>)SourceGenerationContext.Default.ToolsOzoneServerServiceConfig)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new ServiceConfig FromCBORObject(CBORObject obj)
        {
            return new ServiceConfig(obj);
        }

        /// <inheritdoc/>
        public static ServiceConfig Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<ServiceConfig>(s, (JsonTypeInfo<ServiceConfig>)SourceGenerationContext.Default.ToolsOzoneServerServiceConfig)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out ServiceConfig result)
        {
            result = JsonSerializer.Deserialize<ServiceConfig>(s, (JsonTypeInfo<ServiceConfig>)SourceGenerationContext.Default.ToolsOzoneServerServiceConfig);
            return result != null;
        }
    }
}

