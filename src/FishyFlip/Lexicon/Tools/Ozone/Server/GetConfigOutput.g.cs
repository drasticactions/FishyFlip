// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable

namespace FishyFlip.Lexicon.Tools.Ozone.Server
{
    public partial class GetConfigOutput : ATObject
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="GetConfigOutput"/> class.
        /// </summary>
        /// <param name="appview">
        /// tools.ozone.server.defs#serviceConfig
        /// </param>
        /// <param name="pds">
        /// tools.ozone.server.defs#serviceConfig
        /// </param>
        /// <param name="blobDivert">
        /// tools.ozone.server.defs#serviceConfig
        /// </param>
        /// <param name="chat">
        /// tools.ozone.server.defs#serviceConfig
        /// </param>
        /// <param name="viewer">
        /// tools.ozone.server.defs#viewerConfig
        /// </param>
        public GetConfigOutput(Tools.Ozone.Server.ServiceConfig? appview = default, Tools.Ozone.Server.ServiceConfig? pds = default, Tools.Ozone.Server.ServiceConfig? blobDivert = default, Tools.Ozone.Server.ServiceConfig? chat = default, Tools.Ozone.Server.ViewerConfig? viewer = default)
        {
            this.Appview = appview;
            this.Pds = pds;
            this.BlobDivert = blobDivert;
            this.Chat = chat;
            this.Viewer = viewer;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetConfigOutput"/> class.
        /// </summary>
        public GetConfigOutput()
        {
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetConfigOutput"/> class.
        /// </summary>
        public GetConfigOutput(CBORObject obj)
        {
            if (obj["appview"] is not null) this.Appview = new Tools.Ozone.Server.ServiceConfig(obj["appview"]);
            if (obj["pds"] is not null) this.Pds = new Tools.Ozone.Server.ServiceConfig(obj["pds"]);
            if (obj["blobDivert"] is not null) this.BlobDivert = new Tools.Ozone.Server.ServiceConfig(obj["blobDivert"]);
            if (obj["chat"] is not null) this.Chat = new Tools.Ozone.Server.ServiceConfig(obj["chat"]);
            if (obj["viewer"] is not null) this.Viewer = new Tools.Ozone.Server.ViewerConfig(obj["viewer"]);
        }

        /// <summary>
        /// Gets or sets the appview.
        /// tools.ozone.server.defs#serviceConfig
        /// </summary>
        [JsonPropertyName("appview")]
        public Tools.Ozone.Server.ServiceConfig? Appview { get; set; }

        /// <summary>
        /// Gets or sets the pds.
        /// tools.ozone.server.defs#serviceConfig
        /// </summary>
        [JsonPropertyName("pds")]
        public Tools.Ozone.Server.ServiceConfig? Pds { get; set; }

        /// <summary>
        /// Gets or sets the blobDivert.
        /// tools.ozone.server.defs#serviceConfig
        /// </summary>
        [JsonPropertyName("blobDivert")]
        public Tools.Ozone.Server.ServiceConfig? BlobDivert { get; set; }

        /// <summary>
        /// Gets or sets the chat.
        /// tools.ozone.server.defs#serviceConfig
        /// </summary>
        [JsonPropertyName("chat")]
        public Tools.Ozone.Server.ServiceConfig? Chat { get; set; }

        /// <summary>
        /// Gets or sets the viewer.
        /// tools.ozone.server.defs#viewerConfig
        /// </summary>
        [JsonPropertyName("viewer")]
        public Tools.Ozone.Server.ViewerConfig? Viewer { get; set; }

        /// <summary>
        /// Gets the ATRecord Type.
        /// </summary>
        [JsonPropertyName("$type")]
        public override string Type => "tools.ozone.server.getConfig#GetConfigOutput";

        public const string RecordType = "tools.ozone.server.getConfig#GetConfigOutput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize<Tools.Ozone.Server.GetConfigOutput>(this, (JsonTypeInfo<Tools.Ozone.Server.GetConfigOutput>)SourceGenerationContext.Default.ToolsOzoneServerGetConfigOutput)!;
        }

        public static GetConfigOutput FromJson(string json)
        {
            return JsonSerializer.Deserialize<Tools.Ozone.Server.GetConfigOutput>(json, (JsonTypeInfo<Tools.Ozone.Server.GetConfigOutput>)SourceGenerationContext.Default.ToolsOzoneServerGetConfigOutput)!;
        }
    }
}

