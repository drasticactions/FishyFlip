// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Verification
{

    /// <summary>
    /// tools.ozone.verification Endpoint Group.
    /// </summary>
    public static class VerificationEndpoints
    {

       public const string GrantVerifications = "/xrpc/tools.ozone.verification.grantVerifications";

       public const string ListVerifications = "/xrpc/tools.ozone.verification.listVerifications";

       public const string RevokeVerifications = "/xrpc/tools.ozone.verification.revokeVerifications";


        /// <summary>
        /// Grant verifications to multiple subjects. Allows batch processing of up to 100 verifications at once.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="verifications">Array of verification requests to process</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Verification.GrantVerificationsOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Tools.Ozone.Verification.GrantVerificationsOutput?>> GrantVerificationsAsync (this FishyFlip.ATProtocol atp, List<FishyFlip.Lexicon.Tools.Ozone.Verification.VerificationInput> verifications, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GrantVerifications.ToString();
            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoProxy, atp.Options.OzoneProxyHeader);
            var inputItem = new GrantVerificationsInput();
            inputItem.Verifications = verifications;
            return atp.Post<GrantVerificationsInput, FishyFlip.Lexicon.Tools.Ozone.Verification.GrantVerificationsOutput?>(endpointUrl, atp.Options.SourceGenerationContext.ToolsOzoneVerificationGrantVerificationsInput!, atp.Options.SourceGenerationContext.ToolsOzoneVerificationGrantVerificationsOutput!, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// List verifications
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cursor">Pagination cursor</param>
        /// <param name="limit">Maximum number of results to return</param>
        /// <param name="createdAfter">Filter to verifications created after this timestamp</param>
        /// <param name="createdBefore">Filter to verifications created before this timestamp</param>
        /// <param name="issuers">Filter to verifications from specific issuers</param>
        /// <param name="subjects">Filter to specific verified DIDs</param>
        /// <param name="sortDirection">Sort direction for creation date</param>
        /// <param name="isRevoked">Filter to verifications that are revoked or not. By default, includes both.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Verification.ListVerificationsOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Tools.Ozone.Verification.ListVerificationsOutput?>> ListVerificationsAsync (this FishyFlip.ATProtocol atp, string? cursor = default, int? limit = 50, DateTime? createdAfter = default, DateTime? createdBefore = default, List<FishyFlip.Models.ATDid>? issuers = default, List<FishyFlip.Models.ATDid>? subjects = default, string? sortDirection = default, bool? isRevoked = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = ListVerifications.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            if (cursor != null)
            {
                queryStrings.Add("cursor=" + cursor);
            }

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            if (createdAfter != null)
            {
                queryStrings.Add("createdAfter=" + createdAfter);
            }

            if (createdBefore != null)
            {
                queryStrings.Add("createdBefore=" + createdBefore);
            }

            if (issuers != null)
            {
                queryStrings.Add(string.Join("&", issuers.Select(n => "issuers=" + n)));
            }

            if (subjects != null)
            {
                queryStrings.Add(string.Join("&", subjects.Select(n => "subjects=" + n)));
            }

            if (sortDirection != null)
            {
                queryStrings.Add("sortDirection=" + sortDirection);
            }

            if (isRevoked != null)
            {
                queryStrings.Add("isRevoked=" + (isRevoked.Value ? "true" : "false"));
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoProxy, atp.Options.OzoneProxyHeader);
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Tools.Ozone.Verification.ListVerificationsOutput>(endpointUrl, atp.Options.SourceGenerationContext.ToolsOzoneVerificationListVerificationsOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Revoke previously granted verifications in batches of up to 100.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="uris">Array of verification record uris to revoke</param>
        /// <param name="revokeReason">Reason for revoking the verification. This is optional and can be omitted if not needed.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Verification.RevokeVerificationsOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Tools.Ozone.Verification.RevokeVerificationsOutput?>> RevokeVerificationsAsync (this FishyFlip.ATProtocol atp, List<FishyFlip.Models.ATUri> uris, string? revokeReason = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = RevokeVerifications.ToString();
            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoProxy, atp.Options.OzoneProxyHeader);
            var inputItem = new RevokeVerificationsInput();
            inputItem.Uris = uris;
            inputItem.RevokeReason = revokeReason;
            return atp.Post<RevokeVerificationsInput, FishyFlip.Lexicon.Tools.Ozone.Verification.RevokeVerificationsOutput?>(endpointUrl, atp.Options.SourceGenerationContext.ToolsOzoneVerificationRevokeVerificationsInput!, atp.Options.SourceGenerationContext.ToolsOzoneVerificationRevokeVerificationsOutput!, inputItem, cancellationToken, headers);
        }

    }
}

