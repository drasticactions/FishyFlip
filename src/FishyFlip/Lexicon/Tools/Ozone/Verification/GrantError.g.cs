// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Verification
{
    /// <summary>
    /// Error object for failed verifications.
    /// </summary>
    public partial class GrantError : ATObject, ICBOREncodable<GrantError>, IJsonEncodable<GrantError>, IParsable<GrantError>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="GrantError"/> class.
        /// </summary>
        /// <param name="error">Error message describing the reason for failure.</param>
        /// <param name="subject">The did of the subject being verified</param>
        public GrantError(string error = default, FishyFlip.Models.ATDid subject = default)
        {
            this.Error = error;
            this.Subject = subject;
            this.Type = "tools.ozone.verification.grantVerifications#grantError";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GrantError"/> class.
        /// </summary>
        public GrantError()
        {
            this.Type = "tools.ozone.verification.grantVerifications#grantError";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GrantError"/> class.
        /// </summary>
        public GrantError(CBORObject obj)
        {
            if (obj["error"] is not null) this.Error = obj["error"].AsString();
            if (obj["subject"] is not null) this.Subject = obj["subject"].ToATDid();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the error.
        /// <br/> Error message describing the reason for failure.
        /// </summary>
        [JsonPropertyName("error")]
        [JsonRequired]
        public string Error { get; set; }

        /// <summary>
        /// Gets or sets the subject.
        /// <br/> The did of the subject being verified
        /// </summary>
        [JsonPropertyName("subject")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATDidJsonConverter))]
        public FishyFlip.Models.ATDid Subject { get; set; }

        public const string RecordType = "tools.ozone.verification.grantVerifications#grantError";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Verification.GrantError>)SourceGenerationContext.Default.ToolsOzoneVerificationGrantError);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Verification.GrantError>)SourceGenerationContext.Default.ToolsOzoneVerificationGrantError);
        }

        public static new GrantError FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Verification.GrantError>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Verification.GrantError>)SourceGenerationContext.Default.ToolsOzoneVerificationGrantError)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new GrantError FromCBORObject(CBORObject obj)
        {
            return new GrantError(obj);
        }

        /// <inheritdoc/>
        public static GrantError Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<GrantError>(s, (JsonTypeInfo<GrantError>)SourceGenerationContext.Default.ToolsOzoneVerificationGrantError)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out GrantError result)
        {
            result = JsonSerializer.Deserialize<GrantError>(s, (JsonTypeInfo<GrantError>)SourceGenerationContext.Default.ToolsOzoneVerificationGrantError);
            return result != null;
        }
    }
}

