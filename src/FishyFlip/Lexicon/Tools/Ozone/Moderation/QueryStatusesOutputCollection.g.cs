// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Moderation
{
    /// <summary>
    /// QueryStatusesOutput Collection.
    /// </summary>
    public class QueryStatusesOutputCollection : ATObjectCollectionBase<FishyFlip.Lexicon.Tools.Ozone.Moderation.SubjectStatusView>, IAsyncEnumerable<FishyFlip.Lexicon.Tools.Ozone.Moderation.SubjectStatusView>
    {

        public QueryStatusesOutputCollection(FishyFlip.ATProtocol atp, int? queueCount = 0, int? queueIndex = 0, string? queueSeed = default, bool? includeAllUserRecords = default, string? subject = default, string? comment = default, DateTime? reportedAfter = default, DateTime? reportedBefore = default, DateTime? reviewedAfter = default, DateTime? hostingDeletedAfter = default, DateTime? hostingDeletedBefore = default, DateTime? hostingUpdatedAfter = default, DateTime? hostingUpdatedBefore = default, List<string>? hostingStatuses = default, DateTime? reviewedBefore = default, bool? includeMuted = default, bool? onlyMuted = default, string? reviewState = default, List<string>? ignoreSubjects = default, FishyFlip.Models.ATDid? lastReviewedBy = default, string? sortField = default, string? sortDirection = default, bool? takendown = default, bool? appealed = default, int? limit = 50, List<string>? tags = default, List<string>? excludeTags = default, string? cursor = default, List<string>? collections = default, string? subjectType = default, int? minAccountSuspendCount = 0, int? minReportedRecordsCount = 0, int? minTakendownRecordsCount = 0, int? minPriorityScore = 0, CancellationToken cancellationToken = default)
             : base(atp)
        {
            this.QueueCount = queueCount;
            this.QueueIndex = queueIndex;
            this.QueueSeed = queueSeed;
            this.IncludeAllUserRecords = includeAllUserRecords;
            this.Subject = subject;
            this.Comment = comment;
            this.ReportedAfter = reportedAfter;
            this.ReportedBefore = reportedBefore;
            this.ReviewedAfter = reviewedAfter;
            this.HostingDeletedAfter = hostingDeletedAfter;
            this.HostingDeletedBefore = hostingDeletedBefore;
            this.HostingUpdatedAfter = hostingUpdatedAfter;
            this.HostingUpdatedBefore = hostingUpdatedBefore;
            this.HostingStatuses = hostingStatuses;
            this.ReviewedBefore = reviewedBefore;
            this.IncludeMuted = includeMuted;
            this.OnlyMuted = onlyMuted;
            this.ReviewState = reviewState;
            this.IgnoreSubjects = ignoreSubjects;
            this.LastReviewedBy = lastReviewedBy;
            this.SortField = sortField;
            this.SortDirection = sortDirection;
            this.Takendown = takendown;
            this.Appealed = appealed;
            this.Limit = limit;
            this.Tags = tags;
            this.ExcludeTags = excludeTags;
            this.Cursor = cursor;
            this.Collections = collections;
            this.SubjectType = subjectType;
            this.MinAccountSuspendCount = minAccountSuspendCount;
            this.MinReportedRecordsCount = minReportedRecordsCount;
            this.MinTakendownRecordsCount = minTakendownRecordsCount;
            this.MinPriorityScore = minPriorityScore;
            this.CancellationToken = cancellationToken;
        }

        public int? QueueCount { get; }

        public int? QueueIndex { get; }

        public string? QueueSeed { get; }

        public bool? IncludeAllUserRecords { get; }

        public string? Subject { get; }

        public string? Comment { get; }

        public DateTime? ReportedAfter { get; }

        public DateTime? ReportedBefore { get; }

        public DateTime? ReviewedAfter { get; }

        public DateTime? HostingDeletedAfter { get; }

        public DateTime? HostingDeletedBefore { get; }

        public DateTime? HostingUpdatedAfter { get; }

        public DateTime? HostingUpdatedBefore { get; }

        public List<string>? HostingStatuses { get; }

        public DateTime? ReviewedBefore { get; }

        public bool? IncludeMuted { get; }

        public bool? OnlyMuted { get; }

        public string? ReviewState { get; }

        public List<string>? IgnoreSubjects { get; }

        public FishyFlip.Models.ATDid? LastReviewedBy { get; }

        public string? SortField { get; }

        public string? SortDirection { get; }

        public bool? Takendown { get; }

        public bool? Appealed { get; }

        public List<string>? Tags { get; }

        public List<string>? ExcludeTags { get; }

        public List<string>? Collections { get; }

        public string? SubjectType { get; }

        public int? MinAccountSuspendCount { get; }

        public int? MinReportedRecordsCount { get; }

        public int? MinTakendownRecordsCount { get; }

        public int? MinPriorityScore { get; }

        /// <inheritdoc/>
        public override async Task<(IList<FishyFlip.Lexicon.Tools.Ozone.Moderation.SubjectStatusView> Posts, string Cursor)> GetRecordsAsync(int? limit = null, CancellationToken? token = default)
        {
            token = token ?? this.CancellationToken ?? System.Threading.CancellationToken.None;
            var (result, error) = await this.ATProtocol.QueryStatusesAsync(queueCount: this.QueueCount, queueIndex: this.QueueIndex, queueSeed: this.QueueSeed, includeAllUserRecords: this.IncludeAllUserRecords, subject: this.Subject, comment: this.Comment, reportedAfter: this.ReportedAfter, reportedBefore: this.ReportedBefore, reviewedAfter: this.ReviewedAfter, hostingDeletedAfter: this.HostingDeletedAfter, hostingDeletedBefore: this.HostingDeletedBefore, hostingUpdatedAfter: this.HostingUpdatedAfter, hostingUpdatedBefore: this.HostingUpdatedBefore, hostingStatuses: this.HostingStatuses, reviewedBefore: this.ReviewedBefore, includeMuted: this.IncludeMuted, onlyMuted: this.OnlyMuted, reviewState: this.ReviewState, ignoreSubjects: this.IgnoreSubjects, lastReviewedBy: this.LastReviewedBy, sortField: this.SortField, sortDirection: this.SortDirection, takendown: this.Takendown, appealed: this.Appealed, tags: this.Tags, excludeTags: this.ExcludeTags, collections: this.Collections, subjectType: this.SubjectType, minAccountSuspendCount: this.MinAccountSuspendCount, minReportedRecordsCount: this.MinReportedRecordsCount, minTakendownRecordsCount: this.MinTakendownRecordsCount, minPriorityScore: this.MinPriorityScore, limit: limit, cursor: this.Cursor, cancellationToken: token.Value!);

            this.HandleATError(error);

            if (result == null || result.SubjectStatuses == null)
            {
                throw new InvalidOperationException("The result or its properties cannot be null.");
            }

            return (result.SubjectStatuses, result.Cursor ?? string.Empty);
        }

        public static QueryStatusesOutputCollection Create(FishyFlip.ATProtocol atp, int? queueCount = 0, int? queueIndex = 0, string? queueSeed = default, bool? includeAllUserRecords = default, string? subject = default, string? comment = default, DateTime? reportedAfter = default, DateTime? reportedBefore = default, DateTime? reviewedAfter = default, DateTime? hostingDeletedAfter = default, DateTime? hostingDeletedBefore = default, DateTime? hostingUpdatedAfter = default, DateTime? hostingUpdatedBefore = default, List<string>? hostingStatuses = default, DateTime? reviewedBefore = default, bool? includeMuted = default, bool? onlyMuted = default, string? reviewState = default, List<string>? ignoreSubjects = default, FishyFlip.Models.ATDid? lastReviewedBy = default, string? sortField = default, string? sortDirection = default, bool? takendown = default, bool? appealed = default, int? limit = 50, List<string>? tags = default, List<string>? excludeTags = default, string? cursor = default, List<string>? collections = default, string? subjectType = default, int? minAccountSuspendCount = 0, int? minReportedRecordsCount = 0, int? minTakendownRecordsCount = 0, int? minPriorityScore = 0, CancellationToken cancellationToken = default)
        {
            return new(atp: atp, queueCount: queueCount, queueIndex: queueIndex, queueSeed: queueSeed, includeAllUserRecords: includeAllUserRecords, subject: subject, comment: comment, reportedAfter: reportedAfter, reportedBefore: reportedBefore, reviewedAfter: reviewedAfter, hostingDeletedAfter: hostingDeletedAfter, hostingDeletedBefore: hostingDeletedBefore, hostingUpdatedAfter: hostingUpdatedAfter, hostingUpdatedBefore: hostingUpdatedBefore, hostingStatuses: hostingStatuses, reviewedBefore: reviewedBefore, includeMuted: includeMuted, onlyMuted: onlyMuted, reviewState: reviewState, ignoreSubjects: ignoreSubjects, lastReviewedBy: lastReviewedBy, sortField: sortField, sortDirection: sortDirection, takendown: takendown, appealed: appealed, tags: tags, excludeTags: excludeTags, collections: collections, subjectType: subjectType, minAccountSuspendCount: minAccountSuspendCount, minReportedRecordsCount: minReportedRecordsCount, minTakendownRecordsCount: minTakendownRecordsCount, minPriorityScore: minPriorityScore, limit: limit, cursor: cursor, cancellationToken: cancellationToken);
        }
    }
}

