// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Moderation
{
    public partial class ImageDetails : ATObject, ICBOREncodable<ImageDetails>, IJsonEncodable<ImageDetails>, IParsable<ImageDetails>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageDetails"/> class.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        public ImageDetails(long width = default, long height = default)
        {
            this.Width = width;
            this.Height = height;
            this.Type = "tools.ozone.moderation.defs#imageDetails";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ImageDetails"/> class.
        /// </summary>
        public ImageDetails()
        {
            this.Type = "tools.ozone.moderation.defs#imageDetails";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ImageDetails"/> class.
        /// </summary>
        public ImageDetails(CBORObject obj)
        {
            if (obj["width"] is not null) this.Width = obj["width"].AsInt64Value();
            if (obj["height"] is not null) this.Height = obj["height"].AsInt64Value();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the width.
        /// </summary>
        [JsonPropertyName("width")]
        [JsonRequired]
        public long Width { get; set; }

        /// <summary>
        /// Gets or sets the height.
        /// </summary>
        [JsonPropertyName("height")]
        [JsonRequired]
        public long Height { get; set; }

        public const string RecordType = "tools.ozone.moderation.defs#imageDetails";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ImageDetails>)SourceGenerationContext.Default.ToolsOzoneModerationImageDetails);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ImageDetails>)SourceGenerationContext.Default.ToolsOzoneModerationImageDetails);
        }

        public static new ImageDetails FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Moderation.ImageDetails>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ImageDetails>)SourceGenerationContext.Default.ToolsOzoneModerationImageDetails)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new ImageDetails FromCBORObject(CBORObject obj)
        {
            return new ImageDetails(obj);
        }

        /// <inheritdoc/>
        public static ImageDetails Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<ImageDetails>(s, (JsonTypeInfo<ImageDetails>)SourceGenerationContext.Default.ToolsOzoneModerationImageDetails)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out ImageDetails result)
        {
            result = JsonSerializer.Deserialize<ImageDetails>(s, (JsonTypeInfo<ImageDetails>)SourceGenerationContext.Default.ToolsOzoneModerationImageDetails);
            return result != null;
        }
    }
}

