// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Moderation
{
    /// <summary>
    /// Add/Remove a tag on a subject
    /// </summary>
    public partial class ModEventTag : ATObject, ICBOREncodable<ModEventTag>, IJsonEncodable<ModEventTag>, IParsable<ModEventTag>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventTag"/> class.
        /// </summary>
        /// <param name="add">Tags to be added to the subject. If already exists, won't be duplicated.</param>
        /// <param name="remove">Tags to be removed to the subject. Ignores a tag If it doesn't exist, won't be duplicated.</param>
        /// <param name="comment">Additional comment about added/removed tags.</param>
        public ModEventTag(List<string> add = default, List<string> remove = default, string? comment = default)
        {
            this.Add = add;
            this.Remove = remove;
            this.Comment = comment;
            this.Type = "tools.ozone.moderation.defs#modEventTag";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventTag"/> class.
        /// </summary>
        public ModEventTag()
        {
            this.Type = "tools.ozone.moderation.defs#modEventTag";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventTag"/> class.
        /// </summary>
        public ModEventTag(CBORObject obj)
        {
            if (obj["add"] is not null) this.Add = obj["add"].Values.Select(n =>n.AsString()).ToList();
            if (obj["remove"] is not null) this.Remove = obj["remove"].Values.Select(n =>n.AsString()).ToList();
            if (obj["comment"] is not null) this.Comment = obj["comment"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the add.
        /// <br/> Tags to be added to the subject. If already exists, won't be duplicated.
        /// </summary>
        [JsonPropertyName("add")]
        [JsonRequired]
        public List<string> Add { get; set; }

        /// <summary>
        /// Gets or sets the remove.
        /// <br/> Tags to be removed to the subject. Ignores a tag If it doesn't exist, won't be duplicated.
        /// </summary>
        [JsonPropertyName("remove")]
        [JsonRequired]
        public List<string> Remove { get; set; }

        /// <summary>
        /// Gets or sets the comment.
        /// <br/> Additional comment about added/removed tags.
        /// </summary>
        [JsonPropertyName("comment")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Comment { get; set; }

        public const string RecordType = "tools.ozone.moderation.defs#modEventTag";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventTag>)SourceGenerationContext.Default.ToolsOzoneModerationModEventTag);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventTag>)SourceGenerationContext.Default.ToolsOzoneModerationModEventTag);
        }

        public static new ModEventTag FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventTag>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventTag>)SourceGenerationContext.Default.ToolsOzoneModerationModEventTag)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new ModEventTag FromCBORObject(CBORObject obj)
        {
            return new ModEventTag(obj);
        }

        /// <inheritdoc/>
        public static ModEventTag Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<ModEventTag>(s, (JsonTypeInfo<ModEventTag>)SourceGenerationContext.Default.ToolsOzoneModerationModEventTag)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out ModEventTag result)
        {
            result = JsonSerializer.Deserialize<ModEventTag>(s, (JsonTypeInfo<ModEventTag>)SourceGenerationContext.Default.ToolsOzoneModerationModEventTag);
            return result != null;
        }
    }
}

