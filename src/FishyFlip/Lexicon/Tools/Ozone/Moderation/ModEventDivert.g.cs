// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Moderation
{
    /// <summary>
    /// Divert a record's blobs to a 3rd party service for further scanning/tagging
    /// </summary>
    public partial class ModEventDivert : ATObject, ICBOREncodable<ModEventDivert>, IJsonEncodable<ModEventDivert>, IParsable<ModEventDivert>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventDivert"/> class.
        /// </summary>
        /// <param name="comment"></param>
        public ModEventDivert(string? comment = default)
        {
            this.Comment = comment;
            this.Type = "tools.ozone.moderation.defs#modEventDivert";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventDivert"/> class.
        /// </summary>
        public ModEventDivert()
        {
            this.Type = "tools.ozone.moderation.defs#modEventDivert";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventDivert"/> class.
        /// </summary>
        public ModEventDivert(CBORObject obj)
        {
            if (obj["comment"] is not null) this.Comment = obj["comment"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the comment.
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get; set; }

        public const string RecordType = "tools.ozone.moderation.defs#modEventDivert";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventDivert>)SourceGenerationContext.Default.ToolsOzoneModerationModEventDivert);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventDivert>)SourceGenerationContext.Default.ToolsOzoneModerationModEventDivert);
        }

        public static new ModEventDivert FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventDivert>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventDivert>)SourceGenerationContext.Default.ToolsOzoneModerationModEventDivert)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new ModEventDivert FromCBORObject(CBORObject obj)
        {
            return new ModEventDivert(obj);
        }

        /// <inheritdoc/>
        public static ModEventDivert Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<ModEventDivert>(s, (JsonTypeInfo<ModEventDivert>)SourceGenerationContext.Default.ToolsOzoneModerationModEventDivert)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out ModEventDivert result)
        {
            result = JsonSerializer.Deserialize<ModEventDivert>(s, (JsonTypeInfo<ModEventDivert>)SourceGenerationContext.Default.ToolsOzoneModerationModEventDivert);
            return result != null;
        }
    }
}

