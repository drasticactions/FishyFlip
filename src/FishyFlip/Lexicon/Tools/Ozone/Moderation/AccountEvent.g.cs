// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable

namespace FishyFlip.Lexicon.Tools.Ozone.Moderation
{
    /// <summary>
    /// Logs account status related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.
    /// </summary>
    public partial class AccountEvent : ATObject
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountEvent"/> class.
        /// </summary>
        /// <param name="comment"></param>
        /// <param name="active">Indicates that the account has a repository which can be fetched from the host that emitted this event.</param>
        /// <param name="status">
        /// <br/> Known Values: <br/>
        /// unknown <br/>
        /// deactivated <br/>
        /// deleted <br/>
        /// takendown <br/>
        /// suspended <br/>
        /// tombstoned <br/>
        /// </param>
        /// <param name="timestamp"></param>
        public AccountEvent(string? comment = default, bool? active = default, string? status = default, DateTime? timestamp = default)
        {
            this.Comment = comment;
            this.Active = active;
            this.Status = status;
            this.Timestamp = timestamp;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AccountEvent"/> class.
        /// </summary>
        public AccountEvent()
        {
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AccountEvent"/> class.
        /// </summary>
        public AccountEvent(CBORObject obj)
        {
            if (obj["comment"] is not null) this.Comment = obj["comment"].AsString();
            if (obj["active"] is not null) this.Active = obj["active"].AsBoolean();
            if (obj["status"] is not null) this.Status = obj["status"].AsString();
            if (obj["timestamp"] is not null) this.Timestamp = obj["timestamp"].ToDateTime();
        }

        /// <summary>
        /// Gets or sets the comment.
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get; set; }

        /// <summary>
        /// Gets or sets the active.
        /// <br/> Indicates that the account has a repository which can be fetched from the host that emitted this event.
        /// </summary>
        [JsonPropertyName("active")]
        [JsonRequired]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or sets the status.
        /// <br/> Known Values: <br/>
        /// unknown <br/>
        /// deactivated <br/>
        /// deleted <br/>
        /// takendown <br/>
        /// suspended <br/>
        /// tombstoned <br/>
        /// </summary>
        [JsonPropertyName("status")]
        public string? Status { get; set; }

        /// <summary>
        /// Gets or sets the timestamp.
        /// </summary>
        [JsonPropertyName("timestamp")]
        [JsonRequired]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets the ATRecord Type.
        /// </summary>
        [JsonPropertyName("$type")]
        public override string Type => "tools.ozone.moderation.defs#accountEvent";

        public const string RecordType = "tools.ozone.moderation.defs#accountEvent";

        public override string ToJson()
        {
            return JsonSerializer.Serialize<FishyFlip.Lexicon.Tools.Ozone.Moderation.AccountEvent>(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.AccountEvent>)SourceGenerationContext.Default.ToolsOzoneModerationAccountEvent)!;
        }

        public static AccountEvent FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Moderation.AccountEvent>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.AccountEvent>)SourceGenerationContext.Default.ToolsOzoneModerationAccountEvent)!;
        }
    }
}

