// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Moderation
{
    /// <summary>
    /// Add a comment to a subject. An empty comment will clear any previously set sticky comment.
    /// </summary>
    public partial class ModEventComment : ATObject, ICBOREncodable<ModEventComment>, IJsonEncodable<ModEventComment>, IParsable<ModEventComment>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventComment"/> class.
        /// </summary>
        /// <param name="comment"></param>
        /// <param name="sticky">Make the comment persistent on the subject</param>
        public ModEventComment(string? comment = default, bool? sticky = default)
        {
            this.Comment = comment;
            this.Sticky = sticky;
            this.Type = "tools.ozone.moderation.defs#modEventComment";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventComment"/> class.
        /// </summary>
        public ModEventComment()
        {
            this.Type = "tools.ozone.moderation.defs#modEventComment";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventComment"/> class.
        /// </summary>
        public ModEventComment(CBORObject obj)
        {
            if (obj["comment"] is not null) this.Comment = obj["comment"].AsString();
            if (obj["sticky"] is not null) this.Sticky = obj["sticky"].AsBoolean();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the comment.
        /// </summary>
        [JsonPropertyName("comment")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Comment { get; set; }

        /// <summary>
        /// Gets or sets the sticky.
        /// <br/> Make the comment persistent on the subject
        /// </summary>
        [JsonPropertyName("sticky")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? Sticky { get; set; }

        public const string RecordType = "tools.ozone.moderation.defs#modEventComment";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventComment>)SourceGenerationContext.Default.ToolsOzoneModerationModEventComment);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventComment>)SourceGenerationContext.Default.ToolsOzoneModerationModEventComment);
        }

        public static new ModEventComment FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventComment>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventComment>)SourceGenerationContext.Default.ToolsOzoneModerationModEventComment)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new ModEventComment FromCBORObject(CBORObject obj)
        {
            return new ModEventComment(obj);
        }

        /// <inheritdoc/>
        public static ModEventComment Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<ModEventComment>(s, (JsonTypeInfo<ModEventComment>)SourceGenerationContext.Default.ToolsOzoneModerationModEventComment)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out ModEventComment result)
        {
            result = JsonSerializer.Deserialize<ModEventComment>(s, (JsonTypeInfo<ModEventComment>)SourceGenerationContext.Default.ToolsOzoneModerationModEventComment);
            return result != null;
        }
    }
}

