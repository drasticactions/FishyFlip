// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Moderation
{
    public partial class QueryEventsOutput : ATObject, ICBOREncodable<QueryEventsOutput>, IJsonEncodable<QueryEventsOutput>, IParsable<QueryEventsOutput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="QueryEventsOutput"/> class.
        /// </summary>
        /// <param name="cursor"></param>
        /// <param name="events"></param>
        public QueryEventsOutput(string? cursor = default, List<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventView> events = default)
        {
            this.Cursor = cursor;
            this.Events = events;
            this.Type = "tools.ozone.moderation.queryEvents#QueryEventsOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="QueryEventsOutput"/> class.
        /// </summary>
        public QueryEventsOutput()
        {
            this.Type = "tools.ozone.moderation.queryEvents#QueryEventsOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="QueryEventsOutput"/> class.
        /// </summary>
        public QueryEventsOutput(CBORObject obj)
        {
            if (obj["cursor"] is not null) this.Cursor = obj["cursor"].AsString();
            if (obj["events"] is not null) this.Events = obj["events"].Values.Select(n =>new FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventView(n)).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the cursor.
        /// </summary>
        [JsonPropertyName("cursor")]
        public string? Cursor { get; set; }

        /// <summary>
        /// Gets or sets the events.
        /// </summary>
        [JsonPropertyName("events")]
        [JsonRequired]
        public List<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventView> Events { get; set; }

        public const string RecordType = "tools.ozone.moderation.queryEvents#QueryEventsOutput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.QueryEventsOutput>)SourceGenerationContext.Default.ToolsOzoneModerationQueryEventsOutput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.QueryEventsOutput>)SourceGenerationContext.Default.ToolsOzoneModerationQueryEventsOutput);
        }

        public static new QueryEventsOutput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Moderation.QueryEventsOutput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.QueryEventsOutput>)SourceGenerationContext.Default.ToolsOzoneModerationQueryEventsOutput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new QueryEventsOutput FromCBORObject(CBORObject obj)
        {
            return new QueryEventsOutput(obj);
        }

        /// <inheritdoc/>
        public static QueryEventsOutput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<QueryEventsOutput>(s, (JsonTypeInfo<QueryEventsOutput>)SourceGenerationContext.Default.ToolsOzoneModerationQueryEventsOutput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out QueryEventsOutput result)
        {
            result = JsonSerializer.Deserialize<QueryEventsOutput>(s, (JsonTypeInfo<QueryEventsOutput>)SourceGenerationContext.Default.ToolsOzoneModerationQueryEventsOutput);
            return result != null;
        }
    }
}

