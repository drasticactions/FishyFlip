// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Moderation
{
    public partial class BlobView : ATObject, ICBOREncodable<BlobView>, IJsonEncodable<BlobView>, IParsable<BlobView>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="BlobView"/> class.
        /// </summary>
        /// <param name="cid"></param>
        /// <param name="mimeType"></param>
        /// <param name="size"></param>
        /// <param name="createdAt"></param>
        /// <param name="details">
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ImageDetails"/> (tools.ozone.moderation.defs#imageDetails) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.VideoDetails"/> (tools.ozone.moderation.defs#videoDetails) <br/>
        /// </param>
        /// <param name="moderation">
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.Moderation"/> (tools.ozone.moderation.defs#moderation)
        /// </param>
        public BlobView(string cid = default, string mimeType = default, long size = default, DateTime? createdAt = default, ATObject? details = default, FishyFlip.Lexicon.Tools.Ozone.Moderation.Moderation? moderation = default)
        {
            this.Cid = cid;
            this.MimeType = mimeType;
            this.Size = size;
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.Details = details;
            this.Moderation = moderation;
            this.Type = "tools.ozone.moderation.defs#blobView";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="BlobView"/> class.
        /// </summary>
        public BlobView()
        {
            this.Type = "tools.ozone.moderation.defs#blobView";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="BlobView"/> class.
        /// </summary>
        public BlobView(CBORObject obj)
        {
            if (obj["cid"] is not null) this.Cid = obj["cid"].AsString();
            if (obj["mimeType"] is not null) this.MimeType = obj["mimeType"].AsString();
            if (obj["size"] is not null) this.Size = obj["size"].AsInt64Value();
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["details"] is not null) this.Details = obj["details"].ToATObject();
            if (obj["moderation"] is not null) this.Moderation = new FishyFlip.Lexicon.Tools.Ozone.Moderation.Moderation(obj["moderation"]);
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the cid.
        /// </summary>
        [JsonPropertyName("cid")]
        [JsonRequired]
        public string Cid { get; set; }

        /// <summary>
        /// Gets or sets the mimeType.
        /// </summary>
        [JsonPropertyName("mimeType")]
        [JsonRequired]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or sets the size.
        /// </summary>
        [JsonPropertyName("size")]
        [JsonRequired]
        public long Size { get; set; }

        /// <summary>
        /// Gets or sets the createdAt.
        /// </summary>
        [JsonPropertyName("createdAt")]
        [JsonRequired]
        public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;

        /// <summary>
        /// Gets or sets the details.
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ImageDetails"/> (tools.ozone.moderation.defs#imageDetails) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.VideoDetails"/> (tools.ozone.moderation.defs#videoDetails) <br/>
        /// </summary>
        [JsonPropertyName("details")]
        public ATObject? Details { get; set; }

        /// <summary>
        /// Gets or sets the moderation.
        /// <br/> <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.Moderation"/> (tools.ozone.moderation.defs#moderation)
        /// </summary>
        [JsonPropertyName("moderation")]
        public FishyFlip.Lexicon.Tools.Ozone.Moderation.Moderation? Moderation { get; set; }

        public const string RecordType = "tools.ozone.moderation.defs#blobView";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.BlobView>)SourceGenerationContext.Default.ToolsOzoneModerationBlobView);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.BlobView>)SourceGenerationContext.Default.ToolsOzoneModerationBlobView);
        }

        public static new BlobView FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Moderation.BlobView>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.BlobView>)SourceGenerationContext.Default.ToolsOzoneModerationBlobView)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new BlobView FromCBORObject(CBORObject obj)
        {
            return new BlobView(obj);
        }

        /// <inheritdoc/>
        public static BlobView Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<BlobView>(s, (JsonTypeInfo<BlobView>)SourceGenerationContext.Default.ToolsOzoneModerationBlobView)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out BlobView result)
        {
            result = JsonSerializer.Deserialize<BlobView>(s, (JsonTypeInfo<BlobView>)SourceGenerationContext.Default.ToolsOzoneModerationBlobView);
            return result != null;
        }
    }
}

