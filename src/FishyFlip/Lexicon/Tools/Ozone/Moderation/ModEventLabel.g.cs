// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Moderation
{
    /// <summary>
    /// Apply/Negate labels on a subject
    /// </summary>
    public partial class ModEventLabel : ATObject, ICBOREncodable<ModEventLabel>, IJsonEncodable<ModEventLabel>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventLabel"/> class.
        /// </summary>
        /// <param name="comment"></param>
        /// <param name="createLabelVals"></param>
        /// <param name="negateLabelVals"></param>
        /// <param name="durationInHours">Indicates how long the label will remain on the subject. Only applies on labels that are being added.</param>
        public ModEventLabel(string? comment = default, List<string> createLabelVals = default, List<string> negateLabelVals = default, long? durationInHours = default)
        {
            this.Comment = comment;
            this.CreateLabelVals = createLabelVals;
            this.NegateLabelVals = negateLabelVals;
            this.DurationInHours = durationInHours;
            this.Type = "tools.ozone.moderation.defs#modEventLabel";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventLabel"/> class.
        /// </summary>
        public ModEventLabel()
        {
            this.Type = "tools.ozone.moderation.defs#modEventLabel";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventLabel"/> class.
        /// </summary>
        public ModEventLabel(CBORObject obj)
        {
            if (obj["comment"] is not null) this.Comment = obj["comment"].AsString();
            if (obj["createLabelVals"] is not null) this.CreateLabelVals = obj["createLabelVals"].Values.Select(n =>n.AsString()).ToList();
            if (obj["negateLabelVals"] is not null) this.NegateLabelVals = obj["negateLabelVals"].Values.Select(n =>n.AsString()).ToList();
            if (obj["durationInHours"] is not null) this.DurationInHours = obj["durationInHours"].AsInt64Value();
        }

        /// <summary>
        /// Gets or sets the comment.
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get; set; }

        /// <summary>
        /// Gets or sets the createLabelVals.
        /// </summary>
        [JsonPropertyName("createLabelVals")]
        [JsonRequired]
        public List<string> CreateLabelVals { get; set; }

        /// <summary>
        /// Gets or sets the negateLabelVals.
        /// </summary>
        [JsonPropertyName("negateLabelVals")]
        [JsonRequired]
        public List<string> NegateLabelVals { get; set; }

        /// <summary>
        /// Gets or sets the durationInHours.
        /// <br/> Indicates how long the label will remain on the subject. Only applies on labels that are being added.
        /// </summary>
        [JsonPropertyName("durationInHours")]
        public long? DurationInHours { get; set; }

        public const string RecordType = "tools.ozone.moderation.defs#modEventLabel";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventLabel>)SourceGenerationContext.Default.ToolsOzoneModerationModEventLabel);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventLabel>)SourceGenerationContext.Default.ToolsOzoneModerationModEventLabel);
        }

        public static new ModEventLabel FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventLabel>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventLabel>)SourceGenerationContext.Default.ToolsOzoneModerationModEventLabel)!;
        }

         /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

         /// <inheritdoc/>
        public static new ModEventLabel FromCBORObject(CBORObject obj)
        {
            return new ModEventLabel(obj);
        }

    }
}

