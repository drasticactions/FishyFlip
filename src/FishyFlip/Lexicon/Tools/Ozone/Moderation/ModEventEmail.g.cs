// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Moderation
{
    /// <summary>
    /// Keep a log of outgoing email to a user
    /// </summary>
    public partial class ModEventEmail : ATObject, ICBOREncodable<ModEventEmail>, IJsonEncodable<ModEventEmail>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventEmail"/> class.
        /// </summary>
        /// <param name="subjectLine">The subject line of the email sent to the user.</param>
        /// <param name="content">The content of the email sent to the user.</param>
        /// <param name="comment">Additional comment about the outgoing comm.</param>
        public ModEventEmail(string subjectLine = default, string? content = default, string? comment = default)
        {
            this.SubjectLine = subjectLine;
            this.Content = content;
            this.Comment = comment;
            this.Type = "tools.ozone.moderation.defs#modEventEmail";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventEmail"/> class.
        /// </summary>
        public ModEventEmail()
        {
            this.Type = "tools.ozone.moderation.defs#modEventEmail";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventEmail"/> class.
        /// </summary>
        public ModEventEmail(CBORObject obj)
        {
            if (obj["subjectLine"] is not null) this.SubjectLine = obj["subjectLine"].AsString();
            if (obj["content"] is not null) this.Content = obj["content"].AsString();
            if (obj["comment"] is not null) this.Comment = obj["comment"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the subjectLine.
        /// <br/> The subject line of the email sent to the user.
        /// </summary>
        [JsonPropertyName("subjectLine")]
        [JsonRequired]
        public string SubjectLine { get; set; }

        /// <summary>
        /// Gets or sets the content.
        /// <br/> The content of the email sent to the user.
        /// </summary>
        [JsonPropertyName("content")]
        public string? Content { get; set; }

        /// <summary>
        /// Gets or sets the comment.
        /// <br/> Additional comment about the outgoing comm.
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get; set; }

        public const string RecordType = "tools.ozone.moderation.defs#modEventEmail";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventEmail>)SourceGenerationContext.Default.ToolsOzoneModerationModEventEmail);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventEmail>)SourceGenerationContext.Default.ToolsOzoneModerationModEventEmail);
        }

        public static new ModEventEmail FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventEmail>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventEmail>)SourceGenerationContext.Default.ToolsOzoneModerationModEventEmail)!;
        }

         /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

         /// <inheritdoc/>
        public static new ModEventEmail FromCBORObject(CBORObject obj)
        {
            return new ModEventEmail(obj);
        }

    }
}

