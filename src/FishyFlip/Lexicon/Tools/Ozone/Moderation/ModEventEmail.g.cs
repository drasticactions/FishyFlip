// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable

namespace FishyFlip.Lexicon.Tools.Ozone.Moderation
{
    /// <summary>
    /// Keep a log of outgoing email to a user
    /// </summary>
    public partial class ModEventEmail : ATObject
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventEmail"/> class.
        /// </summary>
        /// <param name="subjectLine">The subject line of the email sent to the user.</param>
        /// <param name="content">The content of the email sent to the user.</param>
        /// <param name="comment">Additional comment about the outgoing comm.</param>
        public ModEventEmail(string? subjectLine = default, string? content = default, string? comment = default)
        {
            this.SubjectLine = subjectLine;
            this.Content = content;
            this.Comment = comment;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventEmail"/> class.
        /// </summary>
        public ModEventEmail()
        {
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ModEventEmail"/> class.
        /// </summary>
        public ModEventEmail(CBORObject obj)
        {
            if (obj["subjectLine"] is not null) this.SubjectLine = obj["subjectLine"].AsString();
            if (obj["content"] is not null) this.Content = obj["content"].AsString();
            if (obj["comment"] is not null) this.Comment = obj["comment"].AsString();
        }

        /// <summary>
        /// Gets or sets the subjectLine.
        /// The subject line of the email sent to the user.
        /// </summary>
        [JsonPropertyName("subjectLine")]
        [JsonRequired]
        public string? SubjectLine { get; set; }

        /// <summary>
        /// Gets or sets the content.
        /// The content of the email sent to the user.
        /// </summary>
        [JsonPropertyName("content")]
        public string? Content { get; set; }

        /// <summary>
        /// Gets or sets the comment.
        /// Additional comment about the outgoing comm.
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get; set; }

        /// <summary>
        /// Gets the ATRecord Type.
        /// </summary>
        [JsonPropertyName("$type")]
        public override string Type => "tools.ozone.moderation.defs#modEventEmail";

        public const string RecordType = "tools.ozone.moderation.defs#modEventEmail";

        public override string ToJson()
        {
            return JsonSerializer.Serialize<Tools.Ozone.Moderation.ModEventEmail>(this, (JsonTypeInfo<Tools.Ozone.Moderation.ModEventEmail>)SourceGenerationContext.Default.ToolsOzoneModerationModEventEmail)!;
        }

        public static ModEventEmail FromJson(string json)
        {
            return JsonSerializer.Deserialize<Tools.Ozone.Moderation.ModEventEmail>(json, (JsonTypeInfo<Tools.Ozone.Moderation.ModEventEmail>)SourceGenerationContext.Default.ToolsOzoneModerationModEventEmail)!;
        }
    }
}

