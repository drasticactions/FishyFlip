// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable

namespace FishyFlip.Lexicon.Tools.Ozone.Moderation
{
    public partial class SubjectStatusView : ATObject
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="SubjectStatusView"/> class.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="subject">
        /// Union Types:
        /// <see cref="FishyFlip.Lexicon.Com.Atproto.Admin.RepoRef"/> (com.atproto.admin.defs#repoRef)
        /// <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.StrongRef"/> (com.atproto.repo.strongRef)
        /// </param>
        /// <param name="hosting">
        /// Union Types:
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.AccountHosting"/> (tools.ozone.moderation.defs#accountHosting)
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.RecordHosting"/> (tools.ozone.moderation.defs#recordHosting)
        /// </param>
        /// <param name="subjectBlobCids"></param>
        /// <param name="subjectRepoHandle"></param>
        /// <param name="updatedAt">Timestamp referencing when the last update was made to the moderation status of the subject</param>
        /// <param name="createdAt">Timestamp referencing the first moderation status impacting event was emitted on the subject</param>
        /// <param name="reviewState">
        /// Known Values:
        /// #reviewOpen
        /// #reviewEscalated
        /// #reviewClosed
        /// #reviewNone
        /// </param>
        /// <param name="comment">Sticky comment on the subject.</param>
        /// <param name="muteUntil"></param>
        /// <param name="muteReportingUntil"></param>
        /// <param name="lastReviewedBy"></param>
        /// <param name="lastReviewedAt"></param>
        /// <param name="lastReportedAt"></param>
        /// <param name="lastAppealedAt">Timestamp referencing when the author of the subject appealed a moderation action</param>
        /// <param name="takendown"></param>
        /// <param name="appealed">True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators.</param>
        /// <param name="suspendUntil"></param>
        /// <param name="tags"></param>
        public SubjectStatusView(long? id = default, ATObject? subject = default, ATObject? hosting = default, List<string>? subjectBlobCids = default, string? subjectRepoHandle = default, DateTime? updatedAt = default, DateTime? createdAt = default, string? reviewState = default, string? comment = default, DateTime? muteUntil = default, DateTime? muteReportingUntil = default, FishyFlip.Models.ATDid? lastReviewedBy = default, DateTime? lastReviewedAt = default, DateTime? lastReportedAt = default, DateTime? lastAppealedAt = default, bool? takendown = default, bool? appealed = default, DateTime? suspendUntil = default, List<string>? tags = default)
        {
            this.Id = id;
            this.Subject = subject;
            this.Hosting = hosting;
            this.SubjectBlobCids = subjectBlobCids;
            this.SubjectRepoHandle = subjectRepoHandle;
            this.UpdatedAt = updatedAt;
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.ReviewState = reviewState;
            this.Comment = comment;
            this.MuteUntil = muteUntil;
            this.MuteReportingUntil = muteReportingUntil;
            this.LastReviewedBy = lastReviewedBy;
            this.LastReviewedAt = lastReviewedAt;
            this.LastReportedAt = lastReportedAt;
            this.LastAppealedAt = lastAppealedAt;
            this.Takendown = takendown;
            this.Appealed = appealed;
            this.SuspendUntil = suspendUntil;
            this.Tags = tags;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="SubjectStatusView"/> class.
        /// </summary>
        public SubjectStatusView()
        {
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="SubjectStatusView"/> class.
        /// </summary>
        public SubjectStatusView(CBORObject obj)
        {
            if (obj["id"] is not null) this.Id = obj["id"].AsInt64Value();
            if (obj["subject"] is not null) this.Subject = obj["subject"].ToATObject();
            if (obj["hosting"] is not null) this.Hosting = obj["hosting"].ToATObject();
            if (obj["subjectBlobCids"] is not null) this.SubjectBlobCids = obj["subjectBlobCids"].Values.Select(n =>n.AsString()).ToList();
            if (obj["subjectRepoHandle"] is not null) this.SubjectRepoHandle = obj["subjectRepoHandle"].AsString();
            if (obj["updatedAt"] is not null) this.UpdatedAt = obj["updatedAt"].ToDateTime();
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["reviewState"] is not null) this.ReviewState = obj["reviewState"].AsString();
            if (obj["comment"] is not null) this.Comment = obj["comment"].AsString();
            if (obj["muteUntil"] is not null) this.MuteUntil = obj["muteUntil"].ToDateTime();
            if (obj["muteReportingUntil"] is not null) this.MuteReportingUntil = obj["muteReportingUntil"].ToDateTime();
            if (obj["lastReviewedBy"] is not null) this.LastReviewedBy = obj["lastReviewedBy"].ToATDid();
            if (obj["lastReviewedAt"] is not null) this.LastReviewedAt = obj["lastReviewedAt"].ToDateTime();
            if (obj["lastReportedAt"] is not null) this.LastReportedAt = obj["lastReportedAt"].ToDateTime();
            if (obj["lastAppealedAt"] is not null) this.LastAppealedAt = obj["lastAppealedAt"].ToDateTime();
            if (obj["takendown"] is not null) this.Takendown = obj["takendown"].AsBoolean();
            if (obj["appealed"] is not null) this.Appealed = obj["appealed"].AsBoolean();
            if (obj["suspendUntil"] is not null) this.SuspendUntil = obj["suspendUntil"].ToDateTime();
            if (obj["tags"] is not null) this.Tags = obj["tags"].Values.Select(n =>n.AsString()).ToList();
        }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        [JsonPropertyName("id")]
        [JsonRequired]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or sets the subject.
        /// Union Types:
        /// <see cref="FishyFlip.Lexicon.Com.Atproto.Admin.RepoRef"/> (com.atproto.admin.defs#repoRef)
        /// <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.StrongRef"/> (com.atproto.repo.strongRef)
        /// </summary>
        [JsonPropertyName("subject")]
        [JsonRequired]
        public ATObject? Subject { get; set; }

        /// <summary>
        /// Gets or sets the hosting.
        /// Union Types:
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.AccountHosting"/> (tools.ozone.moderation.defs#accountHosting)
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.RecordHosting"/> (tools.ozone.moderation.defs#recordHosting)
        /// </summary>
        [JsonPropertyName("hosting")]
        public ATObject? Hosting { get; set; }

        /// <summary>
        /// Gets or sets the subjectBlobCids.
        /// </summary>
        [JsonPropertyName("subjectBlobCids")]
        public List<string>? SubjectBlobCids { get; set; }

        /// <summary>
        /// Gets or sets the subjectRepoHandle.
        /// </summary>
        [JsonPropertyName("subjectRepoHandle")]
        public string? SubjectRepoHandle { get; set; }

        /// <summary>
        /// Gets or sets the updatedAt.
        /// Timestamp referencing when the last update was made to the moderation status of the subject
        /// </summary>
        [JsonPropertyName("updatedAt")]
        [JsonRequired]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or sets the createdAt.
        /// Timestamp referencing the first moderation status impacting event was emitted on the subject
        /// </summary>
        [JsonPropertyName("createdAt")]
        [JsonRequired]
        public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;

        /// <summary>
        /// Gets or sets the reviewState.
        /// Known Values:
        /// #reviewOpen
        /// #reviewEscalated
        /// #reviewClosed
        /// #reviewNone
        /// </summary>
        [JsonPropertyName("reviewState")]
        [JsonRequired]
        public string? ReviewState { get; set; }

        /// <summary>
        /// Gets or sets the comment.
        /// Sticky comment on the subject.
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get; set; }

        /// <summary>
        /// Gets or sets the muteUntil.
        /// </summary>
        [JsonPropertyName("muteUntil")]
        public DateTime? MuteUntil { get; set; }

        /// <summary>
        /// Gets or sets the muteReportingUntil.
        /// </summary>
        [JsonPropertyName("muteReportingUntil")]
        public DateTime? MuteReportingUntil { get; set; }

        /// <summary>
        /// Gets or sets the lastReviewedBy.
        /// </summary>
        [JsonPropertyName("lastReviewedBy")]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATDidJsonConverter))]
        public FishyFlip.Models.ATDid? LastReviewedBy { get; set; }

        /// <summary>
        /// Gets or sets the lastReviewedAt.
        /// </summary>
        [JsonPropertyName("lastReviewedAt")]
        public DateTime? LastReviewedAt { get; set; }

        /// <summary>
        /// Gets or sets the lastReportedAt.
        /// </summary>
        [JsonPropertyName("lastReportedAt")]
        public DateTime? LastReportedAt { get; set; }

        /// <summary>
        /// Gets or sets the lastAppealedAt.
        /// Timestamp referencing when the author of the subject appealed a moderation action
        /// </summary>
        [JsonPropertyName("lastAppealedAt")]
        public DateTime? LastAppealedAt { get; set; }

        /// <summary>
        /// Gets or sets the takendown.
        /// </summary>
        [JsonPropertyName("takendown")]
        public bool? Takendown { get; set; }

        /// <summary>
        /// Gets or sets the appealed.
        /// True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators.
        /// </summary>
        [JsonPropertyName("appealed")]
        public bool? Appealed { get; set; }

        /// <summary>
        /// Gets or sets the suspendUntil.
        /// </summary>
        [JsonPropertyName("suspendUntil")]
        public DateTime? SuspendUntil { get; set; }

        /// <summary>
        /// Gets or sets the tags.
        /// </summary>
        [JsonPropertyName("tags")]
        public List<string>? Tags { get; set; }

        /// <summary>
        /// Gets the ATRecord Type.
        /// </summary>
        [JsonPropertyName("$type")]
        public override string Type => "tools.ozone.moderation.defs#subjectStatusView";

        public const string RecordType = "tools.ozone.moderation.defs#subjectStatusView";

        public override string ToJson()
        {
            return JsonSerializer.Serialize<Tools.Ozone.Moderation.SubjectStatusView>(this, (JsonTypeInfo<Tools.Ozone.Moderation.SubjectStatusView>)SourceGenerationContext.Default.ToolsOzoneModerationSubjectStatusView)!;
        }

        public static SubjectStatusView FromJson(string json)
        {
            return JsonSerializer.Deserialize<Tools.Ozone.Moderation.SubjectStatusView>(json, (JsonTypeInfo<Tools.Ozone.Moderation.SubjectStatusView>)SourceGenerationContext.Default.ToolsOzoneModerationSubjectStatusView)!;
        }
    }
}

