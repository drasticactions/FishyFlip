// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Moderation
{
    /// <summary>
    /// QueryEventsOutput Collection.
    /// </summary>
    public class QueryEventsOutputCollection : ATObjectCollectionBase<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventView>, IAsyncEnumerable<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventView>
    {

        public QueryEventsOutputCollection(FishyFlip.ATProtocol atp, List<string>? types = default, FishyFlip.Models.ATDid? createdBy = default, string? sortDirection = default, DateTime? createdAfter = default, DateTime? createdBefore = default, string? subject = default, List<string>? collections = default, string? subjectType = default, bool? includeAllUserRecords = default, int? limit = 50, bool? hasComment = default, string? comment = default, List<string>? addedLabels = default, List<string>? removedLabels = default, List<string>? addedTags = default, List<string>? removedTags = default, List<string>? reportTypes = default, List<string>? policies = default, string? cursor = default, CancellationToken cancellationToken = default)
             : base(atp)
        {
            this.Types = types;
            this.CreatedBy = createdBy;
            this.SortDirection = sortDirection;
            this.CreatedAfter = createdAfter;
            this.CreatedBefore = createdBefore;
            this.Subject = subject;
            this.Collections = collections;
            this.SubjectType = subjectType;
            this.IncludeAllUserRecords = includeAllUserRecords;
            this.Limit = limit;
            this.HasComment = hasComment;
            this.Comment = comment;
            this.AddedLabels = addedLabels;
            this.RemovedLabels = removedLabels;
            this.AddedTags = addedTags;
            this.RemovedTags = removedTags;
            this.ReportTypes = reportTypes;
            this.Policies = policies;
            this.Cursor = cursor;
            this.CancellationToken = cancellationToken;
        }

        public List<string>? Types { get; }

        public FishyFlip.Models.ATDid? CreatedBy { get; }

        public string? SortDirection { get; }

        public DateTime? CreatedAfter { get; }

        public DateTime? CreatedBefore { get; }

        public string? Subject { get; }

        public List<string>? Collections { get; }

        public string? SubjectType { get; }

        public bool? IncludeAllUserRecords { get; }

        public bool? HasComment { get; }

        public string? Comment { get; }

        public List<string>? AddedLabels { get; }

        public List<string>? RemovedLabels { get; }

        public List<string>? AddedTags { get; }

        public List<string>? RemovedTags { get; }

        public List<string>? ReportTypes { get; }

        public List<string>? Policies { get; }

        /// <inheritdoc/>
        public override async Task<(IList<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventView> Posts, string Cursor)> GetRecordsAsync(int? limit = null, CancellationToken? token = default)
        {
            token = token ?? this.CancellationToken ?? System.Threading.CancellationToken.None;
            var (result, error) = await this.ATProtocol.QueryEventsAsync(types: this.Types, createdBy: this.CreatedBy, sortDirection: this.SortDirection, createdAfter: this.CreatedAfter, createdBefore: this.CreatedBefore, subject: this.Subject, collections: this.Collections, subjectType: this.SubjectType, includeAllUserRecords: this.IncludeAllUserRecords, hasComment: this.HasComment, comment: this.Comment, addedLabels: this.AddedLabels, removedLabels: this.RemovedLabels, addedTags: this.AddedTags, removedTags: this.RemovedTags, reportTypes: this.ReportTypes, policies: this.Policies, limit: limit, cursor: this.Cursor, cancellationToken: token.Value!);

            this.HandleATError(error);

            if (result == null || result.Events == null)
            {
                throw new InvalidOperationException("The result or its properties cannot be null.");
            }

            return (result.Events, result.Cursor ?? string.Empty);
        }

        public static QueryEventsOutputCollection Create(FishyFlip.ATProtocol atp, List<string>? types = default, FishyFlip.Models.ATDid? createdBy = default, string? sortDirection = default, DateTime? createdAfter = default, DateTime? createdBefore = default, string? subject = default, List<string>? collections = default, string? subjectType = default, bool? includeAllUserRecords = default, int? limit = 50, bool? hasComment = default, string? comment = default, List<string>? addedLabels = default, List<string>? removedLabels = default, List<string>? addedTags = default, List<string>? removedTags = default, List<string>? reportTypes = default, List<string>? policies = default, string? cursor = default, CancellationToken cancellationToken = default)
        {
            return new(atp: atp, types: types, createdBy: createdBy, sortDirection: sortDirection, createdAfter: createdAfter, createdBefore: createdBefore, subject: subject, collections: collections, subjectType: subjectType, includeAllUserRecords: includeAllUserRecords, hasComment: hasComment, comment: comment, addedLabels: addedLabels, removedLabels: removedLabels, addedTags: addedTags, removedTags: removedTags, reportTypes: reportTypes, policies: policies, limit: limit, cursor: cursor, cancellationToken: cancellationToken);
        }
    }
}

