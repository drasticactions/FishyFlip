// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Team
{
    public partial class Member : ATObject, ICBOREncodable<Member>, IJsonEncodable<Member>, IParsable<Member>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Member"/> class.
        /// </summary>
        /// <param name="did"></param>
        /// <param name="disabled"></param>
        /// <param name="profile">
        /// <see cref="FishyFlip.Lexicon.App.Bsky.Actor.ProfileViewDetailed"/> (app.bsky.actor.defs#profileViewDetailed)
        /// </param>
        /// <param name="createdAt"></param>
        /// <param name="updatedAt"></param>
        /// <param name="lastUpdatedBy"></param>
        /// <param name="role">
        /// <br/> Known Values: <br/>
        /// roleAdmin <br/>
        /// roleModerator <br/>
        /// roleTriage <br/>
        /// roleVerifier <br/>
        /// </param>
        public Member(FishyFlip.Models.ATDid did = default, bool? disabled = default, FishyFlip.Lexicon.App.Bsky.Actor.ProfileViewDetailed? profile = default, DateTime? createdAt = default, DateTime? updatedAt = default, string? lastUpdatedBy = default, string role = default)
        {
            this.Did = did;
            this.Disabled = disabled;
            this.Profile = profile;
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.UpdatedAt = updatedAt;
            this.LastUpdatedBy = lastUpdatedBy;
            this.Role = role;
            this.Type = "tools.ozone.team.defs#member";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Member"/> class.
        /// </summary>
        public Member()
        {
            this.Type = "tools.ozone.team.defs#member";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Member"/> class.
        /// </summary>
        public Member(CBORObject obj)
        {
            if (obj["did"] is not null) this.Did = obj["did"].ToATDid();
            if (obj["disabled"] is not null) this.Disabled = obj["disabled"].AsBoolean();
            if (obj["profile"] is not null) this.Profile = new FishyFlip.Lexicon.App.Bsky.Actor.ProfileViewDetailed(obj["profile"]);
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["updatedAt"] is not null) this.UpdatedAt = obj["updatedAt"].ToDateTime();
            if (obj["lastUpdatedBy"] is not null) this.LastUpdatedBy = obj["lastUpdatedBy"].AsString();
            if (obj["role"] is not null) this.Role = obj["role"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the did.
        /// </summary>
        [JsonPropertyName("did")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATDidJsonConverter))]
        public FishyFlip.Models.ATDid Did { get; set; }

        /// <summary>
        /// Gets or sets the disabled.
        /// </summary>
        [JsonPropertyName("disabled")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? Disabled { get; set; }

        /// <summary>
        /// Gets or sets the profile.
        /// <br/> <see cref="FishyFlip.Lexicon.App.Bsky.Actor.ProfileViewDetailed"/> (app.bsky.actor.defs#profileViewDetailed)
        /// </summary>
        [JsonPropertyName("profile")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public FishyFlip.Lexicon.App.Bsky.Actor.ProfileViewDetailed? Profile { get; set; }

        /// <summary>
        /// Gets or sets the createdAt.
        /// </summary>
        [JsonPropertyName("createdAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;

        /// <summary>
        /// Gets or sets the updatedAt.
        /// </summary>
        [JsonPropertyName("updatedAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or sets the lastUpdatedBy.
        /// </summary>
        [JsonPropertyName("lastUpdatedBy")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? LastUpdatedBy { get; set; }

        /// <summary>
        /// Gets or sets the role.
        /// <br/> Known Values: <br/>
        /// roleAdmin <br/>
        /// roleModerator <br/>
        /// roleTriage <br/>
        /// roleVerifier <br/>
        /// </summary>
        [JsonPropertyName("role")]
        [JsonRequired]
        public string Role { get; set; }

        public const string RecordType = "tools.ozone.team.defs#member";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Team.Member>)SourceGenerationContext.Default.ToolsOzoneTeamMember);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Team.Member>)SourceGenerationContext.Default.ToolsOzoneTeamMember);
        }

        public static new Member FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Team.Member>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Team.Member>)SourceGenerationContext.Default.ToolsOzoneTeamMember)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Member FromCBORObject(CBORObject obj)
        {
            return new Member(obj);
        }

        /// <inheritdoc/>
        public static Member Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Member>(s, (JsonTypeInfo<Member>)SourceGenerationContext.Default.ToolsOzoneTeamMember)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Member result)
        {
            result = JsonSerializer.Deserialize<Member>(s, (JsonTypeInfo<Member>)SourceGenerationContext.Default.ToolsOzoneTeamMember);
            return result != null;
        }
    }
}

