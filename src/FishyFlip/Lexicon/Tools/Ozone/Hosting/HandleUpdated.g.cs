// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Hosting
{
    public partial class HandleUpdated : ATObject, ICBOREncodable<HandleUpdated>, IJsonEncodable<HandleUpdated>, IParsable<HandleUpdated>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="HandleUpdated"/> class.
        /// </summary>
        /// <param name="handle"></param>
        public HandleUpdated(FishyFlip.Models.ATHandle handle = default)
        {
            this.Handle = handle;
            this.Type = "tools.ozone.hosting.getAccountHistory#handleUpdated";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="HandleUpdated"/> class.
        /// </summary>
        public HandleUpdated()
        {
            this.Type = "tools.ozone.hosting.getAccountHistory#handleUpdated";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="HandleUpdated"/> class.
        /// </summary>
        public HandleUpdated(CBORObject obj)
        {
            if (obj["handle"] is not null) this.Handle = obj["handle"].ToATHandle();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the handle.
        /// </summary>
        [JsonPropertyName("handle")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATHandleJsonConverter))]
        public FishyFlip.Models.ATHandle Handle { get; set; }

        public const string RecordType = "tools.ozone.hosting.getAccountHistory#handleUpdated";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Hosting.HandleUpdated>)SourceGenerationContext.Default.ToolsOzoneHostingHandleUpdated);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Hosting.HandleUpdated>)SourceGenerationContext.Default.ToolsOzoneHostingHandleUpdated);
        }

        public static new HandleUpdated FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Hosting.HandleUpdated>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Hosting.HandleUpdated>)SourceGenerationContext.Default.ToolsOzoneHostingHandleUpdated)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new HandleUpdated FromCBORObject(CBORObject obj)
        {
            return new HandleUpdated(obj);
        }

        /// <inheritdoc/>
        public static HandleUpdated Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<HandleUpdated>(s, (JsonTypeInfo<HandleUpdated>)SourceGenerationContext.Default.ToolsOzoneHostingHandleUpdated)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out HandleUpdated result)
        {
            result = JsonSerializer.Deserialize<HandleUpdated>(s, (JsonTypeInfo<HandleUpdated>)SourceGenerationContext.Default.ToolsOzoneHostingHandleUpdated);
            return result != null;
        }
    }
}

