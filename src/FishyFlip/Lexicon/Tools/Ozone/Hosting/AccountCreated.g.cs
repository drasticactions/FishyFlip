// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Hosting
{
    public partial class AccountCreated : ATObject, ICBOREncodable<AccountCreated>, IJsonEncodable<AccountCreated>, IParsable<AccountCreated>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountCreated"/> class.
        /// </summary>
        /// <param name="email"></param>
        /// <param name="handle"></param>
        public AccountCreated(string? email = default, FishyFlip.Models.ATHandle? handle = default)
        {
            this.Email = email;
            this.Handle = handle;
            this.Type = "tools.ozone.hosting.getAccountHistory#accountCreated";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AccountCreated"/> class.
        /// </summary>
        public AccountCreated()
        {
            this.Type = "tools.ozone.hosting.getAccountHistory#accountCreated";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AccountCreated"/> class.
        /// </summary>
        public AccountCreated(CBORObject obj)
        {
            if (obj["email"] is not null) this.Email = obj["email"].AsString();
            if (obj["handle"] is not null) this.Handle = obj["handle"].ToATHandle();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the email.
        /// </summary>
        [JsonPropertyName("email")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Email { get; set; }

        /// <summary>
        /// Gets or sets the handle.
        /// </summary>
        [JsonPropertyName("handle")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATHandleJsonConverter))]
        public FishyFlip.Models.ATHandle? Handle { get; set; }

        public const string RecordType = "tools.ozone.hosting.getAccountHistory#accountCreated";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Hosting.AccountCreated>)SourceGenerationContext.Default.ToolsOzoneHostingAccountCreated);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Hosting.AccountCreated>)SourceGenerationContext.Default.ToolsOzoneHostingAccountCreated);
        }

        public static new AccountCreated FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Hosting.AccountCreated>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Hosting.AccountCreated>)SourceGenerationContext.Default.ToolsOzoneHostingAccountCreated)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new AccountCreated FromCBORObject(CBORObject obj)
        {
            return new AccountCreated(obj);
        }

        /// <inheritdoc/>
        public static AccountCreated Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<AccountCreated>(s, (JsonTypeInfo<AccountCreated>)SourceGenerationContext.Default.ToolsOzoneHostingAccountCreated)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out AccountCreated result)
        {
            result = JsonSerializer.Deserialize<AccountCreated>(s, (JsonTypeInfo<AccountCreated>)SourceGenerationContext.Default.ToolsOzoneHostingAccountCreated);
            return result != null;
        }
    }
}

