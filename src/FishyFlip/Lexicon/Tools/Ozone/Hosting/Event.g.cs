// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Hosting
{
    public partial class Event : ATObject, ICBOREncodable<Event>, IJsonEncodable<Event>, IParsable<Event>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Event"/> class.
        /// </summary>
        /// <param name="details">
        /// <br/> Union Types: <br/>
        /// #accountCreated <br/>
        /// #emailUpdated <br/>
        /// #emailConfirmed <br/>
        /// #passwordUpdated <br/>
        /// #handleUpdated <br/>
        /// </param>
        /// <param name="createdBy"></param>
        /// <param name="createdAt"></param>
        public Event(ATObject details = default, string createdBy = default, DateTime? createdAt = default)
        {
            this.Details = details;
            this.CreatedBy = createdBy;
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.Type = "tools.ozone.hosting.getAccountHistory#event";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Event"/> class.
        /// </summary>
        public Event()
        {
            this.Type = "tools.ozone.hosting.getAccountHistory#event";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Event"/> class.
        /// </summary>
        public Event(CBORObject obj)
        {
            if (obj["details"] is not null) this.Details = obj["details"].ToATObject();
            if (obj["createdBy"] is not null) this.CreatedBy = obj["createdBy"].AsString();
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the details.
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Hosting.AccountCreated"/> (tools.ozone.hosting.getAccountHistory#accountCreated) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Hosting.EmailUpdated"/> (tools.ozone.hosting.getAccountHistory#emailUpdated) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Hosting.EmailConfirmed"/> (tools.ozone.hosting.getAccountHistory#emailConfirmed) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Hosting.PasswordUpdated"/> (tools.ozone.hosting.getAccountHistory#passwordUpdated) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Hosting.HandleUpdated"/> (tools.ozone.hosting.getAccountHistory#handleUpdated) <br/>
        /// </summary>
        [JsonPropertyName("details")]
        [JsonRequired]
        public ATObject Details { get; set; }

        /// <summary>
        /// Gets or sets the createdBy.
        /// </summary>
        [JsonPropertyName("createdBy")]
        [JsonRequired]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or sets the createdAt.
        /// </summary>
        [JsonPropertyName("createdAt")]
        [JsonRequired]
        public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;

        public const string RecordType = "tools.ozone.hosting.getAccountHistory#event";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Hosting.Event>)SourceGenerationContext.Default.ToolsOzoneHostingEvent);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Hosting.Event>)SourceGenerationContext.Default.ToolsOzoneHostingEvent);
        }

        public static new Event FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Hosting.Event>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Hosting.Event>)SourceGenerationContext.Default.ToolsOzoneHostingEvent)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Event FromCBORObject(CBORObject obj)
        {
            return new Event(obj);
        }

        /// <inheritdoc/>
        public static Event Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Event>(s, (JsonTypeInfo<Event>)SourceGenerationContext.Default.ToolsOzoneHostingEvent)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Event result)
        {
            result = JsonSerializer.Deserialize<Event>(s, (JsonTypeInfo<Event>)SourceGenerationContext.Default.ToolsOzoneHostingEvent);
            return result != null;
        }
    }
}

