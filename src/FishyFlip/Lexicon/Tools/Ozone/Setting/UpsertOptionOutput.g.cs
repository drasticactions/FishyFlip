// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Setting
{
    public partial class UpsertOptionOutput : ATObject, ICBOREncodable<UpsertOptionOutput>, IJsonEncodable<UpsertOptionOutput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertOptionOutput"/> class.
        /// </summary>
        /// <param name="option">
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Setting.Option"/> (tools.ozone.setting.defs#option)
        /// </param>
        public UpsertOptionOutput(FishyFlip.Lexicon.Tools.Ozone.Setting.Option option = default)
        {
            this.Option = option;
            this.Type = "tools.ozone.setting.upsertOption#UpsertOptionOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertOptionOutput"/> class.
        /// </summary>
        public UpsertOptionOutput()
        {
            this.Type = "tools.ozone.setting.upsertOption#UpsertOptionOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertOptionOutput"/> class.
        /// </summary>
        public UpsertOptionOutput(CBORObject obj)
        {
            if (obj["option"] is not null) this.Option = new FishyFlip.Lexicon.Tools.Ozone.Setting.Option(obj["option"]);
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the option.
        /// <br/> <see cref="FishyFlip.Lexicon.Tools.Ozone.Setting.Option"/> (tools.ozone.setting.defs#option)
        /// </summary>
        [JsonPropertyName("option")]
        [JsonRequired]
        public FishyFlip.Lexicon.Tools.Ozone.Setting.Option Option { get; set; }

        public const string RecordType = "tools.ozone.setting.upsertOption#UpsertOptionOutput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Setting.UpsertOptionOutput>)SourceGenerationContext.Default.ToolsOzoneSettingUpsertOptionOutput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Setting.UpsertOptionOutput>)SourceGenerationContext.Default.ToolsOzoneSettingUpsertOptionOutput);
        }

        public static new UpsertOptionOutput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Setting.UpsertOptionOutput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Setting.UpsertOptionOutput>)SourceGenerationContext.Default.ToolsOzoneSettingUpsertOptionOutput)!;
        }

         /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

         /// <inheritdoc/>
        public static new UpsertOptionOutput FromCBORObject(CBORObject obj)
        {
            return new UpsertOptionOutput(obj);
        }

    }
}

