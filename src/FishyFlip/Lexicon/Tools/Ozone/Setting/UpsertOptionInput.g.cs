// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Tools.Ozone.Setting
{
    public partial class UpsertOptionInput : ATObject, ICBOREncodable<UpsertOptionInput>, IJsonEncodable<UpsertOptionInput>, IParsable<UpsertOptionInput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertOptionInput"/> class.
        /// </summary>
        /// <param name="key"></param>
        /// <param name="scope">
        /// <br/> Known Values: <br/>
        /// instance <br/>
        /// personal <br/>
        /// </param>
        /// <param name="value"></param>
        /// <param name="description"></param>
        /// <param name="managerRole">
        /// <br/> Known Values: <br/>
        /// roleModerator - Moderator role. Can perform most actions. <br/>
        /// roleTriage - Triage role. Mostly intended for monitoring and escalating issues. <br/>
        /// roleVerifier - Verifier role. Only allowed to issue verifications. <br/>
        /// roleAdmin - Admin role. Highest level of access, can perform all actions. <br/>
        /// </param>
        public UpsertOptionInput(string key = default, string scope = default, ATObject value = default, string? description = default, string? managerRole = default)
        {
            this.Key = key;
            this.Scope = scope;
            this.Value = value;
            this.Description = description;
            this.ManagerRole = managerRole;
            this.Type = "tools.ozone.setting.upsertOption#UpsertOptionInput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertOptionInput"/> class.
        /// </summary>
        public UpsertOptionInput()
        {
            this.Type = "tools.ozone.setting.upsertOption#UpsertOptionInput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertOptionInput"/> class.
        /// </summary>
        public UpsertOptionInput(CBORObject obj)
        {
            if (obj["key"] is not null) this.Key = obj["key"].AsString();
            if (obj["scope"] is not null) this.Scope = obj["scope"].AsString();
            if (obj["value"] is not null) this.Value = obj["value"].ToATObject();
            if (obj["description"] is not null) this.Description = obj["description"].AsString();
            if (obj["managerRole"] is not null) this.ManagerRole = obj["managerRole"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the key.
        /// </summary>
        [JsonPropertyName("key")]
        [JsonRequired]
        public string Key { get; set; }

        /// <summary>
        /// Gets or sets the scope.
        /// <br/> Known Values: <br/>
        /// instance <br/>
        /// personal <br/>
        /// </summary>
        [JsonPropertyName("scope")]
        [JsonRequired]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets the value.
        /// </summary>
        [JsonPropertyName("value")]
        [JsonRequired]
        public ATObject Value { get; set; }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        [JsonPropertyName("description")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or sets the managerRole.
        /// <br/> Known Values: <br/>
        /// roleModerator - Moderator role. Can perform most actions. <br/>
        /// roleTriage - Triage role. Mostly intended for monitoring and escalating issues. <br/>
        /// roleVerifier - Verifier role. Only allowed to issue verifications. <br/>
        /// roleAdmin - Admin role. Highest level of access, can perform all actions. <br/>
        /// </summary>
        [JsonPropertyName("managerRole")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ManagerRole { get; set; }

        public const string RecordType = "tools.ozone.setting.upsertOption#UpsertOptionInput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Setting.UpsertOptionInput>)SourceGenerationContext.Default.ToolsOzoneSettingUpsertOptionInput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Setting.UpsertOptionInput>)SourceGenerationContext.Default.ToolsOzoneSettingUpsertOptionInput);
        }

        public static new UpsertOptionInput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Tools.Ozone.Setting.UpsertOptionInput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Tools.Ozone.Setting.UpsertOptionInput>)SourceGenerationContext.Default.ToolsOzoneSettingUpsertOptionInput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new UpsertOptionInput FromCBORObject(CBORObject obj)
        {
            return new UpsertOptionInput(obj);
        }

        /// <inheritdoc/>
        public static UpsertOptionInput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<UpsertOptionInput>(s, (JsonTypeInfo<UpsertOptionInput>)SourceGenerationContext.Default.ToolsOzoneSettingUpsertOptionInput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out UpsertOptionInput result)
        {
            result = JsonSerializer.Deserialize<UpsertOptionInput>(s, (JsonTypeInfo<UpsertOptionInput>)SourceGenerationContext.Default.ToolsOzoneSettingUpsertOptionInput);
            return result != null;
        }
    }
}

