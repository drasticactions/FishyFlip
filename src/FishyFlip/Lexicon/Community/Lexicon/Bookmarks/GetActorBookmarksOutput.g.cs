// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Community.Lexicon.Bookmarks
{
    public partial class GetActorBookmarksOutput : ATObject, ICBOREncodable<GetActorBookmarksOutput>, IJsonEncodable<GetActorBookmarksOutput>, IParsable<GetActorBookmarksOutput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="GetActorBookmarksOutput"/> class.
        /// </summary>
        /// <param name="cursor"></param>
        /// <param name="bookmarks"></param>
        public GetActorBookmarksOutput(string? cursor = default, List<FishyFlip.Lexicon.Community.Lexicon.Bookmarks.Bookmark> bookmarks = default)
        {
            this.Cursor = cursor;
            this.Bookmarks = bookmarks;
            this.Type = "community.lexicon.bookmarks.getActorBookmarks#GetActorBookmarksOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetActorBookmarksOutput"/> class.
        /// </summary>
        public GetActorBookmarksOutput()
        {
            this.Type = "community.lexicon.bookmarks.getActorBookmarks#GetActorBookmarksOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetActorBookmarksOutput"/> class.
        /// </summary>
        public GetActorBookmarksOutput(CBORObject obj)
        {
            if (obj["cursor"] is not null) this.Cursor = obj["cursor"].AsString();
            if (obj["bookmarks"] is not null) this.Bookmarks = obj["bookmarks"].Values.Select(n =>new FishyFlip.Lexicon.Community.Lexicon.Bookmarks.Bookmark(n)).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the cursor.
        /// </summary>
        [JsonPropertyName("cursor")]
        public string? Cursor { get; set; }

        /// <summary>
        /// Gets or sets the bookmarks.
        /// </summary>
        [JsonPropertyName("bookmarks")]
        [JsonRequired]
        public List<FishyFlip.Lexicon.Community.Lexicon.Bookmarks.Bookmark> Bookmarks { get; set; }

        public const string RecordType = "community.lexicon.bookmarks.getActorBookmarks#GetActorBookmarksOutput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Community.Lexicon.Bookmarks.GetActorBookmarksOutput>)SourceGenerationContext.Default.CommunityLexiconBookmarksGetActorBookmarksOutput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Community.Lexicon.Bookmarks.GetActorBookmarksOutput>)SourceGenerationContext.Default.CommunityLexiconBookmarksGetActorBookmarksOutput);
        }

        public static new GetActorBookmarksOutput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Community.Lexicon.Bookmarks.GetActorBookmarksOutput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Community.Lexicon.Bookmarks.GetActorBookmarksOutput>)SourceGenerationContext.Default.CommunityLexiconBookmarksGetActorBookmarksOutput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new GetActorBookmarksOutput FromCBORObject(CBORObject obj)
        {
            return new GetActorBookmarksOutput(obj);
        }

        /// <inheritdoc/>
        public static GetActorBookmarksOutput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<GetActorBookmarksOutput>(s, (JsonTypeInfo<GetActorBookmarksOutput>)SourceGenerationContext.Default.CommunityLexiconBookmarksGetActorBookmarksOutput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out GetActorBookmarksOutput result)
        {
            result = JsonSerializer.Deserialize<GetActorBookmarksOutput>(s, (JsonTypeInfo<GetActorBookmarksOutput>)SourceGenerationContext.Default.CommunityLexiconBookmarksGetActorBookmarksOutput);
            return result != null;
        }
    }
}

