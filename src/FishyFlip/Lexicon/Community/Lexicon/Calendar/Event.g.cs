// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Community.Lexicon.Calendar
{
    /// <summary>
    /// A calendar event.
    /// </summary>
    public partial class Event : ATObject, ICBOREncodable<Event>, IJsonEncodable<Event>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Event"/> class.
        /// </summary>
        /// <param name="name">The name of the event.</param>
        /// <param name="description">The description of the event.</param>
        /// <param name="createdAt">Client-declared timestamp when the event was created.</param>
        /// <param name="startsAt">Client-declared timestamp when the event starts.</param>
        /// <param name="endsAt">Client-declared timestamp when the event ends.</param>
        /// <param name="mode">The attendance mode of the event.
        /// <br/> Known Values: <br/>
        /// community.lexicon.calendar.event#hybrid - A hybrid event that takes place both online and offline. <br/>
        /// community.lexicon.calendar.event#inperson - An in-person event that takes place offline. <br/>
        /// community.lexicon.calendar.event#virtual - A virtual event that takes place online. <br/>
        /// </param>
        /// <param name="status">The status of the event.
        /// <br/> Known Values: <br/>
        /// community.lexicon.calendar.event#cancelled - The event has been cancelled. <br/>
        /// community.lexicon.calendar.event#planned - The event has been created, but not finalized. <br/>
        /// community.lexicon.calendar.event#postponed - The event has been postponed and a new start date has not been set. <br/>
        /// community.lexicon.calendar.event#rescheduled - The event has been rescheduled. <br/>
        /// community.lexicon.calendar.event#scheduled - The event has been created and scheduled. <br/>
        /// </param>
        /// <param name="locations">The locations where the event takes place.
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Community.Lexicon.Calendar.Uri"/> (community.lexicon.calendar.event#uri) <br/>
        /// <see cref="FishyFlip.Lexicon.Community.Lexicon.Location.Address"/> (community.lexicon.location.address) <br/>
        /// <see cref="FishyFlip.Lexicon.Community.Lexicon.Location.Fsq"/> (community.lexicon.location.fsq) <br/>
        /// <see cref="FishyFlip.Lexicon.Community.Lexicon.Location.Geo"/> (community.lexicon.location.geo) <br/>
        /// <see cref="FishyFlip.Lexicon.Community.Lexicon.Location.Hthree"/> (community.lexicon.location.hthree) <br/>
        /// </param>
        /// <param name="uris">URIs associated with the event.</param>
        public Event(string? name, string? description = default, DateTime? createdAt = default, DateTime? startsAt = default, DateTime? endsAt = default, string? mode = default, string? status = default, List<ATObject>? locations = default, List<FishyFlip.Lexicon.Community.Lexicon.Calendar.Uri>? uris = default)
        {
            this.Name = name;
            this.Description = description;
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.StartsAt = startsAt;
            this.EndsAt = endsAt;
            this.Mode = mode;
            this.Status = status;
            this.Locations = locations;
            this.Uris = uris;
            this.Type = "community.lexicon.calendar.event";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Event"/> class.
        /// </summary>
        public Event()
        {
            this.Type = "community.lexicon.calendar.event";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Event"/> class.
        /// </summary>
        public Event(CBORObject obj)
        {
            if (obj["name"] is not null) this.Name = obj["name"].AsString();
            if (obj["description"] is not null) this.Description = obj["description"].AsString();
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["startsAt"] is not null) this.StartsAt = obj["startsAt"].ToDateTime();
            if (obj["endsAt"] is not null) this.EndsAt = obj["endsAt"].ToDateTime();
            if (obj["mode"] is not null) this.Mode = obj["mode"].AsString();
            if (obj["status"] is not null) this.Status = obj["status"].AsString();
            if (obj["locations"] is not null) this.Locations = obj["locations"].Values.Select(n =>n.ToATObject()).ToList();
            if (obj["uris"] is not null) this.Uris = obj["uris"].Values.Select(n =>new FishyFlip.Lexicon.Community.Lexicon.Calendar.Uri(n)).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the name.
        /// <br/> The name of the event.
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Gets or sets the description.
        /// <br/> The description of the event.
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or sets the createdAt.
        /// <br/> Client-declared timestamp when the event was created.
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;

        /// <summary>
        /// Gets or sets the startsAt.
        /// <br/> Client-declared timestamp when the event starts.
        /// </summary>
        [JsonPropertyName("startsAt")]
        public DateTime? StartsAt { get; set; }

        /// <summary>
        /// Gets or sets the endsAt.
        /// <br/> Client-declared timestamp when the event ends.
        /// </summary>
        [JsonPropertyName("endsAt")]
        public DateTime? EndsAt { get; set; }

        /// <summary>
        /// Gets or sets the mode.
        /// <br/> The attendance mode of the event.
        /// <br/> Known Values: <br/>
        /// community.lexicon.calendar.event#hybrid - A hybrid event that takes place both online and offline. <br/>
        /// community.lexicon.calendar.event#inperson - An in-person event that takes place offline. <br/>
        /// community.lexicon.calendar.event#virtual - A virtual event that takes place online. <br/>
        /// </summary>
        [JsonPropertyName("mode")]
        public string? Mode { get; set; }

        /// <summary>
        /// Gets or sets the status.
        /// <br/> The status of the event.
        /// <br/> Known Values: <br/>
        /// community.lexicon.calendar.event#cancelled - The event has been cancelled. <br/>
        /// community.lexicon.calendar.event#planned - The event has been created, but not finalized. <br/>
        /// community.lexicon.calendar.event#postponed - The event has been postponed and a new start date has not been set. <br/>
        /// community.lexicon.calendar.event#rescheduled - The event has been rescheduled. <br/>
        /// community.lexicon.calendar.event#scheduled - The event has been created and scheduled. <br/>
        /// </summary>
        [JsonPropertyName("status")]
        public string? Status { get; set; }

        /// <summary>
        /// Gets or sets the locations.
        /// <br/> The locations where the event takes place.
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Community.Lexicon.Calendar.Uri"/> (community.lexicon.calendar.event#uri) <br/>
        /// <see cref="FishyFlip.Lexicon.Community.Lexicon.Location.Address"/> (community.lexicon.location.address) <br/>
        /// <see cref="FishyFlip.Lexicon.Community.Lexicon.Location.Fsq"/> (community.lexicon.location.fsq) <br/>
        /// <see cref="FishyFlip.Lexicon.Community.Lexicon.Location.Geo"/> (community.lexicon.location.geo) <br/>
        /// <see cref="FishyFlip.Lexicon.Community.Lexicon.Location.Hthree"/> (community.lexicon.location.hthree) <br/>
        /// </summary>
        [JsonPropertyName("locations")]
        public List<ATObject>? Locations { get; set; }

        /// <summary>
        /// Gets or sets the uris.
        /// <br/> URIs associated with the event.
        /// </summary>
        [JsonPropertyName("uris")]
        public List<FishyFlip.Lexicon.Community.Lexicon.Calendar.Uri>? Uris { get; set; }

        public const string RecordType = "community.lexicon.calendar.event";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Community.Lexicon.Calendar.Event>)SourceGenerationContext.Default.CommunityLexiconCalendarEvent);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Community.Lexicon.Calendar.Event>)SourceGenerationContext.Default.CommunityLexiconCalendarEvent);
        }

        public static new Event FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Community.Lexicon.Calendar.Event>(json, (JsonTypeInfo<FishyFlip.Lexicon.Community.Lexicon.Calendar.Event>)SourceGenerationContext.Default.CommunityLexiconCalendarEvent)!;
        }

         /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

         /// <inheritdoc/>
        public static new Event FromCBORObject(CBORObject obj)
        {
            return new Event(obj);
        }

    }
}

