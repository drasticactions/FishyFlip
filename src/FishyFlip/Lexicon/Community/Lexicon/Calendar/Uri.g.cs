// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Community.Lexicon.Calendar
{
    /// <summary>
    /// A URI associated with the event.
    /// </summary>
    public partial class Uri : ATObject, ICBOREncodable<Uri>, IJsonEncodable<Uri>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Uri"/> class.
        /// </summary>
        /// <param name="uri"></param>
        /// <param name="name">The display name of the URI.</param>
        public Uri(string uri = default, string? name = default)
        {
            this.UriValue = uri;
            this.Name = name;
            this.Type = "community.lexicon.calendar.event#uri";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Uri"/> class.
        /// </summary>
        public Uri()
        {
            this.Type = "community.lexicon.calendar.event#uri";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Uri"/> class.
        /// </summary>
        public Uri(CBORObject obj)
        {
            if (obj["uri"] is not null) this.UriValue = obj["uri"].AsString();
            if (obj["name"] is not null) this.Name = obj["name"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the uri.
        /// </summary>
        [JsonPropertyName("uri")]
        [JsonRequired]
        public string UriValue { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// <br/> The display name of the URI.
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get; set; }

        public const string RecordType = "community.lexicon.calendar.event#uri";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Community.Lexicon.Calendar.Uri>)SourceGenerationContext.Default.CommunityLexiconCalendarUri);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Community.Lexicon.Calendar.Uri>)SourceGenerationContext.Default.CommunityLexiconCalendarUri);
        }

        public static new Uri FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Community.Lexicon.Calendar.Uri>(json, (JsonTypeInfo<FishyFlip.Lexicon.Community.Lexicon.Calendar.Uri>)SourceGenerationContext.Default.CommunityLexiconCalendarUri)!;
        }

         /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

         /// <inheritdoc/>
        public static new Uri FromCBORObject(CBORObject obj)
        {
            return new Uri(obj);
        }

    }
}

