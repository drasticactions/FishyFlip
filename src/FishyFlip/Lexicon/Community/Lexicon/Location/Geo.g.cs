// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Community.Lexicon.Location
{
    /// <summary>
    /// A physical location in the form of a WGS84 coordinate.
    /// </summary>
    public partial class Geo : ATObject, ICBOREncodable<Geo>, IJsonEncodable<Geo>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Geo"/> class.
        /// </summary>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="altitude"></param>
        /// <param name="name">The name of the location.</param>
        public Geo(string latitude = default, string longitude = default, string? altitude = default, string? name = default)
        {
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.Altitude = altitude;
            this.Name = name;
            this.Type = "community.lexicon.location.geo";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Geo"/> class.
        /// </summary>
        public Geo()
        {
            this.Type = "community.lexicon.location.geo";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Geo"/> class.
        /// </summary>
        public Geo(CBORObject obj)
        {
            if (obj["latitude"] is not null) this.Latitude = obj["latitude"].AsString();
            if (obj["longitude"] is not null) this.Longitude = obj["longitude"].AsString();
            if (obj["altitude"] is not null) this.Altitude = obj["altitude"].AsString();
            if (obj["name"] is not null) this.Name = obj["name"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the latitude.
        /// </summary>
        [JsonPropertyName("latitude")]
        [JsonRequired]
        public string Latitude { get; set; }

        /// <summary>
        /// Gets or sets the longitude.
        /// </summary>
        [JsonPropertyName("longitude")]
        [JsonRequired]
        public string Longitude { get; set; }

        /// <summary>
        /// Gets or sets the altitude.
        /// </summary>
        [JsonPropertyName("altitude")]
        public string? Altitude { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// <br/> The name of the location.
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get; set; }

        public const string RecordType = "community.lexicon.location.geo";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Community.Lexicon.Location.Geo>)SourceGenerationContext.Default.CommunityLexiconLocationGeo);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Community.Lexicon.Location.Geo>)SourceGenerationContext.Default.CommunityLexiconLocationGeo);
        }

        public static new Geo FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Community.Lexicon.Location.Geo>(json, (JsonTypeInfo<FishyFlip.Lexicon.Community.Lexicon.Location.Geo>)SourceGenerationContext.Default.CommunityLexiconLocationGeo)!;
        }

         /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

         /// <inheritdoc/>
        public static new Geo FromCBORObject(CBORObject obj)
        {
            return new Geo(obj);
        }

    }
}

