// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Buzz.Bookhive
{
    public partial class UserBook : ATObject, ICBOREncodable<UserBook>, IJsonEncodable<UserBook>, IParsable<UserBook>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="UserBook"/> class.
        /// </summary>
        /// <param name="title">The title of the book</param>
        /// <param name="authors">The authors of the book (tab separated)</param>
        /// <param name="hiveId">The book's hive id, used to correlate user's books with the hive</param>
        /// <param name="createdAt"></param>
        /// <param name="startedAt">The date the user started reading the book</param>
        /// <param name="finishedAt">The date the user finished reading the book</param>
        /// <param name="cover">Cover image of the book</param>
        /// <param name="thumbnail">Cover image of the book</param>
        /// <param name="description">Book description/summary</param>
        /// <param name="rating">Average rating (0-1000)</param>
        /// <param name="status">
        /// <br/> Known Values: <br/>
        /// finished - User has finished reading the book <br/>
        /// reading - User is currently reading the book <br/>
        /// wantToRead - User wants to read the book <br/>
        /// abandoned - User has abandoned the book <br/>
        /// owned - User owns the book <br/>
        /// </param>
        /// <param name="stars">Number of stars given to the book (1-10) which will be mapped to 1-5 stars</param>
        /// <param name="review">The book's review</param>
        public UserBook(string title = default, string authors = default, string hiveId = default, DateTime? createdAt = default, DateTime? startedAt = default, DateTime? finishedAt = default, string? cover = default, string thumbnail = default, string? description = default, long? rating = default, string? status = default, long? stars = default, string? review = default)
        {
            this.Title = title;
            this.Authors = authors;
            this.HiveId = hiveId;
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.StartedAt = startedAt;
            this.FinishedAt = finishedAt;
            this.Cover = cover;
            this.Thumbnail = thumbnail;
            this.Description = description;
            this.Rating = rating;
            this.Status = status;
            this.Stars = stars;
            this.Review = review;
            this.Type = "buzz.bookhive.defs#userBook";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="UserBook"/> class.
        /// </summary>
        public UserBook()
        {
            this.Type = "buzz.bookhive.defs#userBook";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="UserBook"/> class.
        /// </summary>
        public UserBook(CBORObject obj)
        {
            if (obj["title"] is not null) this.Title = obj["title"].AsString();
            if (obj["authors"] is not null) this.Authors = obj["authors"].AsString();
            if (obj["hiveId"] is not null) this.HiveId = obj["hiveId"].AsString();
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["startedAt"] is not null) this.StartedAt = obj["startedAt"].ToDateTime();
            if (obj["finishedAt"] is not null) this.FinishedAt = obj["finishedAt"].ToDateTime();
            if (obj["cover"] is not null) this.Cover = obj["cover"].AsString();
            if (obj["thumbnail"] is not null) this.Thumbnail = obj["thumbnail"].AsString();
            if (obj["description"] is not null) this.Description = obj["description"].AsString();
            if (obj["rating"] is not null) this.Rating = obj["rating"].AsInt64Value();
            if (obj["status"] is not null) this.Status = obj["status"].AsString();
            if (obj["stars"] is not null) this.Stars = obj["stars"].AsInt64Value();
            if (obj["review"] is not null) this.Review = obj["review"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the title.
        /// <br/> The title of the book
        /// </summary>
        [JsonPropertyName("title")]
        [JsonRequired]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the authors.
        /// <br/> The authors of the book (tab separated)
        /// </summary>
        [JsonPropertyName("authors")]
        [JsonRequired]
        public string Authors { get; set; }

        /// <summary>
        /// Gets or sets the hiveId.
        /// <br/> The book's hive id, used to correlate user's books with the hive
        /// </summary>
        [JsonPropertyName("hiveId")]
        [JsonRequired]
        public string HiveId { get; set; }

        /// <summary>
        /// Gets or sets the createdAt.
        /// </summary>
        [JsonPropertyName("createdAt")]
        [JsonRequired]
        public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;

        /// <summary>
        /// Gets or sets the startedAt.
        /// <br/> The date the user started reading the book
        /// </summary>
        [JsonPropertyName("startedAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? StartedAt { get; set; }

        /// <summary>
        /// Gets or sets the finishedAt.
        /// <br/> The date the user finished reading the book
        /// </summary>
        [JsonPropertyName("finishedAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? FinishedAt { get; set; }

        /// <summary>
        /// Gets or sets the cover.
        /// <br/> Cover image of the book
        /// </summary>
        [JsonPropertyName("cover")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Cover { get; set; }

        /// <summary>
        /// Gets or sets the thumbnail.
        /// <br/> Cover image of the book
        /// </summary>
        [JsonPropertyName("thumbnail")]
        [JsonRequired]
        public string Thumbnail { get; set; }

        /// <summary>
        /// Gets or sets the description.
        /// <br/> Book description/summary
        /// </summary>
        [JsonPropertyName("description")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or sets the rating.
        /// <br/> Average rating (0-1000)
        /// </summary>
        [JsonPropertyName("rating")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public long? Rating { get; set; }

        /// <summary>
        /// Gets or sets the status.
        /// <br/> Known Values: <br/>
        /// finished - User has finished reading the book <br/>
        /// reading - User is currently reading the book <br/>
        /// wantToRead - User wants to read the book <br/>
        /// abandoned - User has abandoned the book <br/>
        /// owned - User owns the book <br/>
        /// </summary>
        [JsonPropertyName("status")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Status { get; set; }

        /// <summary>
        /// Gets or sets the stars.
        /// <br/> Number of stars given to the book (1-10) which will be mapped to 1-5 stars
        /// </summary>
        [JsonPropertyName("stars")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public long? Stars { get; set; }

        /// <summary>
        /// Gets or sets the review.
        /// <br/> The book's review
        /// </summary>
        [JsonPropertyName("review")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Review { get; set; }

        public const string RecordType = "buzz.bookhive.defs#userBook";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Buzz.Bookhive.UserBook>)SourceGenerationContext.Default.BuzzBookhiveUserBook);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Buzz.Bookhive.UserBook>)SourceGenerationContext.Default.BuzzBookhiveUserBook);
        }

        public static new UserBook FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Buzz.Bookhive.UserBook>(json, (JsonTypeInfo<FishyFlip.Lexicon.Buzz.Bookhive.UserBook>)SourceGenerationContext.Default.BuzzBookhiveUserBook)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new UserBook FromCBORObject(CBORObject obj)
        {
            return new UserBook(obj);
        }

        /// <inheritdoc/>
        public static UserBook Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<UserBook>(s, (JsonTypeInfo<UserBook>)SourceGenerationContext.Default.BuzzBookhiveUserBook)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out UserBook result)
        {
            result = JsonSerializer.Deserialize<UserBook>(s, (JsonTypeInfo<UserBook>)SourceGenerationContext.Default.BuzzBookhiveUserBook);
            return result != null;
        }
    }
}

