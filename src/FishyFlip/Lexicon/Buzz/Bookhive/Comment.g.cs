// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Buzz.Bookhive
{
    public partial class Comment : ATObject, ICBOREncodable<Comment>, IJsonEncodable<Comment>, IParsable<Comment>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Comment"/> class.
        /// </summary>
        /// <param name="comment">The content of the comment.</param>
        /// <param name="createdAt">Client-declared timestamp when this comment was originally created.</param>
        /// <param name="parent">
        /// <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.StrongRef"/> (com.atproto.repo.strongRef)
        /// </param>
        /// <param name="book">
        /// <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.StrongRef"/> (com.atproto.repo.strongRef)
        /// </param>
        /// <param name="did">The DID of the user who made the comment</param>
        /// <param name="handle">The handle of the user who made the comment</param>
        public Comment(string comment = default, DateTime? createdAt = default, Com.Atproto.Repo.StrongRef parent = default, Com.Atproto.Repo.StrongRef book = default, string did = default, string handle = default)
        {
            this.CommentValue = comment;
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.Parent = parent;
            this.Book = book;
            this.Did = did;
            this.Handle = handle;
            this.Type = "buzz.bookhive.defs#comment";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Comment"/> class.
        /// </summary>
        public Comment()
        {
            this.Type = "buzz.bookhive.defs#comment";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Comment"/> class.
        /// </summary>
        public Comment(CBORObject obj)
        {
            if (obj["comment"] is not null) this.CommentValue = obj["comment"].AsString();
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["parent"] is not null) this.Parent = new FishyFlip.Lexicon.Com.Atproto.Repo.StrongRef(obj["parent"]);
            if (obj["book"] is not null) this.Book = new FishyFlip.Lexicon.Com.Atproto.Repo.StrongRef(obj["book"]);
            if (obj["did"] is not null) this.Did = obj["did"].AsString();
            if (obj["handle"] is not null) this.Handle = obj["handle"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the comment.
        /// <br/> The content of the comment.
        /// </summary>
        [JsonPropertyName("comment")]
        [JsonRequired]
        public string CommentValue { get; set; }

        /// <summary>
        /// Gets or sets the createdAt.
        /// <br/> Client-declared timestamp when this comment was originally created.
        /// </summary>
        [JsonPropertyName("createdAt")]
        [JsonRequired]
        public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;

        /// <summary>
        /// Gets or sets the parent.
        /// <br/> <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.StrongRef"/> (com.atproto.repo.strongRef)
        /// </summary>
        [JsonPropertyName("parent")]
        [JsonRequired]
        public Com.Atproto.Repo.StrongRef Parent { get; set; }

        /// <summary>
        /// Gets or sets the book.
        /// <br/> <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.StrongRef"/> (com.atproto.repo.strongRef)
        /// </summary>
        [JsonPropertyName("book")]
        [JsonRequired]
        public Com.Atproto.Repo.StrongRef Book { get; set; }

        /// <summary>
        /// Gets or sets the did.
        /// <br/> The DID of the user who made the comment
        /// </summary>
        [JsonPropertyName("did")]
        [JsonRequired]
        public string Did { get; set; }

        /// <summary>
        /// Gets or sets the handle.
        /// <br/> The handle of the user who made the comment
        /// </summary>
        [JsonPropertyName("handle")]
        [JsonRequired]
        public string Handle { get; set; }

        public const string RecordType = "buzz.bookhive.defs#comment";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Buzz.Bookhive.Comment>)SourceGenerationContext.Default.BuzzBookhiveComment);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Buzz.Bookhive.Comment>)SourceGenerationContext.Default.BuzzBookhiveComment);
        }

        public static new Comment FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Buzz.Bookhive.Comment>(json, (JsonTypeInfo<FishyFlip.Lexicon.Buzz.Bookhive.Comment>)SourceGenerationContext.Default.BuzzBookhiveComment)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Comment FromCBORObject(CBORObject obj)
        {
            return new Comment(obj);
        }

        /// <inheritdoc/>
        public static Comment Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Comment>(s, (JsonTypeInfo<Comment>)SourceGenerationContext.Default.BuzzBookhiveComment)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Comment result)
        {
            result = JsonSerializer.Deserialize<Comment>(s, (JsonTypeInfo<Comment>)SourceGenerationContext.Default.BuzzBookhiveComment);
            return result != null;
        }
    }
}

