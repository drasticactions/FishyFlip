// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable

using FishyFlip.Lexicon.Com.Atproto.Repo;

namespace FishyFlip.Lexicon
{

    /// <summary>
    /// Extension methods for buzz.bookhive.
    /// </summary>
    public static class BuzzBookhiveExtensions
    {

        /// <summary>
        /// Create a Book record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="record"></param>
        /// <param name="rkey"></param>
        /// <param name="validate"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<CreateRecordOutput?>> CreateBookAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, FishyFlip.Lexicon.Buzz.Bookhive.Book record, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.CreateRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.book", record, rkey, validate, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Create a Book record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="title">The title of the book</param>
        /// <param name="authors">The authors of the book (tab separated)</param>
        /// <param name="hiveId">The book's hive id, used to correlate user's books with the hive</param>
        /// <param name="createdAt"></param>
        /// <param name="startedAt">The date the user started reading the book</param>
        /// <param name="finishedAt">The date the user finished reading the book</param>
        /// <param name="cover">Cover image of the book</param>
        /// <param name="status">
        /// <br/> Known Values: <br/>
        /// finished - A book in the user's library <br/>
        /// reading - A book in the user's library <br/>
        /// wantToRead - A book in the user's library <br/>
        /// abandoned - A book in the user's library <br/>
        /// owned - A book in the user's library <br/>
        /// </param>
        /// <param name="stars">Number of stars given to the book (1-10) which will be mapped to 1-5 stars</param>
        /// <param name="review">The book's review</param>
        /// <param name="rkey"></param>
        /// <param name="validate"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<CreateRecordOutput?>> CreateBookAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, string? title, string? authors, string? hiveId, DateTime? createdAt = default, DateTime? startedAt = default, DateTime? finishedAt = default, Blob? cover = default, string? status = default, long? stars = default, string? review = default, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            var record = new FishyFlip.Lexicon.Buzz.Bookhive.Book();
            record.Title = title;
            record.Authors = authors;
            record.HiveId = hiveId;
            record.CreatedAt = createdAt ?? DateTime.UtcNow;
            record.StartedAt = startedAt;
            record.FinishedAt = finishedAt;
            record.Cover = cover;
            record.Status = status;
            record.Stars = stars;
            record.Review = review;
            return atp.ATProtocol.CreateRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.book", record, rkey, validate, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Delete a Book record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="rkey"></param>
        /// <param name="swapRecord"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<DeleteRecordOutput?>> DeleteBookAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, string rkey, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.DeleteRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.book", rkey, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Put a Book record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="rkey"></param>
        /// <param name="record"></param>
        /// <param name="validate"></param>
        /// <param name="swapRecord"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<PutRecordOutput?>> PutBookAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, string rkey, FishyFlip.Lexicon.Buzz.Bookhive.Book record, bool? validate = default, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.PutRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.book", rkey, record, validate, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// List Book records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="reverse"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<ListRecordsOutput?>> ListBookAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.ListRecordsAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.book", limit, cursor, reverse, cancellationToken);
        }

        /// <summary>
        /// List Book records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="repo"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="reverse"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<ListRecordsOutput?>> ListBookAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, FishyFlip.Models.ATIdentifier repo, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.ListRecordsAsync(repo, "buzz.bookhive.book", limit, cursor, reverse, cancellationToken);
        }

        /// <summary>
        /// Get Book records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="rkey"></param>
        /// <param name="cid"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<GetRecordOutput?>> GetBookAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, string rkey, string? cid = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.GetRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.book", rkey, cid, cancellationToken);
        }

        /// <summary>
        /// Get Book records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="repo"></param>
        /// <param name="rkey"></param>
        /// <param name="cid"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<GetRecordOutput?>> GetBookAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, FishyFlip.Models.ATIdentifier repo, string rkey, string? cid = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.GetRecordAsync(repo, "buzz.bookhive.book", rkey, cid, cancellationToken);
        }
        /// <summary>
        /// Create a Buzz record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="record"></param>
        /// <param name="rkey"></param>
        /// <param name="validate"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<CreateRecordOutput?>> CreateBuzzAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, FishyFlip.Lexicon.Buzz.Bookhive.Buzz record, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.CreateRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.buzz", record, rkey, validate, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Create a Buzz record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="comment">The content of the comment.</param>
        /// <param name="parent">
        /// <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.StrongRef"/> (com.atproto.repo.strongRef)
        /// </param>
        /// <param name="book">
        /// <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.StrongRef"/> (com.atproto.repo.strongRef)
        /// </param>
        /// <param name="createdAt">Client-declared timestamp when this comment was originally created.</param>
        /// <param name="rkey"></param>
        /// <param name="validate"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<CreateRecordOutput?>> CreateBuzzAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, string? comment, Com.Atproto.Repo.StrongRef? parent, Com.Atproto.Repo.StrongRef? book, DateTime? createdAt = default, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            var record = new FishyFlip.Lexicon.Buzz.Bookhive.Buzz();
            record.Comment = comment;
            record.CreatedAt = createdAt ?? DateTime.UtcNow;
            record.Parent = parent;
            record.Book = book;
            return atp.ATProtocol.CreateRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.buzz", record, rkey, validate, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Delete a Buzz record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="rkey"></param>
        /// <param name="swapRecord"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<DeleteRecordOutput?>> DeleteBuzzAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, string rkey, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.DeleteRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.buzz", rkey, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Put a Buzz record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="rkey"></param>
        /// <param name="record"></param>
        /// <param name="validate"></param>
        /// <param name="swapRecord"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<PutRecordOutput?>> PutBuzzAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, string rkey, FishyFlip.Lexicon.Buzz.Bookhive.Buzz record, bool? validate = default, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.PutRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.buzz", rkey, record, validate, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// List Buzz records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="reverse"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<ListRecordsOutput?>> ListBuzzAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.ListRecordsAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.buzz", limit, cursor, reverse, cancellationToken);
        }

        /// <summary>
        /// List Buzz records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="repo"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="reverse"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<ListRecordsOutput?>> ListBuzzAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, FishyFlip.Models.ATIdentifier repo, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.ListRecordsAsync(repo, "buzz.bookhive.buzz", limit, cursor, reverse, cancellationToken);
        }

        /// <summary>
        /// Get Buzz records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="rkey"></param>
        /// <param name="cid"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<GetRecordOutput?>> GetBuzzAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, string rkey, string? cid = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.GetRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.buzz", rkey, cid, cancellationToken);
        }

        /// <summary>
        /// Get Buzz records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="repo"></param>
        /// <param name="rkey"></param>
        /// <param name="cid"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<GetRecordOutput?>> GetBuzzAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, FishyFlip.Models.ATIdentifier repo, string rkey, string? cid = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.GetRecordAsync(repo, "buzz.bookhive.buzz", rkey, cid, cancellationToken);
        }
        /// <summary>
        /// Create a HiveBook record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="record"></param>
        /// <param name="rkey"></param>
        /// <param name="validate"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<CreateRecordOutput?>> CreateHiveBookAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, FishyFlip.Lexicon.Buzz.Bookhive.HiveBook record, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.CreateRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.hiveBook", record, rkey, validate, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Create a HiveBook record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="title">The title of the book</param>
        /// <param name="authors">The authors of the book (tab separated)</param>
        /// <param name="id">The book's hive id, used to correlate user's books with the hive</param>
        /// <param name="thumbnail">URL to thumbnail image</param>
        /// <param name="updatedAt"></param>
        /// <param name="source">The source service name (e.g. Goodreads)</param>
        /// <param name="sourceUrl">URL to the book on the source service</param>
        /// <param name="sourceId">ID of the book in the source service</param>
        /// <param name="cover">URL to full-size cover image</param>
        /// <param name="description">Book description/summary</param>
        /// <param name="rating">Average rating (0-1000)</param>
        /// <param name="ratingsCount">Number of ratings</param>
        /// <param name="createdAt"></param>
        /// <param name="rkey"></param>
        /// <param name="validate"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<CreateRecordOutput?>> CreateHiveBookAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, string? title, string? authors, string? id, string? thumbnail, DateTime? updatedAt, string? source = default, string? sourceUrl = default, string? sourceId = default, string? cover = default, string? description = default, long? rating = default, long? ratingsCount = default, DateTime? createdAt = default, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            var record = new FishyFlip.Lexicon.Buzz.Bookhive.HiveBook();
            record.Title = title;
            record.Authors = authors;
            record.Id = id;
            record.Source = source;
            record.SourceUrl = sourceUrl;
            record.SourceId = sourceId;
            record.Cover = cover;
            record.Thumbnail = thumbnail;
            record.Description = description;
            record.Rating = rating;
            record.RatingsCount = ratingsCount;
            record.CreatedAt = createdAt ?? DateTime.UtcNow;
            record.UpdatedAt = updatedAt;
            return atp.ATProtocol.CreateRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.hiveBook", record, rkey, validate, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Delete a HiveBook record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="rkey"></param>
        /// <param name="swapRecord"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<DeleteRecordOutput?>> DeleteHiveBookAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, string rkey, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.DeleteRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.hiveBook", rkey, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Put a HiveBook record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="rkey"></param>
        /// <param name="record"></param>
        /// <param name="validate"></param>
        /// <param name="swapRecord"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<PutRecordOutput?>> PutHiveBookAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, string rkey, FishyFlip.Lexicon.Buzz.Bookhive.HiveBook record, bool? validate = default, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.PutRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.hiveBook", rkey, record, validate, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// List HiveBook records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="reverse"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<ListRecordsOutput?>> ListHiveBookAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.ListRecordsAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.hiveBook", limit, cursor, reverse, cancellationToken);
        }

        /// <summary>
        /// List HiveBook records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="repo"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="reverse"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<ListRecordsOutput?>> ListHiveBookAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, FishyFlip.Models.ATIdentifier repo, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.ListRecordsAsync(repo, "buzz.bookhive.hiveBook", limit, cursor, reverse, cancellationToken);
        }

        /// <summary>
        /// Get HiveBook records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="rkey"></param>
        /// <param name="cid"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<GetRecordOutput?>> GetHiveBookAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, string rkey, string? cid = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.GetRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "buzz.bookhive.hiveBook", rkey, cid, cancellationToken);
        }

        /// <summary>
        /// Get HiveBook records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="repo"></param>
        /// <param name="rkey"></param>
        /// <param name="cid"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<GetRecordOutput?>> GetHiveBookAsync(this FishyFlip.Lexicon.Buzz.Bookhive.BuzzBookhive atp, FishyFlip.Models.ATIdentifier repo, string rkey, string? cid = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.GetRecordAsync(repo, "buzz.bookhive.hiveBook", rkey, cid, cancellationToken);
        }
    }
}

