// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Buzz.Bookhive
{
    public partial class Review : ATObject, ICBOREncodable<Review>, IJsonEncodable<Review>, IParsable<Review>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Review"/> class.
        /// </summary>
        /// <param name="review">The review content</param>
        /// <param name="createdAt">The date the review was created</param>
        /// <param name="stars">The number of stars given to the book</param>
        /// <param name="did">The DID of the user who made the review</param>
        /// <param name="handle">The handle of the user who made the review</param>
        public Review(string review = default, DateTime? createdAt = default, long? stars = default, string did = default, string handle = default)
        {
            this.ReviewValue = review;
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.Stars = stars;
            this.Did = did;
            this.Handle = handle;
            this.Type = "buzz.bookhive.defs#review";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Review"/> class.
        /// </summary>
        public Review()
        {
            this.Type = "buzz.bookhive.defs#review";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Review"/> class.
        /// </summary>
        public Review(CBORObject obj)
        {
            if (obj["review"] is not null) this.ReviewValue = obj["review"].AsString();
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["stars"] is not null) this.Stars = obj["stars"].AsInt64Value();
            if (obj["did"] is not null) this.Did = obj["did"].AsString();
            if (obj["handle"] is not null) this.Handle = obj["handle"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the review.
        /// <br/> The review content
        /// </summary>
        [JsonPropertyName("review")]
        [JsonRequired]
        public string ReviewValue { get; set; }

        /// <summary>
        /// Gets or sets the createdAt.
        /// <br/> The date the review was created
        /// </summary>
        [JsonPropertyName("createdAt")]
        [JsonRequired]
        public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;

        /// <summary>
        /// Gets or sets the stars.
        /// <br/> The number of stars given to the book
        /// </summary>
        [JsonPropertyName("stars")]
        public long? Stars { get; set; }

        /// <summary>
        /// Gets or sets the did.
        /// <br/> The DID of the user who made the review
        /// </summary>
        [JsonPropertyName("did")]
        [JsonRequired]
        public string Did { get; set; }

        /// <summary>
        /// Gets or sets the handle.
        /// <br/> The handle of the user who made the review
        /// </summary>
        [JsonPropertyName("handle")]
        [JsonRequired]
        public string Handle { get; set; }

        public const string RecordType = "buzz.bookhive.defs#review";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Buzz.Bookhive.Review>)SourceGenerationContext.Default.BuzzBookhiveReview);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Buzz.Bookhive.Review>)SourceGenerationContext.Default.BuzzBookhiveReview);
        }

        public static new Review FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Buzz.Bookhive.Review>(json, (JsonTypeInfo<FishyFlip.Lexicon.Buzz.Bookhive.Review>)SourceGenerationContext.Default.BuzzBookhiveReview)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Review FromCBORObject(CBORObject obj)
        {
            return new Review(obj);
        }

        /// <inheritdoc/>
        public static Review Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Review>(s, (JsonTypeInfo<Review>)SourceGenerationContext.Default.BuzzBookhiveReview)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Review result)
        {
            result = JsonSerializer.Deserialize<Review>(s, (JsonTypeInfo<Review>)SourceGenerationContext.Default.BuzzBookhiveReview);
            return result != null;
        }
    }
}

