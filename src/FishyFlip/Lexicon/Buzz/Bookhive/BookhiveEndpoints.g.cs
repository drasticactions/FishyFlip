// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Buzz.Bookhive
{

    /// <summary>
    /// buzz.bookhive Endpoint Group.
    /// </summary>
    public static class BookhiveEndpoints
    {

       public const string GroupNamespace = "buzz.bookhive";

       public const string GetBook = "/xrpc/buzz.bookhive.getBook";

       public const string GetProfile = "/xrpc/buzz.bookhive.getProfile";

       public const string SearchBooks = "/xrpc/buzz.bookhive.searchBooks";


        /// <summary>
        /// Get a book's info. Requires authentication.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="id">The book's hive ID</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Buzz.Bookhive.GetBookOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Buzz.Bookhive.GetBookOutput?>> GetBookAsync (this FishyFlip.ATProtocol atp, string id, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetBook.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("id=" + id);

            var headers = new Dictionary<string, string>();
            if (atp.TryFetchProxy(GroupNamespace, out var proxyUrl))
            {
                headers.Add(Constants.AtProtoProxy, proxyUrl);
            }
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Buzz.Bookhive.GetBookOutput>(endpointUrl, atp.Options.SourceGenerationContext.BuzzBookhiveGetBookOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Get a profile's info. Does not require authentication.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="did">The user's DID to get the profile of</param>
        /// <param name="handle">The user's handle to get the profile of</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Buzz.Bookhive.GetProfileOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Buzz.Bookhive.GetProfileOutput?>> GetProfileAsync (this FishyFlip.ATProtocol atp, string? did = default, string? handle = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetProfile.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            if (did != null)
            {
                queryStrings.Add("did=" + did);
            }

            if (handle != null)
            {
                queryStrings.Add("handle=" + handle);
            }

            var headers = new Dictionary<string, string>();
            if (atp.TryFetchProxy(GroupNamespace, out var proxyUrl))
            {
                headers.Add(Constants.AtProtoProxy, proxyUrl);
            }
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Buzz.Bookhive.GetProfileOutput>(endpointUrl, atp.Options.SourceGenerationContext.BuzzBookhiveGetProfileOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Find books matching the search criteria. Requires authentication.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="q">Search query string. Will be matched against title and authors fields.</param>
        /// <param name="limit"></param>
        /// <param name="offset">Offset for pagination into the result set</param>
        /// <param name="id">The ID of the book within the hive.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Buzz.Bookhive.SearchBooksOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Buzz.Bookhive.SearchBooksOutput?>> SearchBooksAsync (this FishyFlip.ATProtocol atp, string q, int? limit = 25, int? offset = 0, string? id = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = SearchBooks.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("q=" + q);

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            if (offset != null)
            {
                queryStrings.Add("offset=" + offset);
            }

            if (id != null)
            {
                queryStrings.Add("id=" + id);
            }

            var headers = new Dictionary<string, string>();
            if (atp.TryFetchProxy(GroupNamespace, out var proxyUrl))
            {
                headers.Add(Constants.AtProtoProxy, proxyUrl);
            }
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Buzz.Bookhive.SearchBooksOutput>(endpointUrl, atp.Options.SourceGenerationContext.BuzzBookhiveSearchBooksOutput!, cancellationToken, headers);
        }

    }
}

