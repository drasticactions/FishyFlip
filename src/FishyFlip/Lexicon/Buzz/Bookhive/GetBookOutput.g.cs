// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Buzz.Bookhive
{
    public partial class GetBookOutput : ATObject, ICBOREncodable<GetBookOutput>, IJsonEncodable<GetBookOutput>, IParsable<GetBookOutput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="GetBookOutput"/> class.
        /// </summary>
        /// <param name="createdAt"></param>
        /// <param name="startedAt">The date the user started reading the book</param>
        /// <param name="finishedAt">The date the user finished reading the book</param>
        /// <param name="cover">Cover image of the book</param>
        /// <param name="status">
        /// <br/> Known Values: <br/>
        /// finished - User has finished reading the book <br/>
        /// reading - User is currently reading the book <br/>
        /// wantToRead - User wants to read the book <br/>
        /// abandoned - User has abandoned the book <br/>
        /// owned - User owns the book <br/>
        /// </param>
        /// <param name="stars">Number of stars given to the book (1-10) which will be mapped to 1-5 stars</param>
        /// <param name="review">The book's review</param>
        /// <param name="book">The hive book's info
        /// <see cref="FishyFlip.Lexicon.Buzz.Bookhive.HiveBook"/> (buzz.bookhive.hiveBook#record)
        /// </param>
        /// <param name="reviews">Reviews of the book</param>
        /// <param name="comments">Comments on the book</param>
        public GetBookOutput(DateTime? createdAt = default, DateTime? startedAt = default, DateTime? finishedAt = default, Blob? cover = default, string? status = default, long? stars = default, string? review = default, FishyFlip.Lexicon.Buzz.Bookhive.HiveBook book = default, List<FishyFlip.Lexicon.Buzz.Bookhive.Review> reviews = default, List<FishyFlip.Lexicon.Buzz.Bookhive.Comment> comments = default)
        {
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.StartedAt = startedAt;
            this.FinishedAt = finishedAt;
            this.Cover = cover;
            this.Status = status;
            this.Stars = stars;
            this.Review = review;
            this.Book = book;
            this.Reviews = reviews;
            this.Comments = comments;
            this.Type = "buzz.bookhive.getBook#GetBookOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetBookOutput"/> class.
        /// </summary>
        public GetBookOutput()
        {
            this.Type = "buzz.bookhive.getBook#GetBookOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetBookOutput"/> class.
        /// </summary>
        public GetBookOutput(CBORObject obj)
        {
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["startedAt"] is not null) this.StartedAt = obj["startedAt"].ToDateTime();
            if (obj["finishedAt"] is not null) this.FinishedAt = obj["finishedAt"].ToDateTime();
            if (obj["cover"] is not null) this.Cover = new FishyFlip.Models.Blob(obj["cover"]);
            if (obj["status"] is not null) this.Status = obj["status"].AsString();
            if (obj["stars"] is not null) this.Stars = obj["stars"].AsInt64Value();
            if (obj["review"] is not null) this.Review = obj["review"].AsString();
            if (obj["book"] is not null) this.Book = new FishyFlip.Lexicon.Buzz.Bookhive.HiveBook(obj["book"]);
            if (obj["reviews"] is not null) this.Reviews = obj["reviews"].Values.Select(n =>new FishyFlip.Lexicon.Buzz.Bookhive.Review(n)).ToList();
            if (obj["comments"] is not null) this.Comments = obj["comments"].Values.Select(n =>new FishyFlip.Lexicon.Buzz.Bookhive.Comment(n)).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the createdAt.
        /// </summary>
        [JsonPropertyName("createdAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;

        /// <summary>
        /// Gets or sets the startedAt.
        /// <br/> The date the user started reading the book
        /// </summary>
        [JsonPropertyName("startedAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? StartedAt { get; set; }

        /// <summary>
        /// Gets or sets the finishedAt.
        /// <br/> The date the user finished reading the book
        /// </summary>
        [JsonPropertyName("finishedAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? FinishedAt { get; set; }

        /// <summary>
        /// Gets or sets the cover.
        /// <br/> Cover image of the book
        /// </summary>
        [JsonPropertyName("cover")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Blob? Cover { get; set; }

        /// <summary>
        /// Gets or sets the status.
        /// <br/> Known Values: <br/>
        /// finished - User has finished reading the book <br/>
        /// reading - User is currently reading the book <br/>
        /// wantToRead - User wants to read the book <br/>
        /// abandoned - User has abandoned the book <br/>
        /// owned - User owns the book <br/>
        /// </summary>
        [JsonPropertyName("status")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Status { get; set; }

        /// <summary>
        /// Gets or sets the stars.
        /// <br/> Number of stars given to the book (1-10) which will be mapped to 1-5 stars
        /// </summary>
        [JsonPropertyName("stars")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public long? Stars { get; set; }

        /// <summary>
        /// Gets or sets the review.
        /// <br/> The book's review
        /// </summary>
        [JsonPropertyName("review")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Review { get; set; }

        /// <summary>
        /// Gets or sets the book.
        /// <br/> The hive book's info
        /// <br/> <see cref="FishyFlip.Lexicon.Buzz.Bookhive.HiveBook"/> (buzz.bookhive.hiveBook#record)
        /// </summary>
        [JsonPropertyName("book")]
        [JsonRequired]
        public FishyFlip.Lexicon.Buzz.Bookhive.HiveBook Book { get; set; }

        /// <summary>
        /// Gets or sets the reviews.
        /// <br/> Reviews of the book
        /// </summary>
        [JsonPropertyName("reviews")]
        [JsonRequired]
        public List<FishyFlip.Lexicon.Buzz.Bookhive.Review> Reviews { get; set; }

        /// <summary>
        /// Gets or sets the comments.
        /// <br/> Comments on the book
        /// </summary>
        [JsonPropertyName("comments")]
        [JsonRequired]
        public List<FishyFlip.Lexicon.Buzz.Bookhive.Comment> Comments { get; set; }

        public const string RecordType = "buzz.bookhive.getBook#GetBookOutput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Buzz.Bookhive.GetBookOutput>)SourceGenerationContext.Default.BuzzBookhiveGetBookOutput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Buzz.Bookhive.GetBookOutput>)SourceGenerationContext.Default.BuzzBookhiveGetBookOutput);
        }

        public static new GetBookOutput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Buzz.Bookhive.GetBookOutput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Buzz.Bookhive.GetBookOutput>)SourceGenerationContext.Default.BuzzBookhiveGetBookOutput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new GetBookOutput FromCBORObject(CBORObject obj)
        {
            return new GetBookOutput(obj);
        }

        /// <inheritdoc/>
        public static GetBookOutput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<GetBookOutput>(s, (JsonTypeInfo<GetBookOutput>)SourceGenerationContext.Default.BuzzBookhiveGetBookOutput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out GetBookOutput result)
        {
            result = JsonSerializer.Deserialize<GetBookOutput>(s, (JsonTypeInfo<GetBookOutput>)SourceGenerationContext.Default.BuzzBookhiveGetBookOutput);
            return result != null;
        }
    }
}

