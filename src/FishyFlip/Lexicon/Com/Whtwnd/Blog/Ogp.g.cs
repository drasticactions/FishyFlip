// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Com.Whtwnd.Blog
{
    public partial class Ogp : ATObject, ICBOREncodable<Ogp>, IJsonEncodable<Ogp>, IParsable<Ogp>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Ogp"/> class.
        /// </summary>
        /// <param name="url"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        public Ogp(string url = default, long? width = default, long? height = default)
        {
            this.Url = url;
            this.Width = width;
            this.Height = height;
            this.Type = "com.whtwnd.blog.defs#ogp";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Ogp"/> class.
        /// </summary>
        public Ogp()
        {
            this.Type = "com.whtwnd.blog.defs#ogp";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Ogp"/> class.
        /// </summary>
        public Ogp(CBORObject obj)
        {
            if (obj["url"] is not null) this.Url = obj["url"].AsString();
            if (obj["width"] is not null) this.Width = obj["width"].AsInt64Value();
            if (obj["height"] is not null) this.Height = obj["height"].AsInt64Value();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the url.
        /// </summary>
        [JsonPropertyName("url")]
        [JsonRequired]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets the width.
        /// </summary>
        [JsonPropertyName("width")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public long? Width { get; set; }

        /// <summary>
        /// Gets or sets the height.
        /// </summary>
        [JsonPropertyName("height")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public long? Height { get; set; }

        public const string RecordType = "com.whtwnd.blog.defs#ogp";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Whtwnd.Blog.Ogp>)SourceGenerationContext.Default.ComWhtwndBlogOgp);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Whtwnd.Blog.Ogp>)SourceGenerationContext.Default.ComWhtwndBlogOgp);
        }

        public static new Ogp FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Com.Whtwnd.Blog.Ogp>(json, (JsonTypeInfo<FishyFlip.Lexicon.Com.Whtwnd.Blog.Ogp>)SourceGenerationContext.Default.ComWhtwndBlogOgp)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Ogp FromCBORObject(CBORObject obj)
        {
            return new Ogp(obj);
        }

        /// <inheritdoc/>
        public static Ogp Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Ogp>(s, (JsonTypeInfo<Ogp>)SourceGenerationContext.Default.ComWhtwndBlogOgp)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Ogp result)
        {
            result = JsonSerializer.Deserialize<Ogp>(s, (JsonTypeInfo<Ogp>)SourceGenerationContext.Default.ComWhtwndBlogOgp);
            return result != null;
        }
    }
}

