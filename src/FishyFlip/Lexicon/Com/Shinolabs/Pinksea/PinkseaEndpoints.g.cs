// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable

namespace FishyFlip.Lexicon.Com.Shinolabs.Pinksea
{

    /// <summary>
    /// com.shinolabs.pinksea Endpoint Group.
    /// </summary>
    public static class PinkseaEndpoints
    {

       public const string GetAuthorFeed = "/xrpc/com.shinolabs.pinksea.getAuthorFeed";

       public const string GetAuthorReplies = "/xrpc/com.shinolabs.pinksea.getAuthorReplies";

       public const string GetHandleFromDid = "/xrpc/com.shinolabs.pinksea.getHandleFromDid";

       public const string GetIdentity = "/xrpc/com.shinolabs.pinksea.getIdentity";

       public const string GetOekaki = "/xrpc/com.shinolabs.pinksea.getOekaki";

       public const string GetParentForReply = "/xrpc/com.shinolabs.pinksea.getParentForReply";

       public const string GetRecent = "/xrpc/com.shinolabs.pinksea.getRecent";

       public const string GetTagFeed = "/xrpc/com.shinolabs.pinksea.getTagFeed";


        /// <summary>
        /// Gets the feed for a given author.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="did"></param>
        /// <param name="since"></param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetAuthorFeedOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetAuthorFeedOutput?>> GetAuthorFeedAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier did, DateTime? since = default, int? limit = 50, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetAuthorFeed.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("did=" + did);

            if (since != null)
            {
                queryStrings.Add("since=" + since);
            }

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetAuthorFeedOutput>(endpointUrl, atp.Options.SourceGenerationContext.ComShinolabsPinkseaGetAuthorFeedOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Gets the replies for an author.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="did"></param>
        /// <param name="since"></param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetAuthorRepliesOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetAuthorRepliesOutput?>> GetAuthorRepliesAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier did, DateTime? since = default, int? limit = 50, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetAuthorReplies.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("did=" + did);

            if (since != null)
            {
                queryStrings.Add("since=" + since);
            }

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetAuthorRepliesOutput>(endpointUrl, atp.Options.SourceGenerationContext.ComShinolabsPinkseaGetAuthorRepliesOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Gets the handle for a DID.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="did"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetHandleFromDidOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetHandleFromDidOutput?>> GetHandleFromDidAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier did, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetHandleFromDid.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("did=" + did);

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetHandleFromDidOutput>(endpointUrl, atp.Options.SourceGenerationContext.ComShinolabsPinkseaGetHandleFromDidOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Returns the identity of the authenticated user.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetIdentityOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetIdentityOutput?>> GetIdentityAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetIdentity.ToString();
            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            return atp.Get<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetIdentityOutput>(endpointUrl, atp.Options.SourceGenerationContext.ComShinolabsPinkseaGetIdentityOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Gets the data about an oekaki post, with its children
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="did"></param>
        /// <param name="rkey"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetOekakiOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetOekakiOutput?>> GetOekakiAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier did, string rkey, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetOekaki.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("did=" + did);

            queryStrings.Add("rkey=" + rkey);

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetOekakiOutput>(endpointUrl, atp.Options.SourceGenerationContext.ComShinolabsPinkseaGetOekakiOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Gets the parent for a reply.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="did"></param>
        /// <param name="rkey"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetParentForReplyOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetParentForReplyOutput?>> GetParentForReplyAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATIdentifier did, string rkey, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetParentForReply.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("did=" + did);

            queryStrings.Add("rkey=" + rkey);

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetParentForReplyOutput>(endpointUrl, atp.Options.SourceGenerationContext.ComShinolabsPinkseaGetParentForReplyOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Gets the most recent posts on the timeline, in reverse chronological order.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="since"></param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetRecentOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetRecentOutput?>> GetRecentAsync (this FishyFlip.ATProtocol atp, DateTime? since = default, int? limit = 50, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetRecent.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            if (since != null)
            {
                queryStrings.Add("since=" + since);
            }

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetRecentOutput>(endpointUrl, atp.Options.SourceGenerationContext.ComShinolabsPinkseaGetRecentOutput!, cancellationToken, headers);
        }


        /// <summary>
        /// Gets the feed for a given tag.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="tag"></param>
        /// <param name="since"></param>
        /// <param name="limit"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetTagFeedOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetTagFeedOutput?>> GetTagFeedAsync (this FishyFlip.ATProtocol atp, string tag, DateTime? since = default, int? limit = 50, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetTagFeed.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("tag=" + tag);

            if (since != null)
            {
                queryStrings.Add("since=" + since);
            }

            if (limit != null)
            {
                queryStrings.Add("limit=" + limit);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            return atp.Get<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetTagFeedOutput>(endpointUrl, atp.Options.SourceGenerationContext.ComShinolabsPinkseaGetTagFeedOutput!, cancellationToken, headers);
        }

    }
}

