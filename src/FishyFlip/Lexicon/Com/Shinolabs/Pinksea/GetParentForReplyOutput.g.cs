// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Com.Shinolabs.Pinksea
{
    public partial class GetParentForReplyOutput : ATObject, ICBOREncodable<GetParentForReplyOutput>, IJsonEncodable<GetParentForReplyOutput>, IParsable<GetParentForReplyOutput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="GetParentForReplyOutput"/> class.
        /// </summary>
        /// <param name="did">The DID of the author.</param>
        /// <param name="rkey">The record key.</param>
        public GetParentForReplyOutput(FishyFlip.Models.ATIdentifier did = default, string rkey = default)
        {
            this.Did = did;
            this.Rkey = rkey;
            this.Type = "com.shinolabs.pinksea.getParentForReply#GetParentForReplyOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetParentForReplyOutput"/> class.
        /// </summary>
        public GetParentForReplyOutput()
        {
            this.Type = "com.shinolabs.pinksea.getParentForReply#GetParentForReplyOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="GetParentForReplyOutput"/> class.
        /// </summary>
        public GetParentForReplyOutput(CBORObject obj)
        {
            if (obj["did"] is not null) this.Did = obj["did"].ToATIdentifier();
            if (obj["rkey"] is not null) this.Rkey = obj["rkey"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the did.
        /// <br/> The DID of the author.
        /// </summary>
        [JsonPropertyName("did")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATIdentifierJsonConverter))]
        public FishyFlip.Models.ATIdentifier Did { get; set; }

        /// <summary>
        /// Gets or sets the rkey.
        /// <br/> The record key.
        /// </summary>
        [JsonPropertyName("rkey")]
        [JsonRequired]
        public string Rkey { get; set; }

        public const string RecordType = "com.shinolabs.pinksea.getParentForReply#GetParentForReplyOutput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetParentForReplyOutput>)SourceGenerationContext.Default.ComShinolabsPinkseaGetParentForReplyOutput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetParentForReplyOutput>)SourceGenerationContext.Default.ComShinolabsPinkseaGetParentForReplyOutput);
        }

        public static new GetParentForReplyOutput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetParentForReplyOutput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Com.Shinolabs.Pinksea.GetParentForReplyOutput>)SourceGenerationContext.Default.ComShinolabsPinkseaGetParentForReplyOutput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new GetParentForReplyOutput FromCBORObject(CBORObject obj)
        {
            return new GetParentForReplyOutput(obj);
        }

        /// <inheritdoc/>
        public static GetParentForReplyOutput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<GetParentForReplyOutput>(s, (JsonTypeInfo<GetParentForReplyOutput>)SourceGenerationContext.Default.ComShinolabsPinkseaGetParentForReplyOutput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out GetParentForReplyOutput result)
        {
            result = JsonSerializer.Deserialize<GetParentForReplyOutput>(s, (JsonTypeInfo<GetParentForReplyOutput>)SourceGenerationContext.Default.ComShinolabsPinkseaGetParentForReplyOutput);
            return result != null;
        }
    }
}

