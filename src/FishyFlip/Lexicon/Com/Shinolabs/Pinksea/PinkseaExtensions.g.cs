// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

using FishyFlip.Lexicon.Com.Atproto.Repo;

namespace FishyFlip.Lexicon
{

    /// <summary>
    /// Extension methods for com.shinolabs.pinksea.
    /// </summary>
    public static class ComShinolabsPinkseaExtensions
    {

        /// <summary>
        /// Create a Oekaki record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="record"></param>
        /// <param name="rkey"></param>
        /// <param name="validate"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<CreateRecordOutput?>> CreateOekakiAsync(this FishyFlip.Lexicon.Com.Shinolabs.Pinksea.ComShinolabsPinksea atp, FishyFlip.Lexicon.Com.Shinolabs.Pinksea.Oekaki record, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.CreateRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "com.shinolabs.pinksea.oekaki", record, rkey, validate, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Create a Oekaki record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="image">
        /// com.shinolabs.pinksea.defs#image
        /// </param>
        /// <param name="createdAt">The timestamp of creation.</param>
        /// <param name="tags">An array of tags this image had.</param>
        /// <param name="inResponseTo">What this oekaki post is a response to.
        /// <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.StrongRef"/> (com.atproto.repo.strongRef)
        /// </param>
        /// <param name="nsfw">Is this oekaki NSFW?</param>
        /// <param name="rkey"></param>
        /// <param name="validate"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<CreateRecordOutput?>> CreateOekakiAsync(this FishyFlip.Lexicon.Com.Shinolabs.Pinksea.ComShinolabsPinksea atp, FishyFlip.Lexicon.Com.Shinolabs.Pinksea.Image? image, DateTime? createdAt = default, List<string>? tags = default, Com.Atproto.Repo.StrongRef? inResponseTo = default, bool? nsfw = default, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            var record = new FishyFlip.Lexicon.Com.Shinolabs.Pinksea.Oekaki();
            record.CreatedAt = createdAt ?? DateTime.UtcNow;
            record.Image = image;
            record.Tags = tags;
            record.InResponseTo = inResponseTo;
            record.Nsfw = nsfw;
            return atp.ATProtocol.CreateRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "com.shinolabs.pinksea.oekaki", record, rkey, validate, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Delete a Oekaki record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="rkey"></param>
        /// <param name="swapRecord"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<DeleteRecordOutput?>> DeleteOekakiAsync(this FishyFlip.Lexicon.Com.Shinolabs.Pinksea.ComShinolabsPinksea atp, string rkey, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.DeleteRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "com.shinolabs.pinksea.oekaki", rkey, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// Put a Oekaki record.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="rkey"></param>
        /// <param name="record"></param>
        /// <param name="validate"></param>
        /// <param name="swapRecord"></param>
        /// <param name="swapCommit"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<PutRecordOutput?>> PutOekakiAsync(this FishyFlip.Lexicon.Com.Shinolabs.Pinksea.ComShinolabsPinksea atp, string rkey, FishyFlip.Lexicon.Com.Shinolabs.Pinksea.Oekaki record, bool? validate = default, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.PutRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "com.shinolabs.pinksea.oekaki", rkey, record, validate, swapRecord, swapCommit, cancellationToken);
        }

        /// <summary>
        /// List Oekaki records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="reverse"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<ListRecordsOutput?>> ListOekakiAsync(this FishyFlip.Lexicon.Com.Shinolabs.Pinksea.ComShinolabsPinksea atp, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.ListRecordsAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "com.shinolabs.pinksea.oekaki", limit, cursor, reverse, cancellationToken);
        }

        /// <summary>
        /// List Oekaki records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="repo"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="reverse"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<ListRecordsOutput?>> ListOekakiAsync(this FishyFlip.Lexicon.Com.Shinolabs.Pinksea.ComShinolabsPinksea atp, FishyFlip.Models.ATIdentifier repo, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.ListRecordsAsync(repo, "com.shinolabs.pinksea.oekaki", limit, cursor, reverse, cancellationToken);
        }

        /// <summary>
        /// Get Oekaki records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="rkey"></param>
        /// <param name="cid"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<GetRecordOutput?>> GetOekakiAsync(this FishyFlip.Lexicon.Com.Shinolabs.Pinksea.ComShinolabsPinksea atp, string rkey, string? cid = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.GetRecordAsync(atp.ATProtocol.SessionManager.Session?.Did ?? throw new InvalidOperationException("Session did is required."), "com.shinolabs.pinksea.oekaki", rkey, cid, cancellationToken);
        }

        /// <summary>
        /// Get Oekaki records.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="repo"></param>
        /// <param name="rkey"></param>
        /// <param name="cid"></param>
        /// <param name="cancellationToken"></param>
        public static Task<Result<GetRecordOutput?>> GetOekakiAsync(this FishyFlip.Lexicon.Com.Shinolabs.Pinksea.ComShinolabsPinksea atp, FishyFlip.Models.ATIdentifier repo, string rkey, string? cid = default, CancellationToken cancellationToken = default)
        {
            return atp.ATProtocol.GetRecordAsync(repo, "com.shinolabs.pinksea.oekaki", rkey, cid, cancellationToken);
        }
    }
}

