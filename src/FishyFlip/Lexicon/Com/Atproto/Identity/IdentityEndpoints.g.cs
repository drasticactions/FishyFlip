// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Com.Atproto.Identity
{

    /// <summary>
    /// com.atproto.identity Endpoint Group.
    /// </summary>
    public static class IdentityEndpoints
    {

       public const string GetRecommendedDidCredentials = "/xrpc/com.atproto.identity.getRecommendedDidCredentials";

       public const string RequestPlcOperationSignature = "/xrpc/com.atproto.identity.requestPlcOperationSignature";

       public const string ResolveHandle = "/xrpc/com.atproto.identity.resolveHandle";

       public const string SignPlcOperation = "/xrpc/com.atproto.identity.signPlcOperation";

       public const string SubmitPlcOperation = "/xrpc/com.atproto.identity.submitPlcOperation";

       public const string UpdateHandle = "/xrpc/com.atproto.identity.updateHandle";


        /// <summary>
        /// Describe the credentials that should be included in the DID doc of an account that is migrating to this service.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Identity.GetRecommendedDidCredentialsOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Identity.GetRecommendedDidCredentialsOutput?>> GetRecommendedDidCredentialsAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetRecommendedDidCredentials.ToString();
            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            JsonTypeInfo<Com.Atproto.Identity.GetRecommendedDidCredentialsOutput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Identity.GetRecommendedDidCredentialsOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Identity.GetRecommendedDidCredentialsOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Get<FishyFlip.Lexicon.Com.Atproto.Identity.GetRecommendedDidCredentialsOutput>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Request an email with a code to in order to request a signed PLC operation. Requires Auth.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> RequestPlcOperationSignatureAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = RequestPlcOperationSignature.ToString();
            var headers = new Dictionary<string, string>();
            JsonTypeInfo<Success> jsonTypeInfo = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Post<Success?>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Resolves a handle (domain name) to a DID.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="handle"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Identity.ResolveHandleOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Identity.ResolveHandleOutput?>> ResolveHandleAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATHandle handle, CancellationToken cancellationToken = default)
        {
            var endpointUrl = ResolveHandle.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("handle=" + handle);

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            JsonTypeInfo<Com.Atproto.Identity.ResolveHandleOutput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Identity.ResolveHandleOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Identity.ResolveHandleOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Get<FishyFlip.Lexicon.Com.Atproto.Identity.ResolveHandleOutput>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Signs a PLC operation to update some value(s) in the requesting DID's document.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="token"></param>
        /// <param name="rotationKeys"></param>
        /// <param name="alsoKnownAs"></param>
        /// <param name="verificationMethods"></param>
        /// <param name="services"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Identity.SignPlcOperationOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Identity.SignPlcOperationOutput?>> SignPlcOperationAsync (this FishyFlip.ATProtocol atp, string? token = default, List<string>? rotationKeys = default, List<string>? alsoKnownAs = default, ATObject? verificationMethods = default, ATObject? services = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = SignPlcOperation.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new SignPlcOperationInput();
            inputItem.Token = token;
            inputItem.RotationKeys = rotationKeys;
            inputItem.AlsoKnownAs = alsoKnownAs;
            inputItem.VerificationMethods = verificationMethods;
            inputItem.Services = services;
            JsonTypeInfo<Com.Atproto.Identity.SignPlcOperationInput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Identity.SignPlcOperationInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Identity.SignPlcOperationInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Com.Atproto.Identity.SignPlcOperationOutput> jsonTypeInfo2 = (JsonTypeInfo<Com.Atproto.Identity.SignPlcOperationOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Identity.SignPlcOperationOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Post<SignPlcOperationInput, FishyFlip.Lexicon.Com.Atproto.Identity.SignPlcOperationOutput?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Validates a PLC operation to ensure that it doesn't violate a service's constraints or get the identity into a bad state, then submits it to the PLC registry
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="operation"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> SubmitPlcOperationAsync (this FishyFlip.ATProtocol atp, ATObject operation, CancellationToken cancellationToken = default)
        {
            var endpointUrl = SubmitPlcOperation.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new SubmitPlcOperationInput();
            inputItem.Operation = operation;
            JsonTypeInfo<Com.Atproto.Identity.SubmitPlcOperationInput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Identity.SubmitPlcOperationInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Identity.SubmitPlcOperationInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Success> jsonTypeInfo2 = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Post<SubmitPlcOperationInput, Success?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Updates the current account's handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="handle"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> UpdateHandleAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATHandle handle, CancellationToken cancellationToken = default)
        {
            var endpointUrl = UpdateHandle.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new UpdateHandleInput();
            inputItem.Handle = handle;
            JsonTypeInfo<Com.Atproto.Identity.UpdateHandleInput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Identity.UpdateHandleInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Identity.UpdateHandleInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Success> jsonTypeInfo2 = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Post<UpdateHandleInput, Success?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }

    }
}

