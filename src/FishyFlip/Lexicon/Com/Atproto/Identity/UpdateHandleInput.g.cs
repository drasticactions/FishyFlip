// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Com.Atproto.Identity
{
    public partial class UpdateHandleInput : ATObject, ICBOREncodable<UpdateHandleInput>, IJsonEncodable<UpdateHandleInput>, IParsable<UpdateHandleInput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateHandleInput"/> class.
        /// </summary>
        /// <param name="handle">The new handle.</param>
        public UpdateHandleInput(FishyFlip.Models.ATHandle handle = default)
        {
            this.Handle = handle;
            this.Type = "com.atproto.identity.updateHandle#UpdateHandleInput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateHandleInput"/> class.
        /// </summary>
        public UpdateHandleInput()
        {
            this.Type = "com.atproto.identity.updateHandle#UpdateHandleInput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateHandleInput"/> class.
        /// </summary>
        public UpdateHandleInput(CBORObject obj)
        {
            if (obj["handle"] is not null) this.Handle = obj["handle"].ToATHandle();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the handle.
        /// <br/> The new handle.
        /// </summary>
        [JsonPropertyName("handle")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATHandleJsonConverter))]
        public FishyFlip.Models.ATHandle Handle { get; set; }

        public const string RecordType = "com.atproto.identity.updateHandle#UpdateHandleInput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Identity.UpdateHandleInput>)SourceGenerationContext.Default.ComAtprotoIdentityUpdateHandleInput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Identity.UpdateHandleInput>)SourceGenerationContext.Default.ComAtprotoIdentityUpdateHandleInput);
        }

        public static new UpdateHandleInput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Com.Atproto.Identity.UpdateHandleInput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Identity.UpdateHandleInput>)SourceGenerationContext.Default.ComAtprotoIdentityUpdateHandleInput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new UpdateHandleInput FromCBORObject(CBORObject obj)
        {
            return new UpdateHandleInput(obj);
        }

        /// <inheritdoc/>
        public static UpdateHandleInput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<UpdateHandleInput>(s, (JsonTypeInfo<UpdateHandleInput>)SourceGenerationContext.Default.ComAtprotoIdentityUpdateHandleInput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out UpdateHandleInput result)
        {
            result = JsonSerializer.Deserialize<UpdateHandleInput>(s, (JsonTypeInfo<UpdateHandleInput>)SourceGenerationContext.Default.ComAtprotoIdentityUpdateHandleInput);
            return result != null;
        }
    }
}

