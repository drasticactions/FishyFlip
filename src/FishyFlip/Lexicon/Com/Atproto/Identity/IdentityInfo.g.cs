// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Com.Atproto.Identity
{
    public partial class IdentityInfo : ATObject, ICBOREncodable<IdentityInfo>, IJsonEncodable<IdentityInfo>, IParsable<IdentityInfo>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityInfo"/> class.
        /// </summary>
        /// <param name="did"></param>
        /// <param name="handle">The validated handle of the account; or 'handle.invalid' if the handle did not bi-directionally match the DID document.</param>
        /// <param name="didDoc">The complete DID document for the identity.</param>
        public IdentityInfo(FishyFlip.Models.ATDid did = default, FishyFlip.Models.ATHandle handle = default, FishyFlip.Models.DidDoc didDoc = default)
        {
            this.Did = did;
            this.Handle = handle;
            this.DidDoc = didDoc;
            this.Type = "com.atproto.identity.defs#identityInfo";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityInfo"/> class.
        /// </summary>
        public IdentityInfo()
        {
            this.Type = "com.atproto.identity.defs#identityInfo";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityInfo"/> class.
        /// </summary>
        public IdentityInfo(CBORObject obj)
        {
            if (obj["did"] is not null) this.Did = obj["did"].ToATDid();
            if (obj["handle"] is not null) this.Handle = obj["handle"].ToATHandle();
            // Ignore DidDoc
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the did.
        /// </summary>
        [JsonPropertyName("did")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATDidJsonConverter))]
        public FishyFlip.Models.ATDid Did { get; set; }

        /// <summary>
        /// Gets or sets the handle.
        /// <br/> The validated handle of the account; or 'handle.invalid' if the handle did not bi-directionally match the DID document.
        /// </summary>
        [JsonPropertyName("handle")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATHandleJsonConverter))]
        public FishyFlip.Models.ATHandle Handle { get; set; }

        /// <summary>
        /// Gets or sets the didDoc.
        /// <br/> The complete DID document for the identity.
        /// </summary>
        [JsonPropertyName("didDoc")]
        [JsonRequired]
        public FishyFlip.Models.DidDoc DidDoc { get; set; }

        public const string RecordType = "com.atproto.identity.defs#identityInfo";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Identity.IdentityInfo>)SourceGenerationContext.Default.ComAtprotoIdentityIdentityInfo);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Identity.IdentityInfo>)SourceGenerationContext.Default.ComAtprotoIdentityIdentityInfo);
        }

        public static new IdentityInfo FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Com.Atproto.Identity.IdentityInfo>(json, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Identity.IdentityInfo>)SourceGenerationContext.Default.ComAtprotoIdentityIdentityInfo)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new IdentityInfo FromCBORObject(CBORObject obj)
        {
            return new IdentityInfo(obj);
        }

        /// <inheritdoc/>
        public static IdentityInfo Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<IdentityInfo>(s, (JsonTypeInfo<IdentityInfo>)SourceGenerationContext.Default.ComAtprotoIdentityIdentityInfo)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out IdentityInfo result)
        {
            result = JsonSerializer.Deserialize<IdentityInfo>(s, (JsonTypeInfo<IdentityInfo>)SourceGenerationContext.Default.ComAtprotoIdentityIdentityInfo);
            return result != null;
        }
    }
}

