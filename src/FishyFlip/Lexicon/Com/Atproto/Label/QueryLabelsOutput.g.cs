// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Com.Atproto.Label
{
    public partial class QueryLabelsOutput : ATObject, ICBOREncodable<QueryLabelsOutput>, IJsonEncodable<QueryLabelsOutput>, IParsable<QueryLabelsOutput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="QueryLabelsOutput"/> class.
        /// </summary>
        /// <param name="cursor"></param>
        /// <param name="labels"></param>
        public QueryLabelsOutput(string? cursor = default, List<FishyFlip.Lexicon.Com.Atproto.Label.Label> labels = default)
        {
            this.Cursor = cursor;
            this.Labels = labels;
            this.Type = "com.atproto.label.queryLabels#QueryLabelsOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="QueryLabelsOutput"/> class.
        /// </summary>
        public QueryLabelsOutput()
        {
            this.Type = "com.atproto.label.queryLabels#QueryLabelsOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="QueryLabelsOutput"/> class.
        /// </summary>
        public QueryLabelsOutput(CBORObject obj)
        {
            if (obj["cursor"] is not null) this.Cursor = obj["cursor"].AsString();
            if (obj["labels"] is not null) this.Labels = obj["labels"].Values.Select(n =>new FishyFlip.Lexicon.Com.Atproto.Label.Label(n)).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the cursor.
        /// </summary>
        [JsonPropertyName("cursor")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Cursor { get; set; }

        /// <summary>
        /// Gets or sets the labels.
        /// </summary>
        [JsonPropertyName("labels")]
        [JsonRequired]
        public List<FishyFlip.Lexicon.Com.Atproto.Label.Label> Labels { get; set; }

        public const string RecordType = "com.atproto.label.queryLabels#QueryLabelsOutput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Label.QueryLabelsOutput>)SourceGenerationContext.Default.ComAtprotoLabelQueryLabelsOutput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Label.QueryLabelsOutput>)SourceGenerationContext.Default.ComAtprotoLabelQueryLabelsOutput);
        }

        public static new QueryLabelsOutput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Com.Atproto.Label.QueryLabelsOutput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Label.QueryLabelsOutput>)SourceGenerationContext.Default.ComAtprotoLabelQueryLabelsOutput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new QueryLabelsOutput FromCBORObject(CBORObject obj)
        {
            return new QueryLabelsOutput(obj);
        }

        /// <inheritdoc/>
        public static QueryLabelsOutput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<QueryLabelsOutput>(s, (JsonTypeInfo<QueryLabelsOutput>)SourceGenerationContext.Default.ComAtprotoLabelQueryLabelsOutput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out QueryLabelsOutput result)
        {
            result = JsonSerializer.Deserialize<QueryLabelsOutput>(s, (JsonTypeInfo<QueryLabelsOutput>)SourceGenerationContext.Default.ComAtprotoLabelQueryLabelsOutput);
            return result != null;
        }
    }
}

