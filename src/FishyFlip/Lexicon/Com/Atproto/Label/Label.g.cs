// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable

namespace FishyFlip.Lexicon.Com.Atproto.Label
{
    /// <summary>
    /// Metadata tag on an atproto resource (eg, repo or record).
    /// </summary>
    public partial class Label : ATObject
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Label"/> class.
        /// </summary>
        /// <param name="ver">The AT Protocol version of the label object.</param>
        /// <param name="src">DID of the actor who created this label.</param>
        /// <param name="uri">AT URI of the record, repository (account), or other resource that this label applies to.</param>
        /// <param name="cid">Optionally, CID specifying the specific version of 'uri' resource this label applies to.</param>
        /// <param name="val">The short string name of the value or type of this label.</param>
        /// <param name="neg">If true, this is a negation label, overwriting a previous label.</param>
        /// <param name="cts">Timestamp when this label was created.</param>
        /// <param name="exp">Timestamp at which this label expires (no longer applies).</param>
        /// <param name="sig">Signature of dag-cbor encoded label.</param>
        public Label(long? ver = default, FishyFlip.Models.ATDid? src = default, string? uri = default, string? cid = default, string? val = default, bool? neg = default, DateTime? cts = default, DateTime? exp = default, byte[]? sig = default)
        {
            this.Ver = ver;
            this.Src = src;
            this.Uri = uri;
            this.Cid = cid;
            this.Val = val;
            this.Neg = neg;
            this.Cts = cts;
            this.Exp = exp;
            this.Sig = sig;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Label"/> class.
        /// </summary>
        public Label()
        {
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Label"/> class.
        /// </summary>
        public Label(CBORObject obj)
        {
            if (obj["ver"] is not null) this.Ver = obj["ver"].AsInt64Value();
            if (obj["src"] is not null) this.Src = obj["src"].ToATDid();
            if (obj["uri"] is not null) this.Uri = obj["uri"].AsString();
            if (obj["cid"] is not null) this.Cid = obj["cid"].AsString();
            if (obj["val"] is not null) this.Val = obj["val"].AsString();
            if (obj["neg"] is not null) this.Neg = obj["neg"].AsBoolean();
            if (obj["cts"] is not null) this.Cts = obj["cts"].ToDateTime();
            if (obj["exp"] is not null) this.Exp = obj["exp"].ToDateTime();
            if (obj["sig"] is not null) this.Sig = obj["sig"].EncodeToBytes();
        }

        /// <summary>
        /// Gets or sets the ver.
        /// The AT Protocol version of the label object.
        /// </summary>
        [JsonPropertyName("ver")]
        public long? Ver { get; set; }

        /// <summary>
        /// Gets or sets the src.
        /// DID of the actor who created this label.
        /// </summary>
        [JsonPropertyName("src")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATDidJsonConverter))]
        public FishyFlip.Models.ATDid? Src { get; set; }

        /// <summary>
        /// Gets or sets the uri.
        /// AT URI of the record, repository (account), or other resource that this label applies to.
        /// </summary>
        [JsonPropertyName("uri")]
        [JsonRequired]
        public string? Uri { get; set; }

        /// <summary>
        /// Gets or sets the cid.
        /// Optionally, CID specifying the specific version of 'uri' resource this label applies to.
        /// </summary>
        [JsonPropertyName("cid")]
        public string? Cid { get; set; }

        /// <summary>
        /// Gets or sets the val.
        /// The short string name of the value or type of this label.
        /// </summary>
        [JsonPropertyName("val")]
        [JsonRequired]
        public string? Val { get; set; }

        /// <summary>
        /// Gets or sets the neg.
        /// If true, this is a negation label, overwriting a previous label.
        /// </summary>
        [JsonPropertyName("neg")]
        public bool? Neg { get; set; }

        /// <summary>
        /// Gets or sets the cts.
        /// Timestamp when this label was created.
        /// </summary>
        [JsonPropertyName("cts")]
        [JsonRequired]
        public DateTime? Cts { get; set; }

        /// <summary>
        /// Gets or sets the exp.
        /// Timestamp at which this label expires (no longer applies).
        /// </summary>
        [JsonPropertyName("exp")]
        public DateTime? Exp { get; set; }

        /// <summary>
        /// Gets or sets the sig.
        /// Signature of dag-cbor encoded label.
        /// </summary>
        [JsonPropertyName("sig")]
        public byte[]? Sig { get; set; }

        /// <summary>
        /// Gets the ATRecord Type.
        /// </summary>
        [JsonPropertyName("$type")]
        public override string Type => "com.atproto.label.defs#label";

        public const string RecordType = "com.atproto.label.defs#label";

        public override string ToJson()
        {
            return JsonSerializer.Serialize<Com.Atproto.Label.Label>(this, (JsonTypeInfo<Com.Atproto.Label.Label>)SourceGenerationContext.Default.ComAtprotoLabelLabel)!;
        }

        public static Label FromJson(string json)
        {
            return JsonSerializer.Deserialize<Com.Atproto.Label.Label>(json, (JsonTypeInfo<Com.Atproto.Label.Label>)SourceGenerationContext.Default.ComAtprotoLabelLabel)!;
        }
    }
}

