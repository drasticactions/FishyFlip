// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Com.Atproto.Sync
{

    /// <summary>
    /// com.atproto.sync Endpoint Class.
    /// </summary>
    public sealed class ATProtoSync
    {

        private ATProtocol atp;

        /// <summary>
        /// Initializes a new instance of the <see cref="ATProtoSync"/> class.
        /// </summary>
        /// <param name="atp"><see cref="ATProtocol"/>.</param>
        internal ATProtoSync(ATProtocol atp)
        {
            this.atp = atp;
        }

        /// <summary>
        /// Gets the ATProtocol.
        /// </summary>
        internal ATProtocol ATProtocol => this.atp;


        /// <summary>
        /// Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.BlobNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoTakendownError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoSuspendedError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoDeactivatedError"/>  <br/>
        /// </summary>
        /// <param name="did">The DID of the account.</param>
        /// <param name="cid">The CID of the blob to fetch</param>
        /// <param name="cancellationToken"></param>
        public Task<Result<byte[]?>> GetBlobAsync (FishyFlip.Models.ATDid did, string cid, CancellationToken cancellationToken = default)
        {
            return atp.GetBlobAsync(did, cid, cancellationToken);
        }


        /// <summary>
        /// Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.BlockNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoTakendownError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoSuspendedError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoDeactivatedError"/>  <br/>
        /// </summary>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="cids"></param>
        /// <param name="onDecoded"></param>
        /// <param name="cancellationToken"></param>
        public Task<Result<CarResponse?>> GetBlocksAsync (FishyFlip.Models.ATDid did, List<string> cids, OnCarDecoded? onDecoded = default, CancellationToken cancellationToken = default)
        {
            return atp.GetBlocksAsync(did, cids, onDecoded, cancellationToken);
        }


        /// <summary>
        /// Returns information about a specified upstream host, as consumed by the server. Implemented by relays.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.HostNotFoundError"/>  <br/>
        /// </summary>
        /// <param name="hostname">Hostname of the host (eg, PDS or relay) being queried.</param>
        /// <param name="cancellationToken"></param>
        public Task<Result<FishyFlip.Lexicon.Com.Atproto.Sync.GetHostStatusOutput?>> GetHostStatusAsync (string hostname, CancellationToken cancellationToken = default)
        {
            return atp.GetHostStatusAsync(hostname, cancellationToken);
        }


        /// <summary>
        /// Get the current commit CID & revision of the specified repo. Does not require auth.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.RepoNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoTakendownError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoSuspendedError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoDeactivatedError"/>  <br/>
        /// </summary>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="cancellationToken"></param>
        public Task<Result<FishyFlip.Lexicon.Com.Atproto.Sync.GetLatestCommitOutput?>> GetLatestCommitAsync (FishyFlip.Models.ATDid did, CancellationToken cancellationToken = default)
        {
            return atp.GetLatestCommitAsync(did, cancellationToken);
        }


        /// <summary>
        /// Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.RecordNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoTakendownError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoSuspendedError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoDeactivatedError"/>  <br/>
        /// </summary>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="collection"></param>
        /// <param name="rkey">Record Key</param>
        /// <param name="onDecoded"></param>
        /// <param name="cancellationToken"></param>
        public Task<Result<CarResponse?>> GetRecordAsync (FishyFlip.Models.ATDid did, string collection, string rkey, OnCarDecoded? onDecoded = default, CancellationToken cancellationToken = default)
        {
            return atp.GetRecordAsync(did, collection, rkey, onDecoded, cancellationToken);
        }


        /// <summary>
        /// Download a repository export as CAR file. Optionally only a 'diff' since a previous revision. Does not require auth; implemented by PDS.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.RepoNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoTakendownError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoSuspendedError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoDeactivatedError"/>  <br/>
        /// </summary>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">The revision ('rev') of the repo to create a diff from.</param>
        /// <param name="onDecoded"></param>
        /// <param name="cancellationToken"></param>
        public Task<Result<CarResponse?>> GetRepoAsync (FishyFlip.Models.ATDid did, string? since = default, OnCarDecoded? onDecoded = default, CancellationToken cancellationToken = default)
        {
            return atp.GetRepoAsync(did, since, onDecoded, cancellationToken);
        }


        /// <summary>
        /// Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.RepoNotFoundError"/>  <br/>
        /// </summary>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="cancellationToken"></param>
        public Task<Result<FishyFlip.Lexicon.Com.Atproto.Sync.GetRepoStatusOutput?>> GetRepoStatusAsync (FishyFlip.Models.ATDid did, CancellationToken cancellationToken = default)
        {
            return atp.GetRepoStatusAsync(did, cancellationToken);
        }


        /// <summary>
        /// List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.RepoNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoTakendownError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoSuspendedError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoDeactivatedError"/>  <br/>
        /// </summary>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">Optional revision of the repo to list blobs since.</param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        public Task<Result<FishyFlip.Lexicon.Com.Atproto.Sync.ListBlobsOutput?>> ListBlobsAsync (FishyFlip.Models.ATDid did, string? since = default, int? limit = 500, string? cursor = default, CancellationToken cancellationToken = default)
        {
            return atp.ListBlobsAsync(did, since, limit, cursor, cancellationToken);
        }


        /// <summary>
        /// Enumerates upstream hosts (eg, PDS or relay instances) that this service consumes from. Implemented by relays.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        public Task<Result<FishyFlip.Lexicon.Com.Atproto.Sync.ListHostsOutput?>> ListHostsAsync (int? limit = 200, string? cursor = default, CancellationToken cancellationToken = default)
        {
            return atp.ListHostsAsync(limit, cursor, cancellationToken);
        }

        /// <summary>
        /// Enumerates upstream hosts (eg, PDS or relay instances) that this service consumes from. Implemented by relays.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        public ListHostsOutputCollection ListHostsCollectionAsync (int? limit = 200, string? cursor = default, CancellationToken cancellationToken = default)
        {
            return new ListHostsOutputCollection(atp, limit, cursor, cancellationToken);
        }


        /// <summary>
        /// Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        public Task<Result<FishyFlip.Lexicon.Com.Atproto.Sync.ListReposOutput?>> ListReposAsync (int? limit = 500, string? cursor = default, CancellationToken cancellationToken = default)
        {
            return atp.ListReposAsync(limit, cursor, cancellationToken);
        }

        /// <summary>
        /// Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        public ListReposOutputCollection ListReposCollectionAsync (int? limit = 500, string? cursor = default, CancellationToken cancellationToken = default)
        {
            return new ListReposOutputCollection(atp, limit, cursor, cancellationToken);
        }


        /// <summary>
        /// Enumerates all the DIDs which have records with the given collection NSID.
        /// </summary>
        /// <param name="collection"></param>
        /// <param name="limit">Maximum size of response set. Recommend setting a large maximum (1000+) when enumerating large DID lists.</param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        public Task<Result<FishyFlip.Lexicon.Com.Atproto.Sync.ListReposByCollectionOutput?>> ListReposByCollectionAsync (string collection, int? limit = 500, string? cursor = default, CancellationToken cancellationToken = default)
        {
            return atp.ListReposByCollectionAsync(collection, limit, cursor, cancellationToken);
        }

        /// <summary>
        /// Enumerates all the DIDs which have records with the given collection NSID.
        /// </summary>
        /// <param name="collection"></param>
        /// <param name="limit">Maximum size of response set. Recommend setting a large maximum (1000+) when enumerating large DID lists.</param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        public ListReposByCollectionOutputCollection ListReposByCollectionCollectionAsync (string collection, int? limit = 500, string? cursor = default, CancellationToken cancellationToken = default)
        {
            return new ListReposByCollectionOutputCollection(atp, collection, limit, cursor, cancellationToken);
        }


        /// <summary>
        /// Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.HostBannedError"/>  <br/>
        /// </summary>
        /// <param name="hostname">Hostname of the current service (eg, PDS) that is requesting to be crawled.</param>
        /// <param name="cancellationToken"></param>
        public Task<Result<Success?>> RequestCrawlAsync (string hostname, CancellationToken cancellationToken = default)
        {
            return atp.RequestCrawlAsync(hostname, cancellationToken);
        }

    }
}

