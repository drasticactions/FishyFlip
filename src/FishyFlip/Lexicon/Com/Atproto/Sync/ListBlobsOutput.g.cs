// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Com.Atproto.Sync
{
    public partial class ListBlobsOutput : ATObject, ICBOREncodable<ListBlobsOutput>, IJsonEncodable<ListBlobsOutput>, IParsable<ListBlobsOutput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="ListBlobsOutput"/> class.
        /// </summary>
        /// <param name="cursor"></param>
        /// <param name="cids"></param>
        public ListBlobsOutput(string? cursor = default, List<string> cids = default)
        {
            this.Cursor = cursor;
            this.Cids = cids;
            this.Type = "com.atproto.sync.listBlobs#ListBlobsOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ListBlobsOutput"/> class.
        /// </summary>
        public ListBlobsOutput()
        {
            this.Type = "com.atproto.sync.listBlobs#ListBlobsOutput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="ListBlobsOutput"/> class.
        /// </summary>
        public ListBlobsOutput(CBORObject obj)
        {
            if (obj["cursor"] is not null) this.Cursor = obj["cursor"].AsString();
            if (obj["cids"] is not null) this.Cids = obj["cids"].Values.Select(n =>n.AsString()).ToList();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the cursor.
        /// </summary>
        [JsonPropertyName("cursor")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Cursor { get; set; }

        /// <summary>
        /// Gets or sets the cids.
        /// </summary>
        [JsonPropertyName("cids")]
        [JsonRequired]
        public List<string> Cids { get; set; }

        public const string RecordType = "com.atproto.sync.listBlobs#ListBlobsOutput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Sync.ListBlobsOutput>)SourceGenerationContext.Default.ComAtprotoSyncListBlobsOutput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Sync.ListBlobsOutput>)SourceGenerationContext.Default.ComAtprotoSyncListBlobsOutput);
        }

        public static new ListBlobsOutput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Com.Atproto.Sync.ListBlobsOutput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Sync.ListBlobsOutput>)SourceGenerationContext.Default.ComAtprotoSyncListBlobsOutput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new ListBlobsOutput FromCBORObject(CBORObject obj)
        {
            return new ListBlobsOutput(obj);
        }

        /// <inheritdoc/>
        public static ListBlobsOutput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<ListBlobsOutput>(s, (JsonTypeInfo<ListBlobsOutput>)SourceGenerationContext.Default.ComAtprotoSyncListBlobsOutput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out ListBlobsOutput result)
        {
            result = JsonSerializer.Deserialize<ListBlobsOutput>(s, (JsonTypeInfo<ListBlobsOutput>)SourceGenerationContext.Default.ComAtprotoSyncListBlobsOutput);
            return result != null;
        }
    }
}

