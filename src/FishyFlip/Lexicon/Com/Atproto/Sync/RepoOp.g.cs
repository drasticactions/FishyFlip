// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Com.Atproto.Sync
{
    /// <summary>
    /// A repo operation, ie a mutation of a single record.
    /// </summary>
    public partial class RepoOp : ATObject, ICBOREncodable<RepoOp>, IJsonEncodable<RepoOp>, IParsable<RepoOp>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="RepoOp"/> class.
        /// </summary>
        /// <param name="action">
        /// <br/> Known Values: <br/>
        /// create <br/>
        /// update <br/>
        /// delete <br/>
        /// </param>
        /// <param name="path"></param>
        /// <param name="cid">For creates and updates, the new record CID. For deletions, null.</param>
        /// <param name="prev">For updates and deletes, the previous record CID (required for inductive firehose). For creations, field should not be defined.</param>
        public RepoOp(string action = default, string path = default, Ipfs.Cid cid = default, Ipfs.Cid? prev = default)
        {
            this.Action = action;
            this.Path = path;
            this.Cid = cid;
            this.Prev = prev;
            this.Type = "com.atproto.sync.subscribeRepos#repoOp";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="RepoOp"/> class.
        /// </summary>
        public RepoOp()
        {
            this.Type = "com.atproto.sync.subscribeRepos#repoOp";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="RepoOp"/> class.
        /// </summary>
        public RepoOp(CBORObject obj)
        {
            if (obj["action"] is not null) this.Action = obj["action"].AsString();
            if (obj["path"] is not null) this.Path = obj["path"].AsString();
            if (obj["cid"] is not null) this.Cid = obj["cid"].ToATCid();
            if (obj["prev"] is not null) this.Prev = obj["prev"].ToATCid();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the action.
        /// <br/> Known Values: <br/>
        /// create <br/>
        /// update <br/>
        /// delete <br/>
        /// </summary>
        [JsonPropertyName("action")]
        [JsonRequired]
        public string Action { get; set; }

        /// <summary>
        /// Gets or sets the path.
        /// </summary>
        [JsonPropertyName("path")]
        [JsonRequired]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets the cid.
        /// <br/> For creates and updates, the new record CID. For deletions, null.
        /// </summary>
        [JsonPropertyName("cid")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATCidJsonConverter))]
        public Ipfs.Cid Cid { get; set; }

        /// <summary>
        /// Gets or sets the prev.
        /// <br/> For updates and deletes, the previous record CID (required for inductive firehose). For creations, field should not be defined.
        /// </summary>
        [JsonPropertyName("prev")]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATCidJsonConverter))]
        public Ipfs.Cid? Prev { get; set; }

        public const string RecordType = "com.atproto.sync.subscribeRepos#repoOp";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Sync.RepoOp>)SourceGenerationContext.Default.ComAtprotoSyncRepoOp);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Sync.RepoOp>)SourceGenerationContext.Default.ComAtprotoSyncRepoOp);
        }

        public static new RepoOp FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Com.Atproto.Sync.RepoOp>(json, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Sync.RepoOp>)SourceGenerationContext.Default.ComAtprotoSyncRepoOp)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new RepoOp FromCBORObject(CBORObject obj)
        {
            return new RepoOp(obj);
        }

        /// <inheritdoc/>
        public static RepoOp Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<RepoOp>(s, (JsonTypeInfo<RepoOp>)SourceGenerationContext.Default.ComAtprotoSyncRepoOp)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out RepoOp result)
        {
            result = JsonSerializer.Deserialize<RepoOp>(s, (JsonTypeInfo<RepoOp>)SourceGenerationContext.Default.ComAtprotoSyncRepoOp);
            return result != null;
        }
    }
}

