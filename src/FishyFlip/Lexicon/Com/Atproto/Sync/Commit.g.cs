// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Com.Atproto.Sync
{
    /// <summary>
    /// Represents an update of repository state. Note that empty commits are allowed, which include no repo data changes, but an update to rev and signature.
    /// </summary>
    public partial class Commit : ATObject, ICBOREncodable<Commit>, IJsonEncodable<Commit>, IParsable<Commit>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="Commit"/> class.
        /// </summary>
        /// <param name="seq">The stream sequence number of this message.</param>
        /// <param name="repo">The repo this event comes from. Note that all other message types name this field 'did'.</param>
        /// <param name="commit">Repo commit object CID.</param>
        /// <param name="rev">The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event.</param>
        /// <param name="since">The rev of the last emitted commit from this repo (if any).</param>
        /// <param name="blocks">CAR file containing relevant blocks, as a diff since the previous repo state. The commit must be included as a block, and the commit block CID must be the first entry in the CAR header 'roots' list.</param>
        /// <param name="ops"></param>
        /// <param name="blobs"></param>
        /// <param name="prevData">The root CID of the MST tree for the previous commit from this repo (indicated by the 'since' revision field in this message). Corresponds to the 'data' field in the repo commit object. NOTE: this field is effectively required for the 'inductive' version of firehose.</param>
        /// <param name="time">Timestamp of when this message was originally broadcast.</param>
        public Commit(long seq = default, FishyFlip.Models.ATDid repo = default, Ipfs.Cid commit = default, string rev = default, string since = default, byte[] blocks = default, List<FishyFlip.Lexicon.Com.Atproto.Sync.RepoOp> ops = default, List<Ipfs.Cid> blobs = default, Ipfs.Cid? prevData = default, DateTime? time = default)
        {
            this.Seq = seq;
            this.Repo = repo;
            this.CommitValue = commit;
            this.Rev = rev;
            this.Since = since;
            this.Blocks = blocks;
            this.Ops = ops;
            this.Blobs = blobs;
            this.PrevData = prevData;
            this.Time = time;
            this.Type = "com.atproto.sync.subscribeRepos#commit";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Commit"/> class.
        /// </summary>
        public Commit()
        {
            this.Type = "com.atproto.sync.subscribeRepos#commit";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="Commit"/> class.
        /// </summary>
        public Commit(CBORObject obj)
        {
            if (obj["seq"] is not null) this.Seq = obj["seq"].AsInt64Value();
            if (obj["repo"] is not null) this.Repo = obj["repo"].ToATDid();
            if (obj["commit"] is not null) this.CommitValue = obj["commit"].ToATCid();
            if (obj["rev"] is not null) this.Rev = obj["rev"].AsString();
            if (obj["since"] is not null) this.Since = obj["since"].AsString();
            if (obj["blocks"] is not null) this.Blocks = obj["blocks"].EncodeToBytes();
            if (obj["ops"] is not null) this.Ops = obj["ops"].Values.Select(n =>new FishyFlip.Lexicon.Com.Atproto.Sync.RepoOp(n)).ToList();
            if (obj["blobs"] is not null) this.Blobs = obj["blobs"].Values.Select(n =>n.ToATCid()!).ToList();
            if (obj["prevData"] is not null) this.PrevData = obj["prevData"].ToATCid();
            if (obj["time"] is not null) this.Time = obj["time"].ToDateTime();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the seq.
        /// <br/> The stream sequence number of this message.
        /// </summary>
        [JsonPropertyName("seq")]
        [JsonRequired]
        public long Seq { get; set; }

        /// <summary>
        /// Gets or sets the repo.
        /// <br/> The repo this event comes from. Note that all other message types name this field 'did'.
        /// </summary>
        [JsonPropertyName("repo")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATDidJsonConverter))]
        public FishyFlip.Models.ATDid Repo { get; set; }

        /// <summary>
        /// Gets or sets the commit.
        /// <br/> Repo commit object CID.
        /// </summary>
        [JsonPropertyName("commit")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATCidJsonConverter))]
        public Ipfs.Cid CommitValue { get; set; }

        /// <summary>
        /// Gets or sets the rev.
        /// <br/> The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event.
        /// </summary>
        [JsonPropertyName("rev")]
        [JsonRequired]
        public string Rev { get; set; }

        /// <summary>
        /// Gets or sets the since.
        /// <br/> The rev of the last emitted commit from this repo (if any).
        /// </summary>
        [JsonPropertyName("since")]
        [JsonRequired]
        public string Since { get; set; }

        /// <summary>
        /// Gets or sets the blocks.
        /// <br/> CAR file containing relevant blocks, as a diff since the previous repo state. The commit must be included as a block, and the commit block CID must be the first entry in the CAR header 'roots' list.
        /// </summary>
        [JsonPropertyName("blocks")]
        [JsonRequired]
        public byte[] Blocks { get; set; }

        /// <summary>
        /// Gets or sets the ops.
        /// </summary>
        [JsonPropertyName("ops")]
        [JsonRequired]
        public List<FishyFlip.Lexicon.Com.Atproto.Sync.RepoOp> Ops { get; set; }

        /// <summary>
        /// Gets or sets the blobs.
        /// </summary>
        [JsonPropertyName("blobs")]
        [JsonRequired]
        public List<Ipfs.Cid> Blobs { get; set; }

        /// <summary>
        /// Gets or sets the prevData.
        /// <br/> The root CID of the MST tree for the previous commit from this repo (indicated by the 'since' revision field in this message). Corresponds to the 'data' field in the repo commit object. NOTE: this field is effectively required for the 'inductive' version of firehose.
        /// </summary>
        [JsonPropertyName("prevData")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATCidJsonConverter))]
        public Ipfs.Cid? PrevData { get; set; }

        /// <summary>
        /// Gets or sets the time.
        /// <br/> Timestamp of when this message was originally broadcast.
        /// </summary>
        [JsonPropertyName("time")]
        [JsonRequired]
        public DateTime? Time { get; set; }

        public const string RecordType = "com.atproto.sync.subscribeRepos#commit";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Sync.Commit>)SourceGenerationContext.Default.ComAtprotoSyncCommit);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Sync.Commit>)SourceGenerationContext.Default.ComAtprotoSyncCommit);
        }

        public static new Commit FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Com.Atproto.Sync.Commit>(json, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Sync.Commit>)SourceGenerationContext.Default.ComAtprotoSyncCommit)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new Commit FromCBORObject(CBORObject obj)
        {
            return new Commit(obj);
        }

        /// <inheritdoc/>
        public static Commit Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<Commit>(s, (JsonTypeInfo<Commit>)SourceGenerationContext.Default.ComAtprotoSyncCommit)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out Commit result)
        {
            result = JsonSerializer.Deserialize<Commit>(s, (JsonTypeInfo<Commit>)SourceGenerationContext.Default.ComAtprotoSyncCommit);
            return result != null;
        }
    }
}

