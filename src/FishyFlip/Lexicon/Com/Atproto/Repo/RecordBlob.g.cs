// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Com.Atproto.Repo
{
    public partial class RecordBlob : ATObject, ICBOREncodable<RecordBlob>, IJsonEncodable<RecordBlob>, IParsable<RecordBlob>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordBlob"/> class.
        /// </summary>
        /// <param name="cid"></param>
        /// <param name="recordUri"></param>
        public RecordBlob(string cid = default, FishyFlip.Models.ATUri recordUri = default)
        {
            this.Cid = cid;
            this.RecordUri = recordUri;
            this.Type = "com.atproto.repo.listMissingBlobs#recordBlob";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="RecordBlob"/> class.
        /// </summary>
        public RecordBlob()
        {
            this.Type = "com.atproto.repo.listMissingBlobs#recordBlob";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="RecordBlob"/> class.
        /// </summary>
        public RecordBlob(CBORObject obj)
        {
            if (obj["cid"] is not null) this.Cid = obj["cid"].AsString();
            if (obj["recordUri"] is not null) this.RecordUri = obj["recordUri"].ToATUri();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the cid.
        /// </summary>
        [JsonPropertyName("cid")]
        [JsonRequired]
        public string Cid { get; set; }

        /// <summary>
        /// Gets or sets the recordUri.
        /// </summary>
        [JsonPropertyName("recordUri")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATUriJsonConverter))]
        public FishyFlip.Models.ATUri RecordUri { get; set; }

        public const string RecordType = "com.atproto.repo.listMissingBlobs#recordBlob";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Repo.RecordBlob>)SourceGenerationContext.Default.ComAtprotoRepoRecordBlob);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Repo.RecordBlob>)SourceGenerationContext.Default.ComAtprotoRepoRecordBlob);
        }

        public static new RecordBlob FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Com.Atproto.Repo.RecordBlob>(json, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Repo.RecordBlob>)SourceGenerationContext.Default.ComAtprotoRepoRecordBlob)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new RecordBlob FromCBORObject(CBORObject obj)
        {
            return new RecordBlob(obj);
        }

        /// <inheritdoc/>
        public static RecordBlob Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<RecordBlob>(s, (JsonTypeInfo<RecordBlob>)SourceGenerationContext.Default.ComAtprotoRepoRecordBlob)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out RecordBlob result)
        {
            result = JsonSerializer.Deserialize<RecordBlob>(s, (JsonTypeInfo<RecordBlob>)SourceGenerationContext.Default.ComAtprotoRepoRecordBlob);
            return result != null;
        }
    }
}

