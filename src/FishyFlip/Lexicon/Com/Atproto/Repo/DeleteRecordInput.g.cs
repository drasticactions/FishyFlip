// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable

namespace FishyFlip.Lexicon.Com.Atproto.Repo
{
    public partial class DeleteRecordInput : ATObject
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteRecordInput"/> class.
        /// </summary>
        /// <param name="repo">The handle or DID of the repo (aka, current account).</param>
        /// <param name="collection">The NSID of the record collection.</param>
        /// <param name="rkey">The Record Key.</param>
        /// <param name="swapRecord">Compare and swap with the previous record by CID.</param>
        /// <param name="swapCommit">Compare and swap with the previous commit by CID.</param>
        public DeleteRecordInput(FishyFlip.Models.ATIdentifier? repo = default, string? collection = default, string? rkey = default, string? swapRecord = default, string? swapCommit = default)
        {
            this.Repo = repo;
            this.Collection = collection;
            this.Rkey = rkey;
            this.SwapRecord = swapRecord;
            this.SwapCommit = swapCommit;
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteRecordInput"/> class.
        /// </summary>
        public DeleteRecordInput()
        {
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteRecordInput"/> class.
        /// </summary>
        public DeleteRecordInput(CBORObject obj)
        {
            if (obj["repo"] is not null) this.Repo = obj["repo"].ToATIdentifier();
            if (obj["collection"] is not null) this.Collection = obj["collection"].AsString();
            if (obj["rkey"] is not null) this.Rkey = obj["rkey"].AsString();
            if (obj["swapRecord"] is not null) this.SwapRecord = obj["swapRecord"].AsString();
            if (obj["swapCommit"] is not null) this.SwapCommit = obj["swapCommit"].AsString();
        }

        /// <summary>
        /// Gets or sets the repo.
        /// The handle or DID of the repo (aka, current account).
        /// </summary>
        [JsonPropertyName("repo")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATIdentifierJsonConverter))]
        public FishyFlip.Models.ATIdentifier? Repo { get; set; }

        /// <summary>
        /// Gets or sets the collection.
        /// The NSID of the record collection.
        /// </summary>
        [JsonPropertyName("collection")]
        [JsonRequired]
        public string? Collection { get; set; }

        /// <summary>
        /// Gets or sets the rkey.
        /// The Record Key.
        /// </summary>
        [JsonPropertyName("rkey")]
        [JsonRequired]
        public string? Rkey { get; set; }

        /// <summary>
        /// Gets or sets the swapRecord.
        /// Compare and swap with the previous record by CID.
        /// </summary>
        [JsonPropertyName("swapRecord")]
        public string? SwapRecord { get; set; }

        /// <summary>
        /// Gets or sets the swapCommit.
        /// Compare and swap with the previous commit by CID.
        /// </summary>
        [JsonPropertyName("swapCommit")]
        public string? SwapCommit { get; set; }

        /// <summary>
        /// Gets the ATRecord Type.
        /// </summary>
        [JsonPropertyName("$type")]
        public override string Type => "com.atproto.repo.deleteRecord#DeleteRecordInput";

        public const string RecordType = "com.atproto.repo.deleteRecord#DeleteRecordInput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize<Com.Atproto.Repo.DeleteRecordInput>(this, (JsonTypeInfo<Com.Atproto.Repo.DeleteRecordInput>)SourceGenerationContext.Default.ComAtprotoRepoDeleteRecordInput)!;
        }

        public static DeleteRecordInput FromJson(string json)
        {
            return JsonSerializer.Deserialize<Com.Atproto.Repo.DeleteRecordInput>(json, (JsonTypeInfo<Com.Atproto.Repo.DeleteRecordInput>)SourceGenerationContext.Default.ComAtprotoRepoDeleteRecordInput)!;
        }
    }
}

