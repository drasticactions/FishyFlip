// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Com.Atproto.Server
{
    public partial class CreateAccountInput : ATObject, ICBOREncodable<CreateAccountInput>, IJsonEncodable<CreateAccountInput>, IParsable<CreateAccountInput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAccountInput"/> class.
        /// </summary>
        /// <param name="email"></param>
        /// <param name="handle">Requested handle for the account.</param>
        /// <param name="did">Pre-existing atproto DID, being imported to a new account.</param>
        /// <param name="inviteCode"></param>
        /// <param name="verificationCode"></param>
        /// <param name="verificationPhone"></param>
        /// <param name="password">Initial account password. May need to meet instance-specific password strength requirements.</param>
        /// <param name="recoveryKey">DID PLC rotation key (aka, recovery key) to be included in PLC creation operation.</param>
        /// <param name="plcOp">A signed DID PLC operation to be submitted as part of importing an existing account to this instance. NOTE: this optional field may be updated when full account migration is implemented.</param>
        public CreateAccountInput(string? email = default, FishyFlip.Models.ATHandle handle = default, FishyFlip.Models.ATDid? did = default, string? inviteCode = default, string? verificationCode = default, string? verificationPhone = default, string? password = default, string? recoveryKey = default, ATObject? plcOp = default)
        {
            this.Email = email;
            this.Handle = handle;
            this.Did = did;
            this.InviteCode = inviteCode;
            this.VerificationCode = verificationCode;
            this.VerificationPhone = verificationPhone;
            this.Password = password;
            this.RecoveryKey = recoveryKey;
            this.PlcOp = plcOp;
            this.Type = "com.atproto.server.createAccount#CreateAccountInput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAccountInput"/> class.
        /// </summary>
        public CreateAccountInput()
        {
            this.Type = "com.atproto.server.createAccount#CreateAccountInput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAccountInput"/> class.
        /// </summary>
        public CreateAccountInput(CBORObject obj)
        {
            if (obj["email"] is not null) this.Email = obj["email"].AsString();
            if (obj["handle"] is not null) this.Handle = obj["handle"].ToATHandle();
            if (obj["did"] is not null) this.Did = obj["did"].ToATDid();
            if (obj["inviteCode"] is not null) this.InviteCode = obj["inviteCode"].AsString();
            if (obj["verificationCode"] is not null) this.VerificationCode = obj["verificationCode"].AsString();
            if (obj["verificationPhone"] is not null) this.VerificationPhone = obj["verificationPhone"].AsString();
            if (obj["password"] is not null) this.Password = obj["password"].AsString();
            if (obj["recoveryKey"] is not null) this.RecoveryKey = obj["recoveryKey"].AsString();
            if (obj["plcOp"] is not null) this.PlcOp = obj["plcOp"].ToATObject();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the email.
        /// </summary>
        [JsonPropertyName("email")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Email { get; set; }

        /// <summary>
        /// Gets or sets the handle.
        /// <br/> Requested handle for the account.
        /// </summary>
        [JsonPropertyName("handle")]
        [JsonRequired]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATHandleJsonConverter))]
        public FishyFlip.Models.ATHandle Handle { get; set; }

        /// <summary>
        /// Gets or sets the did.
        /// <br/> Pre-existing atproto DID, being imported to a new account.
        /// </summary>
        [JsonPropertyName("did")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonConverter(typeof(FishyFlip.Tools.Json.ATDidJsonConverter))]
        public FishyFlip.Models.ATDid? Did { get; set; }

        /// <summary>
        /// Gets or sets the inviteCode.
        /// </summary>
        [JsonPropertyName("inviteCode")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? InviteCode { get; set; }

        /// <summary>
        /// Gets or sets the verificationCode.
        /// </summary>
        [JsonPropertyName("verificationCode")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? VerificationCode { get; set; }

        /// <summary>
        /// Gets or sets the verificationPhone.
        /// </summary>
        [JsonPropertyName("verificationPhone")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? VerificationPhone { get; set; }

        /// <summary>
        /// Gets or sets the password.
        /// <br/> Initial account password. May need to meet instance-specific password strength requirements.
        /// </summary>
        [JsonPropertyName("password")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Password { get; set; }

        /// <summary>
        /// Gets or sets the recoveryKey.
        /// <br/> DID PLC rotation key (aka, recovery key) to be included in PLC creation operation.
        /// </summary>
        [JsonPropertyName("recoveryKey")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? RecoveryKey { get; set; }

        /// <summary>
        /// Gets or sets the plcOp.
        /// <br/> A signed DID PLC operation to be submitted as part of importing an existing account to this instance. NOTE: this optional field may be updated when full account migration is implemented.
        /// </summary>
        [JsonPropertyName("plcOp")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public ATObject? PlcOp { get; set; }

        public const string RecordType = "com.atproto.server.createAccount#CreateAccountInput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Server.CreateAccountInput>)SourceGenerationContext.Default.ComAtprotoServerCreateAccountInput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Server.CreateAccountInput>)SourceGenerationContext.Default.ComAtprotoServerCreateAccountInput);
        }

        public static new CreateAccountInput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Com.Atproto.Server.CreateAccountInput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Server.CreateAccountInput>)SourceGenerationContext.Default.ComAtprotoServerCreateAccountInput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new CreateAccountInput FromCBORObject(CBORObject obj)
        {
            return new CreateAccountInput(obj);
        }

        /// <inheritdoc/>
        public static CreateAccountInput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<CreateAccountInput>(s, (JsonTypeInfo<CreateAccountInput>)SourceGenerationContext.Default.ComAtprotoServerCreateAccountInput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out CreateAccountInput result)
        {
            result = JsonSerializer.Deserialize<CreateAccountInput>(s, (JsonTypeInfo<CreateAccountInput>)SourceGenerationContext.Default.ComAtprotoServerCreateAccountInput);
            return result != null;
        }
    }
}

