// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Com.Atproto.Server
{

    /// <summary>
    /// com.atproto.server Endpoint Group.
    /// </summary>
    public static class ServerEndpoints
    {

       public const string ActivateAccount = "/xrpc/com.atproto.server.activateAccount";

       public const string CheckAccountStatus = "/xrpc/com.atproto.server.checkAccountStatus";

       public const string ConfirmEmail = "/xrpc/com.atproto.server.confirmEmail";

       public const string CreateAccount = "/xrpc/com.atproto.server.createAccount";

       public const string CreateAppPassword = "/xrpc/com.atproto.server.createAppPassword";

       public const string CreateInviteCode = "/xrpc/com.atproto.server.createInviteCode";

       public const string CreateInviteCodes = "/xrpc/com.atproto.server.createInviteCodes";

       public const string CreateSession = "/xrpc/com.atproto.server.createSession";

       public const string DeactivateAccount = "/xrpc/com.atproto.server.deactivateAccount";

       public const string DeleteAccount = "/xrpc/com.atproto.server.deleteAccount";

       public const string DeleteSession = "/xrpc/com.atproto.server.deleteSession";

       public const string DescribeServer = "/xrpc/com.atproto.server.describeServer";

       public const string GetAccountInviteCodes = "/xrpc/com.atproto.server.getAccountInviteCodes";

       public const string GetServiceAuth = "/xrpc/com.atproto.server.getServiceAuth";

       public const string GetSession = "/xrpc/com.atproto.server.getSession";

       public const string ListAppPasswords = "/xrpc/com.atproto.server.listAppPasswords";

       public const string RefreshSession = "/xrpc/com.atproto.server.refreshSession";

       public const string RequestAccountDelete = "/xrpc/com.atproto.server.requestAccountDelete";

       public const string RequestEmailConfirmation = "/xrpc/com.atproto.server.requestEmailConfirmation";

       public const string RequestEmailUpdate = "/xrpc/com.atproto.server.requestEmailUpdate";

       public const string RequestPasswordReset = "/xrpc/com.atproto.server.requestPasswordReset";

       public const string ReserveSigningKey = "/xrpc/com.atproto.server.reserveSigningKey";

       public const string ResetPassword = "/xrpc/com.atproto.server.resetPassword";

       public const string RevokeAppPassword = "/xrpc/com.atproto.server.revokeAppPassword";

       public const string UpdateEmail = "/xrpc/com.atproto.server.updateEmail";


        /// <summary>
        /// Activates a currently deactivated account. Used to finalize account migration after the account's repo is imported and identity is setup.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> ActivateAccountAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = ActivateAccount.ToString();
            var headers = new Dictionary<string, string>();
            JsonTypeInfo<Success> jsonTypeInfo = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Post<Success?>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.CheckAccountStatusOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Server.CheckAccountStatusOutput?>> CheckAccountStatusAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = CheckAccountStatus.ToString();
            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            JsonTypeInfo<Com.Atproto.Server.CheckAccountStatusOutput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.CheckAccountStatusOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.CheckAccountStatusOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Get<FishyFlip.Lexicon.Com.Atproto.Server.CheckAccountStatusOutput>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Confirm an email using a token from com.atproto.server.requestEmailConfirmation.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.AccountNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.ExpiredTokenError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidTokenError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidEmailError"/>  <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="email"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> ConfirmEmailAsync (this FishyFlip.ATProtocol atp, string email, string token, CancellationToken cancellationToken = default)
        {
            var endpointUrl = ConfirmEmail.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new ConfirmEmailInput();
            inputItem.Email = email;
            inputItem.Token = token;
            JsonTypeInfo<Com.Atproto.Server.ConfirmEmailInput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.ConfirmEmailInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.ConfirmEmailInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Success> jsonTypeInfo2 = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Post<ConfirmEmailInput, Success?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Create an account. Implemented by PDS.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidHandleError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidPasswordError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidInviteCodeError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.HandleNotAvailableError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.UnsupportedDomainError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.UnresolvableDidError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.IncompatibleDidDocError"/>  <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="handle"></param>
        /// <param name="email"></param>
        /// <param name="did"></param>
        /// <param name="inviteCode"></param>
        /// <param name="verificationCode"></param>
        /// <param name="verificationPhone"></param>
        /// <param name="password"></param>
        /// <param name="recoveryKey"></param>
        /// <param name="plcOp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.CreateAccountOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Server.CreateAccountOutput?>> CreateAccountAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATHandle handle, string? email = default, FishyFlip.Models.ATDid? did = default, string? inviteCode = default, string? verificationCode = default, string? verificationPhone = default, string? password = default, string? recoveryKey = default, ATObject? plcOp = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = CreateAccount.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new CreateAccountInput();
            inputItem.Handle = handle;
            inputItem.Email = email;
            inputItem.Did = did;
            inputItem.InviteCode = inviteCode;
            inputItem.VerificationCode = verificationCode;
            inputItem.VerificationPhone = verificationPhone;
            inputItem.Password = password;
            inputItem.RecoveryKey = recoveryKey;
            inputItem.PlcOp = plcOp;
            JsonTypeInfo<Com.Atproto.Server.CreateAccountInput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.CreateAccountInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.CreateAccountInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Com.Atproto.Server.CreateAccountOutput> jsonTypeInfo2 = (JsonTypeInfo<Com.Atproto.Server.CreateAccountOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.CreateAccountOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Post<CreateAccountInput, FishyFlip.Lexicon.Com.Atproto.Server.CreateAccountOutput?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Create an App Password.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.AccountTakedownError"/>  <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="name"></param>
        /// <param name="privileged"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.AppPassword?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Server.AppPassword?>> CreateAppPasswordAsync (this FishyFlip.ATProtocol atp, string name, bool? privileged = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = CreateAppPassword.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new CreateAppPasswordInput();
            inputItem.Name = name;
            inputItem.Privileged = privileged;
            JsonTypeInfo<Com.Atproto.Server.CreateAppPasswordInput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.CreateAppPasswordInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.CreateAppPasswordInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Com.Atproto.Server.AppPassword> jsonTypeInfo2 = (JsonTypeInfo<Com.Atproto.Server.AppPassword>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.AppPassword), atp.Options.JsonSerializerOptions)!;
            return atp.Post<CreateAppPasswordInput, FishyFlip.Lexicon.Com.Atproto.Server.AppPassword?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Create an invite code.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="useCount"></param>
        /// <param name="forAccount"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.CreateInviteCodeOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Server.CreateInviteCodeOutput?>> CreateInviteCodeAsync (this FishyFlip.ATProtocol atp, int useCount, FishyFlip.Models.ATDid? forAccount = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = CreateInviteCode.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new CreateInviteCodeInput();
            inputItem.UseCount = useCount;
            inputItem.ForAccount = forAccount;
            JsonTypeInfo<Com.Atproto.Server.CreateInviteCodeInput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.CreateInviteCodeInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.CreateInviteCodeInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Com.Atproto.Server.CreateInviteCodeOutput> jsonTypeInfo2 = (JsonTypeInfo<Com.Atproto.Server.CreateInviteCodeOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.CreateInviteCodeOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Post<CreateInviteCodeInput, FishyFlip.Lexicon.Com.Atproto.Server.CreateInviteCodeOutput?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Create invite codes.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="codeCount"></param>
        /// <param name="useCount"></param>
        /// <param name="forAccounts"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.CreateInviteCodesOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Server.CreateInviteCodesOutput?>> CreateInviteCodesAsync (this FishyFlip.ATProtocol atp, int codeCount, int useCount, List<FishyFlip.Models.ATDid>? forAccounts = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = CreateInviteCodes.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new CreateInviteCodesInput();
            inputItem.CodeCount = codeCount;
            inputItem.UseCount = useCount;
            inputItem.ForAccounts = forAccounts;
            JsonTypeInfo<Com.Atproto.Server.CreateInviteCodesInput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.CreateInviteCodesInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.CreateInviteCodesInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Com.Atproto.Server.CreateInviteCodesOutput> jsonTypeInfo2 = (JsonTypeInfo<Com.Atproto.Server.CreateInviteCodesOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.CreateInviteCodesOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Post<CreateInviteCodesInput, FishyFlip.Lexicon.Com.Atproto.Server.CreateInviteCodesOutput?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Create an authentication session.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.AccountTakedownError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.AuthFactorTokenRequiredError"/>  <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="identifier"></param>
        /// <param name="password"></param>
        /// <param name="authFactorToken"></param>
        /// <param name="allowTakendown"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.CreateSessionOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Server.CreateSessionOutput?>> CreateSessionAsync (this FishyFlip.ATProtocol atp, string identifier, string password, string? authFactorToken = default, bool? allowTakendown = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = CreateSession.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new CreateSessionInput();
            inputItem.Identifier = identifier;
            inputItem.Password = password;
            inputItem.AuthFactorToken = authFactorToken;
            inputItem.AllowTakendown = allowTakendown;
            JsonTypeInfo<Com.Atproto.Server.CreateSessionInput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.CreateSessionInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.CreateSessionInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Com.Atproto.Server.CreateSessionOutput> jsonTypeInfo2 = (JsonTypeInfo<Com.Atproto.Server.CreateSessionOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.CreateSessionOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Post<CreateSessionInput, FishyFlip.Lexicon.Com.Atproto.Server.CreateSessionOutput?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="deleteAfter"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> DeactivateAccountAsync (this FishyFlip.ATProtocol atp, DateTime? deleteAfter = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = DeactivateAccount.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new DeactivateAccountInput();
            inputItem.DeleteAfter = deleteAfter;
            JsonTypeInfo<Com.Atproto.Server.DeactivateAccountInput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.DeactivateAccountInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.DeactivateAccountInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Success> jsonTypeInfo2 = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Post<DeactivateAccountInput, Success?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.ExpiredTokenError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidTokenError"/>  <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="did"></param>
        /// <param name="password"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> DeleteAccountAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATDid did, string password, string token, CancellationToken cancellationToken = default)
        {
            var endpointUrl = DeleteAccount.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new DeleteAccountInput();
            inputItem.Did = did;
            inputItem.Password = password;
            inputItem.Token = token;
            JsonTypeInfo<Com.Atproto.Server.DeleteAccountInput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.DeleteAccountInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.DeleteAccountInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Success> jsonTypeInfo2 = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Post<DeleteAccountInput, Success?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Delete the current session. Requires auth.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> DeleteSessionAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = DeleteSession.ToString();
            var headers = new Dictionary<string, string>();
            JsonTypeInfo<Success> jsonTypeInfo = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Post<Success?>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Describes the server's account creation requirements and capabilities. Implemented by PDS.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.DescribeServerOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Server.DescribeServerOutput?>> DescribeServerAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = DescribeServer.ToString();
            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            JsonTypeInfo<Com.Atproto.Server.DescribeServerOutput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.DescribeServerOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.DescribeServerOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Get<FishyFlip.Lexicon.Com.Atproto.Server.DescribeServerOutput>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Get all invite codes for the current account. Requires auth.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.DuplicateCreateError"/>  <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="includeUsed"></param>
        /// <param name="createAvailable"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.GetAccountInviteCodesOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Server.GetAccountInviteCodesOutput?>> GetAccountInviteCodesAsync (this FishyFlip.ATProtocol atp, bool? includeUsed = default, bool? createAvailable = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetAccountInviteCodes.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            if (includeUsed != null)
            {
                queryStrings.Add("includeUsed=" + (includeUsed.Value ? "true" : "false"));
            }

            if (createAvailable != null)
            {
                queryStrings.Add("createAvailable=" + (createAvailable.Value ? "true" : "false"));
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            JsonTypeInfo<Com.Atproto.Server.GetAccountInviteCodesOutput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.GetAccountInviteCodesOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.GetAccountInviteCodesOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Get<FishyFlip.Lexicon.Com.Atproto.Server.GetAccountInviteCodesOutput>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Get a signed token on behalf of the requesting DID for the requested service.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.BadExpirationError"/> Indicates that the requested expiration date is not a valid. May be in the past or may be reliant on the requested scopes. <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="aud"></param>
        /// <param name="exp"></param>
        /// <param name="lxm"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.GetServiceAuthOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Server.GetServiceAuthOutput?>> GetServiceAuthAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATDid aud, int? exp = 0, string? lxm = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetServiceAuth.ToString();
            endpointUrl += "?";
            List<string> queryStrings = new();
            queryStrings.Add("aud=" + aud);

            if (exp != null)
            {
                queryStrings.Add("exp=" + exp);
            }

            if (lxm != null)
            {
                queryStrings.Add("lxm=" + lxm);
            }

            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            endpointUrl += string.Join("&", queryStrings);
            JsonTypeInfo<Com.Atproto.Server.GetServiceAuthOutput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.GetServiceAuthOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.GetServiceAuthOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Get<FishyFlip.Lexicon.Com.Atproto.Server.GetServiceAuthOutput>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Get information about the current auth session. Requires auth.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.GetSessionOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Server.GetSessionOutput?>> GetSessionAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = GetSession.ToString();
            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            JsonTypeInfo<Com.Atproto.Server.GetSessionOutput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.GetSessionOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.GetSessionOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Get<FishyFlip.Lexicon.Com.Atproto.Server.GetSessionOutput>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// List all App Passwords.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.AccountTakedownError"/>  <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.ListAppPasswordsOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Server.ListAppPasswordsOutput?>> ListAppPasswordsAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = ListAppPasswords.ToString();
            var headers = new Dictionary<string, string>();
            headers.Add(Constants.AtProtoAcceptLabelers, atp.Options.LabelDefinitionsHeader);
            JsonTypeInfo<Com.Atproto.Server.ListAppPasswordsOutput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.ListAppPasswordsOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.ListAppPasswordsOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Get<FishyFlip.Lexicon.Com.Atproto.Server.ListAppPasswordsOutput>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Refresh an authentication session. Requires auth using the 'refreshJwt' (not the 'accessJwt').
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.AccountTakedownError"/>  <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.RefreshSessionOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Server.RefreshSessionOutput?>> RefreshSessionAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = RefreshSession.ToString();
            var headers = new Dictionary<string, string>();
            JsonTypeInfo<Com.Atproto.Server.RefreshSessionOutput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.RefreshSessionOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.RefreshSessionOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Post<FishyFlip.Lexicon.Com.Atproto.Server.RefreshSessionOutput?>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Initiate a user account deletion via email.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> RequestAccountDeleteAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = RequestAccountDelete.ToString();
            var headers = new Dictionary<string, string>();
            JsonTypeInfo<Success> jsonTypeInfo = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Post<Success?>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Request an email with a code to confirm ownership of email.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> RequestEmailConfirmationAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = RequestEmailConfirmation.ToString();
            var headers = new Dictionary<string, string>();
            JsonTypeInfo<Success> jsonTypeInfo = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Post<Success?>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Request a token in order to update email.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.RequestEmailUpdateOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Server.RequestEmailUpdateOutput?>> RequestEmailUpdateAsync (this FishyFlip.ATProtocol atp, CancellationToken cancellationToken = default)
        {
            var endpointUrl = RequestEmailUpdate.ToString();
            var headers = new Dictionary<string, string>();
            JsonTypeInfo<Com.Atproto.Server.RequestEmailUpdateOutput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.RequestEmailUpdateOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.RequestEmailUpdateOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Post<FishyFlip.Lexicon.Com.Atproto.Server.RequestEmailUpdateOutput?>(endpointUrl, jsonTypeInfo, cancellationToken, headers);
        }


        /// <summary>
        /// Initiate a user account password reset via email.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="email"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> RequestPasswordResetAsync (this FishyFlip.ATProtocol atp, string email, CancellationToken cancellationToken = default)
        {
            var endpointUrl = RequestPasswordReset.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new RequestPasswordResetInput();
            inputItem.Email = email;
            JsonTypeInfo<Com.Atproto.Server.RequestPasswordResetInput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.RequestPasswordResetInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.RequestPasswordResetInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Success> jsonTypeInfo2 = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Post<RequestPasswordResetInput, Success?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="did"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.ReserveSigningKeyOutput?"/></returns>
        public static Task<Result<FishyFlip.Lexicon.Com.Atproto.Server.ReserveSigningKeyOutput?>> ReserveSigningKeyAsync (this FishyFlip.ATProtocol atp, FishyFlip.Models.ATDid? did = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = ReserveSigningKey.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new ReserveSigningKeyInput();
            inputItem.Did = did;
            JsonTypeInfo<Com.Atproto.Server.ReserveSigningKeyInput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.ReserveSigningKeyInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.ReserveSigningKeyInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Com.Atproto.Server.ReserveSigningKeyOutput> jsonTypeInfo2 = (JsonTypeInfo<Com.Atproto.Server.ReserveSigningKeyOutput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.ReserveSigningKeyOutput), atp.Options.JsonSerializerOptions)!;
            return atp.Post<ReserveSigningKeyInput, FishyFlip.Lexicon.Com.Atproto.Server.ReserveSigningKeyOutput?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Reset a user account password using a token.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.ExpiredTokenError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidTokenError"/>  <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="token"></param>
        /// <param name="password"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> ResetPasswordAsync (this FishyFlip.ATProtocol atp, string token, string password, CancellationToken cancellationToken = default)
        {
            var endpointUrl = ResetPassword.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new ResetPasswordInput();
            inputItem.Token = token;
            inputItem.Password = password;
            JsonTypeInfo<Com.Atproto.Server.ResetPasswordInput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.ResetPasswordInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.ResetPasswordInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Success> jsonTypeInfo2 = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Post<ResetPasswordInput, Success?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Revoke an App Password by name.
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> RevokeAppPasswordAsync (this FishyFlip.ATProtocol atp, string name, CancellationToken cancellationToken = default)
        {
            var endpointUrl = RevokeAppPassword.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new RevokeAppPasswordInput();
            inputItem.Name = name;
            JsonTypeInfo<Com.Atproto.Server.RevokeAppPasswordInput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.RevokeAppPasswordInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.RevokeAppPasswordInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Success> jsonTypeInfo2 = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Post<RevokeAppPasswordInput, Success?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }


        /// <summary>
        /// Update an account's email.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.ExpiredTokenError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidTokenError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.TokenRequiredError"/>  <br/>
        /// </summary>
        /// <param name="atp"></param>
        /// <param name="email"></param>
        /// <param name="emailAuthFactor"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success?"/></returns>
        public static Task<Result<Success?>> UpdateEmailAsync (this FishyFlip.ATProtocol atp, string email, bool? emailAuthFactor = default, string? token = default, CancellationToken cancellationToken = default)
        {
            var endpointUrl = UpdateEmail.ToString();
            var headers = new Dictionary<string, string>();
            var inputItem = new UpdateEmailInput();
            inputItem.Email = email;
            inputItem.EmailAuthFactor = emailAuthFactor;
            inputItem.Token = token;
            JsonTypeInfo<Com.Atproto.Server.UpdateEmailInput> jsonTypeInfo = (JsonTypeInfo<Com.Atproto.Server.UpdateEmailInput>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Com.Atproto.Server.UpdateEmailInput), atp.Options.JsonSerializerOptions)!;
            JsonTypeInfo<Success> jsonTypeInfo2 = (JsonTypeInfo<Success>)atp.Options.SourceGenerationContext.GetTypeInfo(typeof(Success), atp.Options.JsonSerializerOptions)!;
            return atp.Post<UpdateEmailInput, Success?>(endpointUrl, jsonTypeInfo, jsonTypeInfo2, inputItem, cancellationToken, headers);
        }

    }
}

