// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Com.Atproto.Server
{
    public partial class UpdateEmailInput : ATObject, ICBOREncodable<UpdateEmailInput>, IJsonEncodable<UpdateEmailInput>, IParsable<UpdateEmailInput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateEmailInput"/> class.
        /// </summary>
        /// <param name="email"></param>
        /// <param name="emailAuthFactor"></param>
        /// <param name="token">Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed.</param>
        public UpdateEmailInput(string email = default, bool? emailAuthFactor = default, string? token = default)
        {
            this.Email = email;
            this.EmailAuthFactor = emailAuthFactor;
            this.Token = token;
            this.Type = "com.atproto.server.updateEmail#UpdateEmailInput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateEmailInput"/> class.
        /// </summary>
        public UpdateEmailInput()
        {
            this.Type = "com.atproto.server.updateEmail#UpdateEmailInput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateEmailInput"/> class.
        /// </summary>
        public UpdateEmailInput(CBORObject obj)
        {
            if (obj["email"] is not null) this.Email = obj["email"].AsString();
            if (obj["emailAuthFactor"] is not null) this.EmailAuthFactor = obj["emailAuthFactor"].AsBoolean();
            if (obj["token"] is not null) this.Token = obj["token"].AsString();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the email.
        /// </summary>
        [JsonPropertyName("email")]
        [JsonRequired]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the emailAuthFactor.
        /// </summary>
        [JsonPropertyName("emailAuthFactor")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? EmailAuthFactor { get; set; }

        /// <summary>
        /// Gets or sets the token.
        /// <br/> Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed.
        /// </summary>
        [JsonPropertyName("token")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Token { get; set; }

        public const string RecordType = "com.atproto.server.updateEmail#UpdateEmailInput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Server.UpdateEmailInput>)SourceGenerationContext.Default.ComAtprotoServerUpdateEmailInput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Server.UpdateEmailInput>)SourceGenerationContext.Default.ComAtprotoServerUpdateEmailInput);
        }

        public static new UpdateEmailInput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Com.Atproto.Server.UpdateEmailInput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Server.UpdateEmailInput>)SourceGenerationContext.Default.ComAtprotoServerUpdateEmailInput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new UpdateEmailInput FromCBORObject(CBORObject obj)
        {
            return new UpdateEmailInput(obj);
        }

        /// <inheritdoc/>
        public static UpdateEmailInput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<UpdateEmailInput>(s, (JsonTypeInfo<UpdateEmailInput>)SourceGenerationContext.Default.ComAtprotoServerUpdateEmailInput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out UpdateEmailInput result)
        {
            result = JsonSerializer.Deserialize<UpdateEmailInput>(s, (JsonTypeInfo<UpdateEmailInput>)SourceGenerationContext.Default.ComAtprotoServerUpdateEmailInput);
            return result != null;
        }
    }
}

