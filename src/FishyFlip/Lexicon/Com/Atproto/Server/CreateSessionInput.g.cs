// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Com.Atproto.Server
{
    public partial class CreateSessionInput : ATObject, ICBOREncodable<CreateSessionInput>, IJsonEncodable<CreateSessionInput>, IParsable<CreateSessionInput>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSessionInput"/> class.
        /// </summary>
        /// <param name="identifier">Handle or other identifier supported by the server for the authenticating user.</param>
        /// <param name="password"></param>
        /// <param name="authFactorToken"></param>
        /// <param name="allowTakendown">When true, instead of throwing error for takendown accounts, a valid response with a narrow scoped token will be returned</param>
        public CreateSessionInput(string identifier = default, string password = default, string? authFactorToken = default, bool? allowTakendown = default)
        {
            this.Identifier = identifier;
            this.Password = password;
            this.AuthFactorToken = authFactorToken;
            this.AllowTakendown = allowTakendown;
            this.Type = "com.atproto.server.createSession#CreateSessionInput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSessionInput"/> class.
        /// </summary>
        public CreateSessionInput()
        {
            this.Type = "com.atproto.server.createSession#CreateSessionInput";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSessionInput"/> class.
        /// </summary>
        public CreateSessionInput(CBORObject obj)
        {
            if (obj["identifier"] is not null) this.Identifier = obj["identifier"].AsString();
            if (obj["password"] is not null) this.Password = obj["password"].AsString();
            if (obj["authFactorToken"] is not null) this.AuthFactorToken = obj["authFactorToken"].AsString();
            if (obj["allowTakendown"] is not null) this.AllowTakendown = obj["allowTakendown"].AsBoolean();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the identifier.
        /// <br/> Handle or other identifier supported by the server for the authenticating user.
        /// </summary>
        [JsonPropertyName("identifier")]
        [JsonRequired]
        public string Identifier { get; set; }

        /// <summary>
        /// Gets or sets the password.
        /// </summary>
        [JsonPropertyName("password")]
        [JsonRequired]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets the authFactorToken.
        /// </summary>
        [JsonPropertyName("authFactorToken")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? AuthFactorToken { get; set; }

        /// <summary>
        /// Gets or sets the allowTakendown.
        /// <br/> When true, instead of throwing error for takendown accounts, a valid response with a narrow scoped token will be returned
        /// </summary>
        [JsonPropertyName("allowTakendown")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? AllowTakendown { get; set; }

        public const string RecordType = "com.atproto.server.createSession#CreateSessionInput";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Server.CreateSessionInput>)SourceGenerationContext.Default.ComAtprotoServerCreateSessionInput);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Server.CreateSessionInput>)SourceGenerationContext.Default.ComAtprotoServerCreateSessionInput);
        }

        public static new CreateSessionInput FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Com.Atproto.Server.CreateSessionInput>(json, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Server.CreateSessionInput>)SourceGenerationContext.Default.ComAtprotoServerCreateSessionInput)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new CreateSessionInput FromCBORObject(CBORObject obj)
        {
            return new CreateSessionInput(obj);
        }

        /// <inheritdoc/>
        public static CreateSessionInput Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<CreateSessionInput>(s, (JsonTypeInfo<CreateSessionInput>)SourceGenerationContext.Default.ComAtprotoServerCreateSessionInput)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out CreateSessionInput result)
        {
            result = JsonSerializer.Deserialize<CreateSessionInput>(s, (JsonTypeInfo<CreateSessionInput>)SourceGenerationContext.Default.ComAtprotoServerCreateSessionInput);
            return result != null;
        }
    }
}

