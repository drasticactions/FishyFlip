// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Lexicon.Com.Atproto.Server
{
    public partial class AppPassword : ATObject, ICBOREncodable<AppPassword>, IJsonEncodable<AppPassword>, IParsable<AppPassword>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="AppPassword"/> class.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="password"></param>
        /// <param name="createdAt"></param>
        /// <param name="privileged"></param>
        public AppPassword(string name = default, string password = default, DateTime? createdAt = default, bool? privileged = default)
        {
            this.Name = name;
            this.Password = password;
            this.CreatedAt = createdAt ?? DateTime.UtcNow;
            this.Privileged = privileged;
            this.Type = "com.atproto.server.createAppPassword#appPassword";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AppPassword"/> class.
        /// </summary>
        public AppPassword()
        {
            this.Type = "com.atproto.server.createAppPassword#appPassword";
        }


        /// <summary>
        /// Initializes a new instance of the <see cref="AppPassword"/> class.
        /// </summary>
        public AppPassword(CBORObject obj)
        {
            if (obj["name"] is not null) this.Name = obj["name"].AsString();
            if (obj["password"] is not null) this.Password = obj["password"].AsString();
            if (obj["createdAt"] is not null) this.CreatedAt = obj["createdAt"].ToDateTime();
            if (obj["privileged"] is not null) this.Privileged = obj["privileged"].AsBoolean();
            if (obj["$type"] is not null) this.Type = obj["$type"].AsString();
        }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [JsonPropertyName("name")]
        [JsonRequired]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the password.
        /// </summary>
        [JsonPropertyName("password")]
        [JsonRequired]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets the createdAt.
        /// </summary>
        [JsonPropertyName("createdAt")]
        [JsonRequired]
        public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;

        /// <summary>
        /// Gets or sets the privileged.
        /// </summary>
        [JsonPropertyName("privileged")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? Privileged { get; set; }

        public const string RecordType = "com.atproto.server.createAppPassword#appPassword";

        public override string ToJson()
        {
            return JsonSerializer.Serialize(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Server.AppPassword>)SourceGenerationContext.Default.ComAtprotoServerAppPassword);
        }

        public override byte[] ToUtf8Json()
        {
            return JsonSerializer.SerializeToUtf8Bytes(this, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Server.AppPassword>)SourceGenerationContext.Default.ComAtprotoServerAppPassword);
        }

        public static new AppPassword FromJson(string json)
        {
            return JsonSerializer.Deserialize<FishyFlip.Lexicon.Com.Atproto.Server.AppPassword>(json, (JsonTypeInfo<FishyFlip.Lexicon.Com.Atproto.Server.AppPassword>)SourceGenerationContext.Default.ComAtprotoServerAppPassword)!;
        }

        /// <inheritdoc/>
        public override CBORObject ToCBORObject()
        {
            using var jsonStream = new MemoryStream(Encoding.UTF8.GetBytes(this.ToJson()));
            return CBORObject.ReadJSON(jsonStream);
        }

        /// <inheritdoc/>
        public static new AppPassword FromCBORObject(CBORObject obj)
        {
            return new AppPassword(obj);
        }

        /// <inheritdoc/>
        public static AppPassword Parse(string s, IFormatProvider? provider)
        {
            return JsonSerializer.Deserialize<AppPassword>(s, (JsonTypeInfo<AppPassword>)SourceGenerationContext.Default.ComAtprotoServerAppPassword)!;
        }

        /// <inheritdoc/>
        public static bool TryParse(string? s, IFormatProvider? provider, out AppPassword result)
        {
            result = JsonSerializer.Deserialize<AppPassword>(s, (JsonTypeInfo<AppPassword>)SourceGenerationContext.Default.ComAtprotoServerAppPassword);
            return result != null;
        }
    }
}

