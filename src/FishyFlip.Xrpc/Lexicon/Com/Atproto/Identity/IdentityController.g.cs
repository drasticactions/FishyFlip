// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Xrpc.Lexicon.Com.Atproto.Identity
{

    /// <summary>
    /// com.atproto.identity XRPC Group.
    /// </summary>
    [ApiController]
    public abstract class IdentityController : ControllerBase
    {

        /// <summary>
        /// Describe the credentials that should be included in the DID doc of an account that is migrating to this service.
        /// </summary>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Identity.GetRecommendedDidCredentialsOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.identity.getRecommendedDidCredentials")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Identity.GetRecommendedDidCredentialsOutput>, BadRequest>> GetRecommendedDidCredentialsAsync (CancellationToken cancellationToken = default);

        /// <summary>
        /// Request that the server re-resolve an identity (DID and handle). The server may ignore this request, or require authentication, depending on the role, implementation, and policy of the server.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.HandleNotFoundError"/> The resolution process confirmed that the handle does not resolve to any DID. <br/>
        /// <see cref="FishyFlip.Lexicon.DidNotFoundError"/> The DID resolution process confirmed that there is no current DID. <br/>
        /// <see cref="FishyFlip.Lexicon.DidDeactivatedError"/> The DID previously existed, but has been deactivated. <br/>
        /// </summary>
        /// <param name="identifier"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Identity.IdentityInfo"/></returns>
        [HttpPost("/xrpc/com.atproto.identity.refreshIdentity")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Identity.IdentityInfo>, BadRequest>> RefreshIdentityAsync (FishyFlip.Models.ATIdentifier identifier, CancellationToken cancellationToken = default);

        /// <summary>
        /// Request an email with a code to in order to request a signed PLC operation. Requires Auth.
        /// </summary>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success"/></returns>
        [HttpPost("/xrpc/com.atproto.identity.requestPlcOperationSignature")]
        public abstract Task<Results<Ok, BadRequest>> RequestPlcOperationSignatureAsync (CancellationToken cancellationToken = default);

        /// <summary>
        /// Resolves DID to DID document. Does not bi-directionally verify handle.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.DidNotFoundError"/> The DID resolution process confirmed that there is no current DID. <br/>
        /// <see cref="FishyFlip.Lexicon.DidDeactivatedError"/> The DID previously existed, but has been deactivated. <br/>
        /// </summary>
        /// <param name="did">DID to resolve.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Identity.ResolveDidOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.identity.resolveDid")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Identity.ResolveDidOutput>, BadRequest>> ResolveDidAsync (FishyFlip.Models.ATDid did, CancellationToken cancellationToken = default);

        /// <summary>
        /// Resolves an atproto handle (hostname) to a DID. Does not necessarily bi-directionally verify against the the DID document.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.HandleNotFoundError"/> The resolution process confirmed that the handle does not resolve to any DID. <br/>
        /// </summary>
        /// <param name="handle">The handle to resolve.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Identity.ResolveHandleOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.identity.resolveHandle")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Identity.ResolveHandleOutput>, BadRequest>> ResolveHandleAsync (FishyFlip.Models.ATHandle handle, CancellationToken cancellationToken = default);

        /// <summary>
        /// Resolves an identity (DID or Handle) to a full identity (DID document and verified handle).
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.HandleNotFoundError"/> The resolution process confirmed that the handle does not resolve to any DID. <br/>
        /// <see cref="FishyFlip.Lexicon.DidNotFoundError"/> The DID resolution process confirmed that there is no current DID. <br/>
        /// <see cref="FishyFlip.Lexicon.DidDeactivatedError"/> The DID previously existed, but has been deactivated. <br/>
        /// </summary>
        /// <param name="identifier">Handle or DID to resolve.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Identity.IdentityInfo"/></returns>
        [HttpGet("/xrpc/com.atproto.identity.resolveIdentity")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Identity.IdentityInfo>, BadRequest>> ResolveIdentityAsync (FishyFlip.Models.ATIdentifier identifier, CancellationToken cancellationToken = default);

        /// <summary>
        /// Signs a PLC operation to update some value(s) in the requesting DID's document.
        /// </summary>
        /// <param name="token">A token received through com.atproto.identity.requestPlcOperationSignature</param>
        /// <param name="rotationKeys"></param>
        /// <param name="alsoKnownAs"></param>
        /// <param name="verificationMethods"></param>
        /// <param name="services"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Identity.SignPlcOperationOutput"/></returns>
        [HttpPost("/xrpc/com.atproto.identity.signPlcOperation")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Identity.SignPlcOperationOutput>, BadRequest>> SignPlcOperationAsync (string? token = default, List<string>? rotationKeys = default, List<string>? alsoKnownAs = default, ATObject? verificationMethods = default, ATObject? services = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Validates a PLC operation to ensure that it doesn't violate a service's constraints or get the identity into a bad state, then submits it to the PLC registry
        /// </summary>
        /// <param name="operation"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success"/></returns>
        [HttpPost("/xrpc/com.atproto.identity.submitPlcOperation")]
        public abstract Task<Results<Ok, BadRequest>> SubmitPlcOperationAsync (ATObject operation, CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the current account's handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.
        /// </summary>
        /// <param name="handle">The new handle.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success"/></returns>
        [HttpPost("/xrpc/com.atproto.identity.updateHandle")]
        public abstract Task<Results<Ok, BadRequest>> UpdateHandleAsync (FishyFlip.Models.ATHandle handle, CancellationToken cancellationToken = default);
    }
}

