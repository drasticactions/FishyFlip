// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Xrpc.Lexicon.Com.Atproto.Server
{

    /// <summary>
    /// com.atproto.server XRPC Group.
    /// </summary>
    [ApiController]
    public abstract class ServerController : ControllerBase
    {

        /// <summary>
        /// Activates a currently deactivated account. Used to finalize account migration after the account's repo is imported and identity is setup.
        /// </summary>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success"/></returns>
        [HttpPost("/xrpc/com.atproto.server.activateAccount")]
        public abstract Task<Results<Ok, BadRequest>> ActivateAccountAsync (CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.
        /// </summary>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.CheckAccountStatusOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.server.checkAccountStatus")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Server.CheckAccountStatusOutput>, BadRequest>> CheckAccountStatusAsync (CancellationToken cancellationToken = default);

        /// <summary>
        /// Confirm an email using a token from com.atproto.server.requestEmailConfirmation.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.AccountNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.ExpiredTokenError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidTokenError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidEmailError"/>  <br/>
        /// </summary>
        /// <param name="email"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success"/></returns>
        [HttpPost("/xrpc/com.atproto.server.confirmEmail")]
        public abstract Task<Results<Ok, BadRequest>> ConfirmEmailAsync ([FromBody] string email, [FromBody] string token, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an account. Implemented by PDS.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidHandleError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidPasswordError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidInviteCodeError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.HandleNotAvailableError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.UnsupportedDomainError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.UnresolvableDidError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.IncompatibleDidDocError"/>  <br/>
        /// </summary>
        /// <param name="handle">Requested handle for the account.</param>
        /// <param name="email"></param>
        /// <param name="did">Pre-existing atproto DID, being imported to a new account.</param>
        /// <param name="inviteCode"></param>
        /// <param name="verificationCode"></param>
        /// <param name="verificationPhone"></param>
        /// <param name="password">Initial account password. May need to meet instance-specific password strength requirements.</param>
        /// <param name="recoveryKey">DID PLC rotation key (aka, recovery key) to be included in PLC creation operation.</param>
        /// <param name="plcOp">A signed DID PLC operation to be submitted as part of importing an existing account to this instance. NOTE: this optional field may be updated when full account migration is implemented.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.CreateAccountOutput"/></returns>
        [HttpPost("/xrpc/com.atproto.server.createAccount")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Server.CreateAccountOutput>, BadRequest>> CreateAccountAsync ([FromBody] FishyFlip.Models.ATHandle handle, [FromBody] string? email = default, [FromBody] FishyFlip.Models.ATDid? did = default, [FromBody] string? inviteCode = default, [FromBody] string? verificationCode = default, [FromBody] string? verificationPhone = default, [FromBody] string? password = default, [FromBody] string? recoveryKey = default, [FromBody] ATObject? plcOp = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an App Password.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.AccountTakedownError"/>  <br/>
        /// </summary>
        /// <param name="name">A short name for the App Password, to help distinguish them.</param>
        /// <param name="privileged">If an app password has 'privileged' access to possibly sensitive account state. Meant for use with trusted clients.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.AppPassword"/></returns>
        [HttpPost("/xrpc/com.atproto.server.createAppPassword")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Server.AppPassword>, BadRequest>> CreateAppPasswordAsync ([FromBody] string name, [FromBody] bool? privileged = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an invite code.
        /// </summary>
        /// <param name="useCount"></param>
        /// <param name="forAccount"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.CreateInviteCodeOutput"/></returns>
        [HttpPost("/xrpc/com.atproto.server.createInviteCode")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Server.CreateInviteCodeOutput>, BadRequest>> CreateInviteCodeAsync ([FromBody] int useCount, [FromBody] FishyFlip.Models.ATDid? forAccount = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create invite codes.
        /// </summary>
        /// <param name="codeCount"></param>
        /// <param name="useCount"></param>
        /// <param name="forAccounts"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.CreateInviteCodesOutput"/></returns>
        [HttpPost("/xrpc/com.atproto.server.createInviteCodes")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Server.CreateInviteCodesOutput>, BadRequest>> CreateInviteCodesAsync ([FromBody] int codeCount, [FromBody] int useCount, [FromBody] List<FishyFlip.Models.ATDid>? forAccounts = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create an authentication session.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.AccountTakedownError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.AuthFactorTokenRequiredError"/>  <br/>
        /// </summary>
        /// <param name="identifier">Handle or other identifier supported by the server for the authenticating user.</param>
        /// <param name="password"></param>
        /// <param name="authFactorToken"></param>
        /// <param name="allowTakendown">When true, instead of throwing error for takendown accounts, a valid response with a narrow scoped token will be returned</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.CreateSessionOutput"/></returns>
        [HttpPost("/xrpc/com.atproto.server.createSession")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Server.CreateSessionOutput>, BadRequest>> CreateSessionAsync ([FromBody] string identifier, [FromBody] string password, [FromBody] string? authFactorToken = default, [FromBody] bool? allowTakendown = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.
        /// </summary>
        /// <param name="deleteAfter">A recommendation to server as to how long they should hold onto the deactivated account before deleting.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success"/></returns>
        [HttpPost("/xrpc/com.atproto.server.deactivateAccount")]
        public abstract Task<Results<Ok, BadRequest>> DeactivateAccountAsync ([FromBody] DateTime? deleteAfter = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.ExpiredTokenError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidTokenError"/>  <br/>
        /// </summary>
        /// <param name="did"></param>
        /// <param name="password"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success"/></returns>
        [HttpPost("/xrpc/com.atproto.server.deleteAccount")]
        public abstract Task<Results<Ok, BadRequest>> DeleteAccountAsync ([FromBody] FishyFlip.Models.ATDid did, [FromBody] string password, [FromBody] string token, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete the current session. Requires auth.
        /// </summary>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success"/></returns>
        [HttpPost("/xrpc/com.atproto.server.deleteSession")]
        public abstract Task<Results<Ok, BadRequest>> DeleteSessionAsync (CancellationToken cancellationToken = default);

        /// <summary>
        /// Describes the server's account creation requirements and capabilities. Implemented by PDS.
        /// </summary>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.DescribeServerOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.server.describeServer")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Server.DescribeServerOutput>, BadRequest>> DescribeServerAsync (CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all invite codes for the current account. Requires auth.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.DuplicateCreateError"/>  <br/>
        /// </summary>
        /// <param name="includeUsed"></param>
        /// <param name="createAvailable">Controls whether any new 'earned' but not 'created' invites should be created.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.GetAccountInviteCodesOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.server.getAccountInviteCodes")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Server.GetAccountInviteCodesOutput>, BadRequest>> GetAccountInviteCodesAsync ([FromQuery] bool? includeUsed = default, [FromQuery] bool? createAvailable = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a signed token on behalf of the requesting DID for the requested service.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.BadExpirationError"/> Indicates that the requested expiration date is not a valid. May be in the past or may be reliant on the requested scopes. <br/>
        /// </summary>
        /// <param name="aud">The DID of the service that the token will be used to authenticate with</param>
        /// <param name="exp">The time in Unix Epoch seconds that the JWT expires. Defaults to 60 seconds in the future. The service may enforce certain time bounds on tokens depending on the requested scope.</param>
        /// <param name="lxm">Lexicon (XRPC) method to bind the requested token to</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.GetServiceAuthOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.server.getServiceAuth")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Server.GetServiceAuthOutput>, BadRequest>> GetServiceAuthAsync ([FromQuery] FishyFlip.Models.ATDid aud, [FromQuery] int? exp = 0, [FromQuery] string? lxm = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get information about the current auth session. Requires auth.
        /// </summary>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.GetSessionOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.server.getSession")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Server.GetSessionOutput>, BadRequest>> GetSessionAsync (CancellationToken cancellationToken = default);

        /// <summary>
        /// List all App Passwords.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.AccountTakedownError"/>  <br/>
        /// </summary>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.ListAppPasswordsOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.server.listAppPasswords")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Server.ListAppPasswordsOutput>, BadRequest>> ListAppPasswordsAsync (CancellationToken cancellationToken = default);

        /// <summary>
        /// Refresh an authentication session. Requires auth using the 'refreshJwt' (not the 'accessJwt').
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.AccountTakedownError"/>  <br/>
        /// </summary>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.RefreshSessionOutput"/></returns>
        [HttpPost("/xrpc/com.atproto.server.refreshSession")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Server.RefreshSessionOutput>, BadRequest>> RefreshSessionAsync (CancellationToken cancellationToken = default);

        /// <summary>
        /// Initiate a user account deletion via email.
        /// </summary>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success"/></returns>
        [HttpPost("/xrpc/com.atproto.server.requestAccountDelete")]
        public abstract Task<Results<Ok, BadRequest>> RequestAccountDeleteAsync (CancellationToken cancellationToken = default);

        /// <summary>
        /// Request an email with a code to confirm ownership of email.
        /// </summary>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success"/></returns>
        [HttpPost("/xrpc/com.atproto.server.requestEmailConfirmation")]
        public abstract Task<Results<Ok, BadRequest>> RequestEmailConfirmationAsync (CancellationToken cancellationToken = default);

        /// <summary>
        /// Request a token in order to update email.
        /// </summary>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.RequestEmailUpdateOutput"/></returns>
        [HttpPost("/xrpc/com.atproto.server.requestEmailUpdate")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Server.RequestEmailUpdateOutput>, BadRequest>> RequestEmailUpdateAsync (CancellationToken cancellationToken = default);

        /// <summary>
        /// Initiate a user account password reset via email.
        /// </summary>
        /// <param name="email"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success"/></returns>
        [HttpPost("/xrpc/com.atproto.server.requestPasswordReset")]
        public abstract Task<Results<Ok, BadRequest>> RequestPasswordResetAsync ([FromBody] string email, CancellationToken cancellationToken = default);

        /// <summary>
        /// Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.
        /// </summary>
        /// <param name="did">The DID to reserve a key for.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Server.ReserveSigningKeyOutput"/></returns>
        [HttpPost("/xrpc/com.atproto.server.reserveSigningKey")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Server.ReserveSigningKeyOutput>, BadRequest>> ReserveSigningKeyAsync ([FromBody] FishyFlip.Models.ATDid? did = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset a user account password using a token.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.ExpiredTokenError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidTokenError"/>  <br/>
        /// </summary>
        /// <param name="token"></param>
        /// <param name="password"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success"/></returns>
        [HttpPost("/xrpc/com.atproto.server.resetPassword")]
        public abstract Task<Results<Ok, BadRequest>> ResetPasswordAsync ([FromBody] string token, [FromBody] string password, CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke an App Password by name.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success"/></returns>
        [HttpPost("/xrpc/com.atproto.server.revokeAppPassword")]
        public abstract Task<Results<Ok, BadRequest>> RevokeAppPasswordAsync ([FromBody] string name, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an account's email.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.ExpiredTokenError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidTokenError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.TokenRequiredError"/>  <br/>
        /// </summary>
        /// <param name="email"></param>
        /// <param name="emailAuthFactor"></param>
        /// <param name="token">Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success"/></returns>
        [HttpPost("/xrpc/com.atproto.server.updateEmail")]
        public abstract Task<Results<Ok, BadRequest>> UpdateEmailAsync ([FromBody] string email, [FromBody] bool? emailAuthFactor = default, [FromBody] string? token = default, CancellationToken cancellationToken = default);
    }
}

