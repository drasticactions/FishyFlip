// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Xrpc.Lexicon.Com.Atproto.Repo
{

    /// <summary>
    /// com.atproto.repo XRPC Group.
    /// </summary>
    [ApiController]
    public abstract class RepoController : ControllerBase
    {

        /// <summary>
        /// Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidSwapError"/> Indicates that the 'swapCommit' parameter did not match current commit. <br/>
        /// </summary>
        /// <param name="repo">The handle or DID of the repo (aka, current account).</param>
        /// <param name="writes"></param>
        /// <param name="validate">Can be set to 'false' to skip Lexicon schema validation of record data across all operations, 'true' to require it, or leave unset to validate only for known Lexicons.</param>
        /// <param name="swapCommit">If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.ApplyWritesOutput"/></returns>
        [HttpPost("/xrpc/com.atproto.repo.applyWrites")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Repo.ApplyWritesOutput>, BadRequest>> ApplyWritesAsync (FishyFlip.Models.ATIdentifier repo, List<ATObject> writes, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a single new repository record. Requires auth, implemented by PDS.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidSwapError"/> Indicates that 'swapCommit' didn't match current repo commit. <br/>
        /// </summary>
        /// <param name="repo">The handle or DID of the repo (aka, current account).</param>
        /// <param name="collection">The NSID of the record collection.</param>
        /// <param name="record">The record itself. Must contain a $type field.</param>
        /// <param name="rkey">The Record Key.</param>
        /// <param name="validate">Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons.</param>
        /// <param name="swapCommit">Compare and swap with the previous commit by CID.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.CreateRecordOutput"/></returns>
        [HttpPost("/xrpc/com.atproto.repo.createRecord")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Repo.CreateRecordOutput>, BadRequest>> CreateRecordAsync (FishyFlip.Models.ATIdentifier repo, string collection, ATObject record, string? rkey = default, bool? validate = default, string? swapCommit = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidSwapError"/>  <br/>
        /// </summary>
        /// <param name="repo">The handle or DID of the repo (aka, current account).</param>
        /// <param name="collection">The NSID of the record collection.</param>
        /// <param name="rkey">The Record Key.</param>
        /// <param name="swapRecord">Compare and swap with the previous record by CID.</param>
        /// <param name="swapCommit">Compare and swap with the previous commit by CID.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.DeleteRecordOutput"/></returns>
        [HttpPost("/xrpc/com.atproto.repo.deleteRecord")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Repo.DeleteRecordOutput>, BadRequest>> DeleteRecordAsync (FishyFlip.Models.ATIdentifier repo, string collection, string rkey, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get information about an account and repository, including the list of collections. Does not require auth.
        /// </summary>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.DescribeRepoOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.repo.describeRepo")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Repo.DescribeRepoOutput>, BadRequest>> DescribeRepoAsync (FishyFlip.Models.ATIdentifier repo, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a single record from a repository. Does not require auth.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.RecordNotFoundError"/>  <br/>
        /// </summary>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record collection.</param>
        /// <param name="rkey">The Record Key.</param>
        /// <param name="cid">The CID of the version of the record. If not specified, then return the most recent version.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.GetRecordOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.repo.getRecord")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Repo.GetRecordOutput>, BadRequest>> GetRecordAsync (FishyFlip.Models.ATIdentifier repo, string collection, string rkey, string? cid = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.
        /// </summary>
        /// <param name="content"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success"/></returns>
        [HttpPost("/xrpc/com.atproto.repo.importRepo")]
        public abstract Task<Results<Ok, BadRequest>> ImportRepoAsync (StreamContent content, CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.ListMissingBlobsOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.repo.listMissingBlobs")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Repo.ListMissingBlobsOutput>, BadRequest>> ListMissingBlobsAsync (int? limit = 500, string? cursor = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// List a range of records in a repository, matching a specific collection. Does not require auth.
        /// </summary>
        /// <param name="repo">The handle or DID of the repo.</param>
        /// <param name="collection">The NSID of the record type.</param>
        /// <param name="limit">The number of records to return.</param>
        /// <param name="cursor"></param>
        /// <param name="reverse">Flag to reverse the order of the returned records.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.ListRecordsOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.repo.listRecords")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Repo.ListRecordsOutput>, BadRequest>> ListRecordsAsync (FishyFlip.Models.ATIdentifier repo, string collection, int? limit = 50, string? cursor = default, bool? reverse = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.InvalidSwapError"/>  <br/>
        /// </summary>
        /// <param name="repo">The handle or DID of the repo (aka, current account).</param>
        /// <param name="collection">The NSID of the record collection.</param>
        /// <param name="rkey">The Record Key.</param>
        /// <param name="record">The record to write.</param>
        /// <param name="validate">Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons.</param>
        /// <param name="swapRecord">Compare and swap with the previous record by CID. WARNING: nullable and optional field; may cause problems with golang implementation</param>
        /// <param name="swapCommit">Compare and swap with the previous commit by CID.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.PutRecordOutput"/></returns>
        [HttpPost("/xrpc/com.atproto.repo.putRecord")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Repo.PutRecordOutput>, BadRequest>> PutRecordAsync (FishyFlip.Models.ATIdentifier repo, string collection, string rkey, ATObject record, bool? validate = default, string? swapRecord = default, string? swapCommit = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.
        /// </summary>
        /// <param name="content"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.UploadBlobOutput"/></returns>
        [HttpPost("/xrpc/com.atproto.repo.uploadBlob")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Repo.UploadBlobOutput>, BadRequest>> UploadBlobAsync (StreamContent content, CancellationToken cancellationToken = default);
    }
}

