// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Xrpc.Lexicon.Com.Atproto.Sync
{

    /// <summary>
    /// com.atproto.sync XRPC Group.
    /// </summary>
    [ApiController]
    public abstract class SyncController : ControllerBase
    {

        /// <summary>
        /// Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.BlobNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoTakendownError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoSuspendedError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoDeactivatedError"/>  <br/>
        /// </summary>
        /// <param name="did">The DID of the account.</param>
        /// <param name="cid">The CID of the blob to fetch</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="byte[]"/></returns>
        [HttpGet("/xrpc/com.atproto.sync.getBlob")]
        public abstract Task<Results<Ok<byte[]>, BadRequest>> GetBlobAsync (FishyFlip.Models.ATDid did, string cid, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.BlockNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoTakendownError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoSuspendedError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoDeactivatedError"/>  <br/>
        /// </summary>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="cids"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="CarResponse"/></returns>
        [HttpGet("/xrpc/com.atproto.sync.getBlocks")]
        public abstract Task<Results<FileStreamHttpResult, BadRequest>> GetBlocksAsync (FishyFlip.Models.ATDid did, List<string> cids, CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns information about a specified upstream host, as consumed by the server. Implemented by relays.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.HostNotFoundError"/>  <br/>
        /// </summary>
        /// <param name="hostname">Hostname of the host (eg, PDS or relay) being queried.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Sync.GetHostStatusOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.sync.getHostStatus")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Sync.GetHostStatusOutput>, BadRequest>> GetHostStatusAsync (string hostname, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the current commit CID & revision of the specified repo. Does not require auth.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.RepoNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoTakendownError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoSuspendedError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoDeactivatedError"/>  <br/>
        /// </summary>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Sync.GetLatestCommitOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.sync.getLatestCommit")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Sync.GetLatestCommitOutput>, BadRequest>> GetLatestCommitAsync (FishyFlip.Models.ATDid did, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.RecordNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoTakendownError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoSuspendedError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoDeactivatedError"/>  <br/>
        /// </summary>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="collection"></param>
        /// <param name="rkey">Record Key</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="CarResponse"/></returns>
        [HttpGet("/xrpc/com.atproto.sync.getRecord")]
        public abstract Task<Results<FileStreamHttpResult, BadRequest>> GetRecordAsync (FishyFlip.Models.ATDid did, string collection, string rkey, CancellationToken cancellationToken = default);

        /// <summary>
        /// Download a repository export as CAR file. Optionally only a 'diff' since a previous revision. Does not require auth; implemented by PDS.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.RepoNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoTakendownError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoSuspendedError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoDeactivatedError"/>  <br/>
        /// </summary>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">The revision ('rev') of the repo to create a diff from.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="CarResponse"/></returns>
        [HttpGet("/xrpc/com.atproto.sync.getRepo")]
        public abstract Task<Results<FileStreamHttpResult, BadRequest>> GetRepoAsync (FishyFlip.Models.ATDid did, string? since = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.RepoNotFoundError"/>  <br/>
        /// </summary>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Sync.GetRepoStatusOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.sync.getRepoStatus")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Sync.GetRepoStatusOutput>, BadRequest>> GetRepoStatusAsync (FishyFlip.Models.ATDid did, CancellationToken cancellationToken = default);

        /// <summary>
        /// List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.RepoNotFoundError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoTakendownError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoSuspendedError"/>  <br/>
        /// <see cref="FishyFlip.Lexicon.RepoDeactivatedError"/>  <br/>
        /// </summary>
        /// <param name="did">The DID of the repo.</param>
        /// <param name="since">Optional revision of the repo to list blobs since.</param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Sync.ListBlobsOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.sync.listBlobs")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Sync.ListBlobsOutput>, BadRequest>> ListBlobsAsync (FishyFlip.Models.ATDid did, string? since = default, int? limit = 500, string? cursor = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Enumerates upstream hosts (eg, PDS or relay instances) that this service consumes from. Implemented by relays.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Sync.ListHostsOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.sync.listHosts")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Sync.ListHostsOutput>, BadRequest>> ListHostsAsync (int? limit = 200, string? cursor = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Sync.ListReposOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.sync.listRepos")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Sync.ListReposOutput>, BadRequest>> ListReposAsync (int? limit = 500, string? cursor = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Enumerates all the DIDs which have records with the given collection NSID.
        /// </summary>
        /// <param name="collection"></param>
        /// <param name="limit">Maximum size of response set. Recommend setting a large maximum (1000+) when enumerating large DID lists.</param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Com.Atproto.Sync.ListReposByCollectionOutput"/></returns>
        [HttpGet("/xrpc/com.atproto.sync.listReposByCollection")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Com.Atproto.Sync.ListReposByCollectionOutput>, BadRequest>> ListReposByCollectionAsync (string collection, int? limit = 500, string? cursor = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.HostBannedError"/>  <br/>
        /// </summary>
        /// <param name="hostname">Hostname of the current service (eg, PDS) that is requesting to be crawled.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="Success"/></returns>
        [HttpPost("/xrpc/com.atproto.sync.requestCrawl")]
        public abstract Task<Results<Ok, BadRequest>> RequestCrawlAsync (string hostname, CancellationToken cancellationToken = default);
    }
}

