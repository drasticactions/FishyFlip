// <auto-generated />
// This file was generated by FFSourceGen.
// Do not modify this file.

#nullable enable annotations
#nullable disable warnings

namespace FishyFlip.Xrpc.Lexicon.Tools.Ozone.Moderation
{

    /// <summary>
    /// tools.ozone.moderation XRPC Group.
    /// </summary>
    [ApiController]
    public abstract class ModerationController : ControllerBase
    {

        /// <summary>
        /// Take a moderation action on an actor.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.SubjectHasActionError"/>  <br/>
        /// </summary>
        /// <param name="@event">
        /// <br/> Union Types: <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventTakedown"/> (tools.ozone.moderation.defs#modEventTakedown) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventAcknowledge"/> (tools.ozone.moderation.defs#modEventAcknowledge) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventEscalate"/> (tools.ozone.moderation.defs#modEventEscalate) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventComment"/> (tools.ozone.moderation.defs#modEventComment) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventLabel"/> (tools.ozone.moderation.defs#modEventLabel) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventReport"/> (tools.ozone.moderation.defs#modEventReport) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventMute"/> (tools.ozone.moderation.defs#modEventMute) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventUnmute"/> (tools.ozone.moderation.defs#modEventUnmute) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventMuteReporter"/> (tools.ozone.moderation.defs#modEventMuteReporter) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventUnmuteReporter"/> (tools.ozone.moderation.defs#modEventUnmuteReporter) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventReverseTakedown"/> (tools.ozone.moderation.defs#modEventReverseTakedown) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventResolveAppeal"/> (tools.ozone.moderation.defs#modEventResolveAppeal) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventEmail"/> (tools.ozone.moderation.defs#modEventEmail) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventDivert"/> (tools.ozone.moderation.defs#modEventDivert) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventTag"/> (tools.ozone.moderation.defs#modEventTag) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.AccountEvent"/> (tools.ozone.moderation.defs#accountEvent) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.IdentityEvent"/> (tools.ozone.moderation.defs#identityEvent) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.RecordEvent"/> (tools.ozone.moderation.defs#recordEvent) <br/>
        /// <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventPriorityScore"/> (tools.ozone.moderation.defs#modEventPriorityScore) <br/>
        /// </param>
        /// <param name="subject">
        /// <br/> Union Types: <br/>
        /// com.atproto.admin.defs#repoRef <br/>
        /// <see cref="FishyFlip.Lexicon.Com.Atproto.Repo.StrongRef"/> (com.atproto.repo.strongRef) <br/>
        /// </param>
        /// <param name="createdBy"></param>
        /// <param name="subjectBlobCids"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventView"/></returns>
        [HttpPost("/xrpc/tools.ozone.moderation.emitEvent")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventView>, BadRequest>> EmitEventAsync (ATObject @event, ATObject subject, FishyFlip.Models.ATDid createdBy, List<string>? subjectBlobCids = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get details about a moderation event.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventViewDetail"/></returns>
        [HttpGet("/xrpc/tools.ozone.moderation.getEvent")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Tools.Ozone.Moderation.ModEventViewDetail>, BadRequest>> GetEventAsync (int id, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get details about a record.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.RecordNotFoundError"/>  <br/>
        /// </summary>
        /// <param name="uri"></param>
        /// <param name="cid"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.RecordViewDetail"/></returns>
        [HttpGet("/xrpc/tools.ozone.moderation.getRecord")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Tools.Ozone.Moderation.RecordViewDetail>, BadRequest>> GetRecordAsync (FishyFlip.Models.ATUri uri, string? cid = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get details about some records.
        /// </summary>
        /// <param name="uris"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.GetRecordsOutput"/></returns>
        [HttpGet("/xrpc/tools.ozone.moderation.getRecords")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Tools.Ozone.Moderation.GetRecordsOutput>, BadRequest>> GetRecordsAsync (List<FishyFlip.Models.ATUri> uris, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get details about a repository.
        /// <br/> Possible Errors: <br/>
        /// <see cref="FishyFlip.Lexicon.RepoNotFoundError"/>  <br/>
        /// </summary>
        /// <param name="did"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.RepoViewDetail"/></returns>
        [HttpGet("/xrpc/tools.ozone.moderation.getRepo")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Tools.Ozone.Moderation.RepoViewDetail>, BadRequest>> GetRepoAsync (FishyFlip.Models.ATDid did, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get reporter stats for a list of users.
        /// </summary>
        /// <param name="dids"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.GetReporterStatsOutput"/></returns>
        [HttpGet("/xrpc/tools.ozone.moderation.getReporterStats")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Tools.Ozone.Moderation.GetReporterStatsOutput>, BadRequest>> GetReporterStatsAsync (List<FishyFlip.Models.ATDid> dids, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get details about some repositories.
        /// </summary>
        /// <param name="dids"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.GetReposOutput"/></returns>
        [HttpGet("/xrpc/tools.ozone.moderation.getRepos")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Tools.Ozone.Moderation.GetReposOutput>, BadRequest>> GetReposAsync (List<FishyFlip.Models.ATDid> dids, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get details about subjects.
        /// </summary>
        /// <param name="subjects"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.GetSubjectsOutput"/></returns>
        [HttpGet("/xrpc/tools.ozone.moderation.getSubjects")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Tools.Ozone.Moderation.GetSubjectsOutput>, BadRequest>> GetSubjectsAsync (List<string> subjects, CancellationToken cancellationToken = default);

        /// <summary>
        /// List moderation events related to a subject.
        /// </summary>
        /// <param name="types">The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent<name>) to filter by. If not specified, all events are returned.</param>
        /// <param name="createdBy"></param>
        /// <param name="sortDirection">Sort direction for the events. Defaults to descending order of created at timestamp.</param>
        /// <param name="createdAfter">Retrieve events created after a given timestamp</param>
        /// <param name="createdBefore">Retrieve events created before a given timestamp</param>
        /// <param name="subject"></param>
        /// <param name="collections">If specified, only events where the subject belongs to the given collections will be returned. When subjectType is set to 'account', this will be ignored.</param>
        /// <param name="subjectType">If specified, only events where the subject is of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.</param>
        /// <param name="includeAllUserRecords">If true, events on all record types (posts, lists, profile etc.) or records from given 'collections' param, owned by the did are returned.</param>
        /// <param name="limit"></param>
        /// <param name="hasComment">If true, only events with comments are returned</param>
        /// <param name="comment">If specified, only events with comments containing the keyword are returned. Apply || separator to use multiple keywords and match using OR condition.</param>
        /// <param name="addedLabels">If specified, only events where all of these labels were added are returned</param>
        /// <param name="removedLabels">If specified, only events where all of these labels were removed are returned</param>
        /// <param name="addedTags">If specified, only events where all of these tags were added are returned</param>
        /// <param name="removedTags">If specified, only events where all of these tags were removed are returned</param>
        /// <param name="reportTypes"></param>
        /// <param name="policies"></param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.QueryEventsOutput"/></returns>
        [HttpGet("/xrpc/tools.ozone.moderation.queryEvents")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Tools.Ozone.Moderation.QueryEventsOutput>, BadRequest>> QueryEventsAsync (List<string>? types = default, FishyFlip.Models.ATDid? createdBy = default, string? sortDirection = default, DateTime? createdAfter = default, DateTime? createdBefore = default, string? subject = default, List<string>? collections = default, string? subjectType = default, bool? includeAllUserRecords = default, int? limit = 50, bool? hasComment = default, string? comment = default, List<string>? addedLabels = default, List<string>? removedLabels = default, List<string>? addedTags = default, List<string>? removedTags = default, List<string>? reportTypes = default, List<string>? policies = default, string? cursor = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// View moderation statuses of subjects (record or repo).
        /// </summary>
        /// <param name="queueCount">Number of queues being used by moderators. Subjects will be split among all queues.</param>
        /// <param name="queueIndex">Index of the queue to fetch subjects from. Works only when queueCount value is specified.</param>
        /// <param name="queueSeed">A seeder to shuffle/balance the queue items.</param>
        /// <param name="includeAllUserRecords">All subjects, or subjects from given 'collections' param, belonging to the account specified in the 'subject' param will be returned.</param>
        /// <param name="subject">The subject to get the status for.</param>
        /// <param name="comment">Search subjects by keyword from comments</param>
        /// <param name="reportedAfter">Search subjects reported after a given timestamp</param>
        /// <param name="reportedBefore">Search subjects reported before a given timestamp</param>
        /// <param name="reviewedAfter">Search subjects reviewed after a given timestamp</param>
        /// <param name="hostingDeletedAfter">Search subjects where the associated record/account was deleted after a given timestamp</param>
        /// <param name="hostingDeletedBefore">Search subjects where the associated record/account was deleted before a given timestamp</param>
        /// <param name="hostingUpdatedAfter">Search subjects where the associated record/account was updated after a given timestamp</param>
        /// <param name="hostingUpdatedBefore">Search subjects where the associated record/account was updated before a given timestamp</param>
        /// <param name="hostingStatuses">Search subjects by the status of the associated record/account</param>
        /// <param name="reviewedBefore">Search subjects reviewed before a given timestamp</param>
        /// <param name="includeMuted">By default, we don't include muted subjects in the results. Set this to true to include them.</param>
        /// <param name="onlyMuted">When set to true, only muted subjects and reporters will be returned.</param>
        /// <param name="reviewState">Specify when fetching subjects in a certain state</param>
        /// <param name="ignoreSubjects"></param>
        /// <param name="lastReviewedBy">Get all subject statuses that were reviewed by a specific moderator</param>
        /// <param name="sortField"></param>
        /// <param name="sortDirection"></param>
        /// <param name="takendown">Get subjects that were taken down</param>
        /// <param name="appealed">Get subjects in unresolved appealed status</param>
        /// <param name="limit"></param>
        /// <param name="tags"></param>
        /// <param name="excludeTags"></param>
        /// <param name="cursor"></param>
        /// <param name="collections">If specified, subjects belonging to the given collections will be returned. When subjectType is set to 'account', this will be ignored.</param>
        /// <param name="subjectType">If specified, subjects of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.</param>
        /// <param name="minAccountSuspendCount">If specified, only subjects that belong to an account that has at least this many suspensions will be returned.</param>
        /// <param name="minReportedRecordsCount">If specified, only subjects that belong to an account that has at least this many reported records will be returned.</param>
        /// <param name="minTakendownRecordsCount">If specified, only subjects that belong to an account that has at least this many taken down records will be returned.</param>
        /// <param name="minPriorityScore">If specified, only subjects that have priority score value above the given value will be returned.</param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.QueryStatusesOutput"/></returns>
        [HttpGet("/xrpc/tools.ozone.moderation.queryStatuses")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Tools.Ozone.Moderation.QueryStatusesOutput>, BadRequest>> QueryStatusesAsync (int? queueCount = 0, int? queueIndex = 0, string? queueSeed = default, bool? includeAllUserRecords = default, string? subject = default, string? comment = default, DateTime? reportedAfter = default, DateTime? reportedBefore = default, DateTime? reviewedAfter = default, DateTime? hostingDeletedAfter = default, DateTime? hostingDeletedBefore = default, DateTime? hostingUpdatedAfter = default, DateTime? hostingUpdatedBefore = default, List<string>? hostingStatuses = default, DateTime? reviewedBefore = default, bool? includeMuted = default, bool? onlyMuted = default, string? reviewState = default, List<string>? ignoreSubjects = default, FishyFlip.Models.ATDid? lastReviewedBy = default, string? sortField = default, string? sortDirection = default, bool? takendown = default, bool? appealed = default, int? limit = 50, List<string>? tags = default, List<string>? excludeTags = default, string? cursor = default, List<string>? collections = default, string? subjectType = default, int? minAccountSuspendCount = 0, int? minReportedRecordsCount = 0, int? minTakendownRecordsCount = 0, int? minPriorityScore = 0, CancellationToken cancellationToken = default);

        /// <summary>
        /// Find repositories based on a search term.
        /// </summary>
        /// <param name="q"></param>
        /// <param name="limit"></param>
        /// <param name="cursor"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Result of <see cref="FishyFlip.Lexicon.Tools.Ozone.Moderation.SearchReposOutput"/></returns>
        [HttpGet("/xrpc/tools.ozone.moderation.searchRepos")]
        public abstract Task<Results<Ok<FishyFlip.Lexicon.Tools.Ozone.Moderation.SearchReposOutput>, BadRequest>> SearchReposAsync (string? q = default, int? limit = 50, string? cursor = default, CancellationToken cancellationToken = default);
    }
}

